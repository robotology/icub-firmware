<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\amcbldc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\amcbldc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Tue Jul 20 15:29:13 2021
<BR><P>
<H3>Maximum Stack Usage =        672 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; embot::app::skeleton::os::evthreadcan::run(embot::app::skeleton::os::evthreadcan::CFG const&) &rArr; embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&) &rArr; embot::app::theApplication::execute(embot::app::theApplication::Config const&) &rArr; embot::os::theScheduler::start(embot::os::theScheduler::Config const&) &rArr; embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&) &rArr; embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&) &rArr; osal_base_initialise &rArr; oosiit_memory_load &rArr; rt_iit_params_init &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1ab]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[491]">oosiit_tsk_get_extdata</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[459]">oosiit_sys_error</a><BR>
 <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[3c]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[72]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">rt_alloc_box</a><BR>
 <LI><a href="#[43a]">std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43a]">std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*)</a><BR>
 <LI><a href="#[441]">eventviewer_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[442]">eventviewer_load</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from motorhal_config.o(.text.ADC1_2_IRQHandler) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[4a]">ADC4_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[4b]">ADC5_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[4d]">COMP1_2_3_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[4e]">COMP4_5_6_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[4f]">COMP7_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[70]">CORDIC_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[58]">CRS_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from motorhal_config.o(.text.DMA1_Channel1_IRQHandler) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from motorhal_config.o(.text.DMA1_Channel2_IRQHandler) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[6c]">DMA1_Channel8_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[49]">DMA2_Channel5_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[6d]">DMA2_Channel6_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[6e]">DMA2_Channel7_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[6f]">DMA2_Channel8_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[6a]">DMAMUX_OVR_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from motorhal_config.o(.text.EXTI15_10_IRQHandler) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[22]">FDCAN1_IT0_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[23]">FDCAN1_IT1_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[62]">FDCAN2_IT0_IRQHandler</a> from embot_hw_bsp_amcbldc.o(.text.FDCAN2_IT0_IRQHandler) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[63]">FDCAN2_IT1_IRQHandler</a> from embot_hw_bsp_amcbldc.o(.text.FDCAN2_IT1_IRQHandler) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[64]">FDCAN3_IT0_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[65]">FDCAN3_IT1_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[71]">FMAC_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[3d]">FMC_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[5e]">FPU_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[81]">HAL_FDCAN_ErrorCallback</a> from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_ErrorCallback) referenced 2 times from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
 <LI><a href="#[82]">HAL_FDCAN_ErrorStatusCallback</a> from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_ErrorStatusCallback) referenced 2 times from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
 <LI><a href="#[7e]">HAL_FDCAN_HighPriorityMessageCallback</a> from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_HighPriorityMessageCallback) referenced 2 times from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
 <LI><a href="#[83]">HAL_FDCAN_MspInit</a> from fdcan_4.o(.text.HAL_FDCAN_MspInit) referenced 2 times from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
 <LI><a href="#[78]">HAL_FDCAN_RxFifo0Callback</a> from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_RxFifo0Callback) referenced 2 times from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
 <LI><a href="#[7a]">HAL_FDCAN_RxFifo1Callback</a> from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_RxFifo1Callback) referenced 2 times from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
 <LI><a href="#[80]">HAL_FDCAN_TimeoutOccurredCallback</a> from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_TimeoutOccurredCallback) referenced 2 times from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
 <LI><a href="#[7f]">HAL_FDCAN_TimestampWraparoundCallback</a> from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_TimestampWraparoundCallback) referenced 2 times from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
 <LI><a href="#[7d]">HAL_FDCAN_TxBufferAbortCallback</a> from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_TxBufferAbortCallback) referenced 2 times from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
 <LI><a href="#[7c]">HAL_FDCAN_TxBufferCompleteCallback</a> from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_TxBufferCompleteCallback) referenced 2 times from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
 <LI><a href="#[79]">HAL_FDCAN_TxEventFifoCallback</a> from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_TxEventFifoCallback) referenced 2 times from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
 <LI><a href="#[7b]">HAL_FDCAN_TxFifoEmptyCallback</a> from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_TxFifoEmptyCallback) referenced 2 times from stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
 <LI><a href="#[56]">HRTIM1_FLT_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[50]">HRTIM1_Master_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[51]">HRTIM1_TIMA_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[52]">HRTIM1_TIMB_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[53]">HRTIM1_TIMC_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[54]">HRTIM1_TIMD_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[55]">HRTIM1_TIME_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[57]">HRTIM1_TIMF_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[69]">I2C3_ER_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[68]">I2C3_EV_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[60]">I2C4_ER_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[5f]">I2C4_EV_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[3e]">LPTIM1_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[67]">LPUART1_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[e]">PVD_PVM_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from hal_cm4.o(.emb_text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[6b]">QUADSPI_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[66]">RNG_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[f]">RTC_TAMP_LSECSS_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[59]">SAI1_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[61]">SPI4_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from hal_cm4.o(.emb_text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from hal_cm4.o(.emb_text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[74]">SystemInit</a> from system_stm32g4xx_1.o(.text.SystemInit) referenced from stm32hal.startup.amcbldc.o(.text)
 <LI><a href="#[25]">TIM1_BRK_TIM15_IRQHandler</a> from motorhal_config.o(.text.TIM1_BRK_TIM15_IRQHandler) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from motorhal_config.o(.text.TIM1_CC_IRQHandler) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_TIM17_IRQHandler</a> from motorhal_config.o(.text.TIM1_TRG_COM_TIM17_IRQHandler) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[26]">TIM1_UP_TIM16_IRQHandler</a> from motorhal_config.o(.text.TIM1_UP_TIM16_IRQHandler) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[5a]">TIM20_BRK_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[5d]">TIM20_CC_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[5c]">TIM20_TRG_COM_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[5b]">TIM20_UP_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from motorhal_config.o(.text.TIM2_IRQHandler) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from motorhal_config.o(.text.TIM3_IRQHandler) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[43]">TIM6_DAC_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[44]">TIM7_DAC_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[4c]">UCPD1_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[20]">USB_HP_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[21]">USB_LP_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from stm32hal.startup.amcbldc.o(.text) referenced from stm32hal.startup.amcbldc.o(RESET)
 <LI><a href="#[14f]">_GLOBAL__sub_I_amcbldc_main.cpp</a> from amcbldc-main.o(.text._GLOBAL__sub_I_amcbldc_main.cpp) referenced from amcbldc-main.o(.init_array)
 <LI><a href="#[153]">_GLOBAL__sub_I_embot_app_skeleton_os_basic.cpp</a> from embot_app_skeleton_os_basic.o(.text._GLOBAL__sub_I_embot_app_skeleton_os_basic.cpp) referenced from embot_app_skeleton_os_basic.o(.init_array)
 <LI><a href="#[152]">_GLOBAL__sub_I_embot_app_skeleton_os_evthreadcan.cpp</a> from embot_app_skeleton_os_evthreadcan.o(.text._GLOBAL__sub_I_embot_app_skeleton_os_evthreadcan.cpp) referenced from embot_app_skeleton_os_evthreadcan.o(.init_array)
 <LI><a href="#[150]">_GLOBAL__sub_I_embot_hw_motor.cpp</a> from embot_hw_motor.o(.text._GLOBAL__sub_I_embot_hw_motor.cpp) referenced from embot_hw_motor.o(.init_array)
 <LI><a href="#[151]">_GLOBAL__sub_I_embot_os_rtos.cpp</a> from embot_os_rtos.o(.text._GLOBAL__sub_I_embot_os_rtos.cpp) referenced from embot_os_rtos.o(.init_array)
 <LI><a href="#[84]">tCTRL_onevent(embot::os::Thread*, unsigned int, void*)</a> from amcbldc-main.o(.text._Z13tCTRL_oneventPN5embot2os6ThreadEjPv) referenced 2 times from amcbldc-main.o(.text._Z19s_start_CTRL_threadv)
 <LI><a href="#[85]">tCTRL_startup(embot::os::Thread*, void*)</a> from amcbldc-main.o(.text._Z13tCTRL_startupPN5embot2os6ThreadEPv) referenced 2 times from amcbldc-main.o(.text._Z19s_start_CTRL_threadv)
 <LI><a href="#[9e]">thrCAN(void*)</a> from embot_app_skeleton_os_evthreadcan.o(.text._Z6thrCANPv) referenced 2 times from embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan15start_evt_basedEv)
 <LI><a href="#[98]">tCBKman(void*)</a> from embot_os_thecallbackmanager.o(.text._Z7tCBKmanPv) referenced 2 times from embot_os_thecallbackmanager.o(.text._ZN5embot2os18theCallbackManager5startERKNS1_6ConfigE)
 <LI><a href="#[97]">tTMRman(void*)</a> from embot_os_thetimermanager.o(.text._Z7tTMRmanPv) referenced 2 times from embot_os_thetimermanager.o(.text._ZN5embot2os15theTimerManager5startERKNS1_6ConfigE)
 <LI><a href="#[86]">thrCTRL(void*)</a> from amcbldc-main.o(.text._Z7thrCTRLPv) referenced 2 times from amcbldc-main.o(.text._Z19s_start_CTRL_threadv)
 <LI><a href="#[87]">osal_init_pre_main_t::on_fatal(void*, osal_fatalerror_t, char const*)</a> from embot_os_rtos.o(.text._ZN20osal_init_pre_main_t8on_fatalEPv17osal_fatalerror_tPKc) referenced 2 times from embot_os_rtos.o(.text._ZN20osal_init_pre_main_tC2Ev)
 <LI><a href="#[d5]">embot::hw::FlashStorage::getBaseAddress()</a> from embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage14getBaseAddressEv) referenced from embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
 <LI><a href="#[d4]">embot::hw::FlashStorage::isAddressValid(unsigned int)</a> from embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage14isAddressValidEj) referenced from embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
 <LI><a href="#[d9]">embot::hw::FlashStorage::read(unsigned int, unsigned int, void*)</a> from embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage4readEjjPv) referenced from embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
 <LI><a href="#[d8]">embot::hw::FlashStorage::erase(unsigned int, unsigned int)</a> from embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage5eraseEjj) referenced from embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
 <LI><a href="#[da]">embot::hw::FlashStorage::write(unsigned int, unsigned int, void const*)</a> from embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage5writeEjjPKv) referenced from embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
 <LI><a href="#[d6]">embot::hw::FlashStorage::getSize()</a> from embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage7getSizeEv) referenced from embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
 <LI><a href="#[d7]">embot::hw::FlashStorage::fullerase()</a> from embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage9fulleraseEv) referenced from embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
 <LI><a href="#[d3]">embot::hw::FlashStorage::isInitted()</a> from embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage9isInittedEv) referenced from embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
 <LI><a href="#[dc]">embot::hw::FlashStorage::~FlashStorage__deallocating()</a> from embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorageD0Ev) referenced from embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
 <LI><a href="#[db]">embot::hw::FlashStorage::~FlashStorage__sub_object()</a> from embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorageD2Ev) referenced from embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
 <LI><a href="#[8b]">embot::hw::bsp::print(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&)</a> from embot_hw_bsp.o(.text._ZN5embot2hw3bsp5printERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE) referenced 2 times from embot_hw.o(.text._ZN5embot2hw4initERKNS0_6ConfigE)
 <LI><a href="#[88]">embot::hw::bsp::_get1millitick()</a> from embot_hw_bsp.o(.text._ZN5embot2hw3bspL14_get1millitickEv) referenced 2 times from embot_hw_bsp.o(.text._ZN5embot2hw3bsp4initERKNS0_6ConfigE)
 <LI><a href="#[8a]">embot::hw::can::callbackOnRXcompletion(__FDCAN_HandleTypeDef*, unsigned int)</a> from embot_hw_can.o(.text._ZN5embot2hw3can22callbackOnRXcompletionEP21__FDCAN_HandleTypeDefj) referenced 2 times from embot_hw_can.o(.text._ZN5embot2hw3canL19s_registercallbacksEP21__FDCAN_HandleTypeDef)
 <LI><a href="#[89]">embot::hw::can::callbackOnTXcompletion(__FDCAN_HandleTypeDef*)</a> from embot_hw_can.o(.text._ZN5embot2hw3can22callbackOnTXcompletionEP21__FDCAN_HandleTypeDef) referenced 2 times from embot_hw_can.o(.text._ZN5embot2hw3canL19s_registercallbacksEP21__FDCAN_HandleTypeDef)
 <LI><a href="#[c0]">embot::hw::gpio::$_0::__invoke()</a> from embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_08__invokeEv) referenced from embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
 <LI><a href="#[c1]">embot::hw::gpio::$_1::__invoke()</a> from embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_18__invokeEv) referenced from embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
 <LI><a href="#[c2]">embot::hw::gpio::$_2::__invoke()</a> from embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_28__invokeEv) referenced from embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
 <LI><a href="#[c3]">embot::hw::gpio::$_3::__invoke()</a> from embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_38__invokeEv) referenced from embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
 <LI><a href="#[c4]">embot::hw::gpio::$_4::__invoke()</a> from embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_48__invokeEv) referenced from embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
 <LI><a href="#[c5]">embot::hw::gpio::$_5::__invoke()</a> from embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_58__invokeEv) referenced from embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
 <LI><a href="#[c6]">embot::hw::gpio::$_6::__invoke()</a> from embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_68__invokeEv) referenced from embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
 <LI><a href="#[e3]">embot::os::IdleThread::setMessage(void*, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os10IdleThread10setMessageEPvj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
 <LI><a href="#[e5]">embot::os::IdleThread::setCallback(embot::core::Callback const&, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os10IdleThread11setCallbackERKNS_4core8CallbackEj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
 <LI><a href="#[df]">embot::os::IdleThread::setPriority(embot::os::Priority)</a> from embot_os_thread.o(.text._ZN5embot2os10IdleThread11setPriorityENS0_8PriorityE) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
 <LI><a href="#[e1]">embot::os::IdleThread::run()</a> from embot_os_thread.o(.text._ZN5embot2os10IdleThread3runEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
 <LI><a href="#[e2]">embot::os::IdleThread::setEvent(unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os10IdleThread8setEventEj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
 <LI><a href="#[e4]">embot::os::IdleThread::setValue(unsigned int, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os10IdleThread8setValueEjj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
 <LI><a href="#[e7]">embot::os::IdleThread::~IdleThread__deallocating()</a> from embot_os_thread.o(.text._ZN5embot2os10IdleThreadD0Ev) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
 <LI><a href="#[e6]">embot::os::IdleThread::~IdleThread__sub_object()</a> from embot_os_thread.o(.text._ZN5embot2os10IdleThreadD2Ev) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
 <LI><a href="#[ee]">embot::os::InitThread::setMessage(void*, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os10InitThread10setMessageEPvj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
 <LI><a href="#[f0]">embot::os::InitThread::setCallback(embot::core::Callback const&, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os10InitThread11setCallbackERKNS_4core8CallbackEj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
 <LI><a href="#[ea]">embot::os::InitThread::setPriority(embot::os::Priority)</a> from embot_os_thread.o(.text._ZN5embot2os10InitThread11setPriorityENS0_8PriorityE) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
 <LI><a href="#[ec]">embot::os::InitThread::run()</a> from embot_os_thread.o(.text._ZN5embot2os10InitThread3runEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
 <LI><a href="#[ed]">embot::os::InitThread::setEvent(unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os10InitThread8setEventEj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
 <LI><a href="#[ef]">embot::os::InitThread::setValue(unsigned int, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os10InitThread8setValueEjj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
 <LI><a href="#[f2]">embot::os::InitThread::~InitThread__deallocating()</a> from embot_os_thread.o(.text._ZN5embot2os10InitThreadD0Ev) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
 <LI><a href="#[f1]">embot::os::InitThread::~InitThread__sub_object()</a> from embot_os_thread.o(.text._ZN5embot2os10InitThreadD2Ev) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
 <LI><a href="#[8c]">embot::os::timertools::TMR::OnExpiryCbk(void*, void*)</a> from embot_os_timer.o(.text._ZN5embot2os10timertools3TMR11OnExpiryCbkEPvS3_) referenced 2 times from embot_os_timer.o(.text._ZN5embot2os10timertools3TMR5startERKNS0_5Timer6ConfigEb)
 <LI><a href="#[f9]">embot::os::EventThread::setMessage(void*, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os11EventThread10setMessageEPvj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
 <LI><a href="#[fb]">embot::os::EventThread::setCallback(embot::core::Callback const&, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os11EventThread11setCallbackERKNS_4core8CallbackEj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
 <LI><a href="#[f5]">embot::os::EventThread::setPriority(embot::os::Priority)</a> from embot_os_thread.o(.text._ZN5embot2os11EventThread11setPriorityENS0_8PriorityE) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
 <LI><a href="#[f7]">embot::os::EventThread::run()</a> from embot_os_thread.o(.text._ZN5embot2os11EventThread3runEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
 <LI><a href="#[8d]">embot::os::EventThread::Impl::dummyOnEvent(embot::os::Thread*, unsigned int, void*)</a> from embot_os_thread.o(.text._ZN5embot2os11EventThread4Impl12dummyOnEventEPNS0_6ThreadEjPv) referenced 2 times from embot_os_thread.o(.text._ZN5embot2os11EventThread4ImplC2EPS1_)
 <LI><a href="#[8e]">embot::os::EventThread::Impl::os_eventdriven_loop(void*)</a> from embot_os_thread.o(.text._ZN5embot2os11EventThread4Impl19os_eventdriven_loopEPv) referenced 2 times from embot_os_thread.o(.text._ZN5embot2os11EventThread5startERKNS1_6ConfigEPFvPvE)
 <LI><a href="#[f8]">embot::os::EventThread::setEvent(unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os11EventThread8setEventEj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
 <LI><a href="#[fa]">embot::os::EventThread::setValue(unsigned int, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os11EventThread8setValueEjj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
 <LI><a href="#[fd]">embot::os::EventThread::~EventThread__deallocating()</a> from embot_os_thread.o(.text._ZN5embot2os11EventThreadD0Ev) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
 <LI><a href="#[fc]">embot::os::EventThread::~EventThread__sub_object()</a> from embot_os_thread.o(.text._ZN5embot2os11EventThreadD2Ev) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
 <LI><a href="#[8f]">embot::os::theScheduler::Impl::osIdleThread()</a> from embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4Impl12osIdleThreadEv) referenced 2 times from embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4Impl5startERKNS1_6ConfigE)
 <LI><a href="#[91]">embot::os::theScheduler::Impl::launcher()</a> from embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4Impl8launcherEv) referenced 2 times from embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4Impl5startERKNS1_6ConfigE)
 <LI><a href="#[90]">embot::os::theScheduler::Impl::osOnError(void*, int, char const*)</a> from embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4Impl9osOnErrorEPviPKc) referenced 2 times from embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4Impl5startERKNS1_6ConfigE)
 <LI><a href="#[104]">embot::os::MessageThread::setMessage(void*, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os13MessageThread10setMessageEPvj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
 <LI><a href="#[106]">embot::os::MessageThread::setCallback(embot::core::Callback const&, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os13MessageThread11setCallbackERKNS_4core8CallbackEj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
 <LI><a href="#[100]">embot::os::MessageThread::setPriority(embot::os::Priority)</a> from embot_os_thread.o(.text._ZN5embot2os13MessageThread11setPriorityENS0_8PriorityE) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
 <LI><a href="#[102]">embot::os::MessageThread::run()</a> from embot_os_thread.o(.text._ZN5embot2os13MessageThread3runEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
 <LI><a href="#[92]">embot::os::MessageThread::Impl::dummyOnMessage(embot::os::Thread*, void*, void*)</a> from embot_os_thread.o(.text._ZN5embot2os13MessageThread4Impl14dummyOnMessageEPNS0_6ThreadEPvS5_) referenced 2 times from embot_os_thread.o(.text._ZN5embot2os13MessageThread4ImplC2EPS1_)
 <LI><a href="#[93]">embot::os::MessageThread::Impl::os_messagedriven_loop(void*)</a> from embot_os_thread.o(.text._ZN5embot2os13MessageThread4Impl21os_messagedriven_loopEPv) referenced 2 times from embot_os_thread.o(.text._ZN5embot2os13MessageThread5startERKNS1_6ConfigEPFvPvE)
 <LI><a href="#[103]">embot::os::MessageThread::setEvent(unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os13MessageThread8setEventEj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
 <LI><a href="#[105]">embot::os::MessageThread::setValue(unsigned int, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os13MessageThread8setValueEjj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
 <LI><a href="#[108]">embot::os::MessageThread::~MessageThread__deallocating()</a> from embot_os_thread.o(.text._ZN5embot2os13MessageThreadD0Ev) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
 <LI><a href="#[107]">embot::os::MessageThread::~MessageThread__sub_object()</a> from embot_os_thread.o(.text._ZN5embot2os13MessageThreadD2Ev) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
 <LI><a href="#[10f]">embot::os::CallbackThread::setMessage(void*, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os14CallbackThread10setMessageEPvj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
 <LI><a href="#[111]">embot::os::CallbackThread::setCallback(embot::core::Callback const&, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os14CallbackThread11setCallbackERKNS_4core8CallbackEj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
 <LI><a href="#[10b]">embot::os::CallbackThread::setPriority(embot::os::Priority)</a> from embot_os_thread.o(.text._ZN5embot2os14CallbackThread11setPriorityENS0_8PriorityE) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
 <LI><a href="#[10d]">embot::os::CallbackThread::run()</a> from embot_os_thread.o(.text._ZN5embot2os14CallbackThread3runEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
 <LI><a href="#[94]">embot::os::CallbackThread::Impl::dummyAfter(embot::os::Thread*, embot::core::Callback&, void*)</a> from embot_os_thread.o(.text._ZN5embot2os14CallbackThread4Impl10dummyAfterEPNS0_6ThreadERNS_4core8CallbackEPv) referenced 2 times from embot_os_thread.o(.text._ZN5embot2os14CallbackThread4Impl22os_callbackdriven_loopEPv)
 <LI><a href="#[94]">embot::os::CallbackThread::Impl::dummyAfter(embot::os::Thread*, embot::core::Callback&, void*)</a> from embot_os_thread.o(.text._ZN5embot2os14CallbackThread4Impl10dummyAfterEPNS0_6ThreadERNS_4core8CallbackEPv) referenced 2 times from embot_os_thread.o(.text._ZN5embot2os14CallbackThread4ImplC2EPS1_)
 <LI><a href="#[95]">embot::os::CallbackThread::Impl::os_callbackdriven_loop(void*)</a> from embot_os_thread.o(.text._ZN5embot2os14CallbackThread4Impl22os_callbackdriven_loopEPv) referenced 2 times from embot_os_thread.o(.text._ZN5embot2os14CallbackThread5startERKNS1_6ConfigEPFvPvE)
 <LI><a href="#[10e]">embot::os::CallbackThread::setEvent(unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os14CallbackThread8setEventEj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
 <LI><a href="#[110]">embot::os::CallbackThread::setValue(unsigned int, unsigned int)</a> from embot_os_thread.o(.text._ZN5embot2os14CallbackThread8setValueEjj) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
 <LI><a href="#[113]">embot::os::CallbackThread::~CallbackThread__deallocating()</a> from embot_os_thread.o(.text._ZN5embot2os14CallbackThreadD0Ev) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
 <LI><a href="#[112]">embot::os::CallbackThread::~CallbackThread__sub_object()</a> from embot_os_thread.o(.text._ZN5embot2os14CallbackThreadD2Ev) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
 <LI><a href="#[96]">embot::os::theTimerManager::Impl::processtimer(embot::os::Thread*, void*, void*)</a> from embot_os_thetimermanager.o(.text._ZN5embot2os15theTimerManager4Impl12processtimerEPNS0_6ThreadEPvS5_) referenced 2 times from embot_os_thetimermanager.o(.text._ZN5embot2os15theTimerManager5startERKNS1_6ConfigE)
 <LI><a href="#[116]">embot::os::Thread::~Thread__deallocating()</a> from embot_os_thread.o(.text._ZN5embot2os6ThreadD0Ev) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os6ThreadE)
 <LI><a href="#[115]">embot::os::Thread::~Thread__sub_object()</a> from embot_os_thread.o(.text._ZN5embot2os6ThreadD2Ev) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os6ThreadE)
 <LI><a href="#[99]">embot::os::_now()</a> from embot_os.o(.text._ZN5embot2osL4_nowEv) referenced 2 times from embot_os.o(.text._ZN5embot2os4initERKNS0_6ConfigE)
 <LI><a href="#[118]">embot::app::application::CANagentMBD::~CANagentMBD__deallocating()</a> from embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application11CANagentMBDD0Ev) referenced from embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application11CANagentMBDE)
 <LI><a href="#[117]">embot::app::application::CANagentMBD::~CANagentMBD__sub_object()</a> from embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application11CANagentMBDD2Ev) referenced from embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application11CANagentMBDE)
 <LI><a href="#[117]">embot::app::application::CANagentMBD::~CANagentMBD__sub_object()</a> from embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application11CANagentMBDD2Ev) referenced from embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDE)
 <LI><a href="#[119]">embot::app::application::theMBDagent::onrecognisedframe(void*)</a> from embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagent17onrecognisedframeEPv) referenced from embot_app_application_thembdagent.o(.rodata._ZTVN5embot3app11application11theMBDagentE)
 <LI><a href="#[11c]">embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::Info const&, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo&)</a> from embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagent3getERKNS_4prot3can5motor7polling24Message_GET_CONTROL_MODE4InfoERNS7_9ReplyInfoE) referenced from embot_app_application_thembdagent.o(.rodata._ZTVN5embot3app11application11theMBDagentE)
 <LI><a href="#[11b]">embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Info const&)</a> from embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagent3getERKNS_4prot3can5motor7polling24Message_SET_CONTROL_MODE4InfoE) referenced from embot_app_application_thembdagent.o(.rodata._ZTVN5embot3app11application11theMBDagentE)
 <LI><a href="#[11a]">embot::app::application::theMBDagent::get(embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Info const&)</a> from embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagent3getERKNS_4prot3can5motor8periodic33Message_EMSTO2FOC_DESIRED_CURRENT4InfoE) referenced from embot_app_application_thembdagent.o(.rodata._ZTVN5embot3app11application11theMBDagentE)
 <LI><a href="#[11e]">embot::app::application::theMBDagent::~theMBDagent__deallocating()</a> from embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagentD0Ev) referenced from embot_app_application_thembdagent.o(.rodata._ZTVN5embot3app11application11theMBDagentE)
 <LI><a href="#[11d]">embot::app::application::theMBDagent::~theMBDagent__sub_object()</a> from embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagentD2Ev) referenced from embot_app_application_thembdagent.o(.rodata._ZTVN5embot3app11application11theMBDagentE)
 <LI><a href="#[11f]">embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::onrecognisedframe(void*)</a> from embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBD17onrecognisedframeEPv) referenced from embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDE)
 <LI><a href="#[122]">embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::get(embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::Info const&, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo&)</a> from embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBD3getERKNS_4prot3can5motor7polling24Message_GET_CONTROL_MODE4InfoERNS9_9ReplyInfoE) referenced from embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDE)
 <LI><a href="#[121]">embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::get(embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Info const&)</a> from embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBD3getERKNS_4prot3can5motor7polling24Message_SET_CONTROL_MODE4InfoE) referenced from embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDE)
 <LI><a href="#[120]">embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::get(embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Info const&)</a> from embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBD3getERKNS_4prot3can5motor8periodic33Message_EMSTO2FOC_DESIRED_CURRENT4InfoE) referenced from embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDE)
 <LI><a href="#[123]">embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::~dummyCANagentMBD__deallocating()</a> from embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDD0Ev) referenced from embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDE)
 <LI><a href="#[9a]">embot::app::aSlimPulsableLED::onexpirywave(void*)</a> from embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED12onexpirywaveEPv) referenced 2 times from embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED4waveEPKNS0_7LEDwaveEj)
 <LI><a href="#[9b]">embot::app::aSlimPulsableLED::onexpirypulse(void*)</a> from embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED13onexpirypulseEPv) referenced 2 times from embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED5pulseEjj)
 <LI><a href="#[126]">embot::app::aSlimPulsableLED::on()</a> from embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED2onEv) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
 <LI><a href="#[127]">embot::app::aSlimPulsableLED::off()</a> from embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED3offEv) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
 <LI><a href="#[12a]">embot::app::aSlimPulsableLED::stop()</a> from embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED4stopEv) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
 <LI><a href="#[12b]">embot::app::aSlimPulsableLED::wave(embot::app::LEDwave const*, unsigned int)</a> from embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED4waveEPKNS0_7LEDwaveEj) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
 <LI><a href="#[129]">embot::app::aSlimPulsableLED::pulse(unsigned int, unsigned int)</a> from embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED5pulseEjj) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
 <LI><a href="#[128]">embot::app::aSlimPulsableLED::toggle()</a> from embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED6toggleEv) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
 <LI><a href="#[12d]">embot::app::aSlimPulsableLED::~aSlimPulsableLED__deallocating()</a> from embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLEDD0Ev) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
 <LI><a href="#[12f]">embot::app::LEDwave::~LEDwave__deallocating()</a> from amcbldc-main.o(.text._ZN5embot3app7LEDwaveD0Ev) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app7LEDwaveE)
 <LI><a href="#[12e]">embot::app::LEDwave::~LEDwave__sub_object()</a> from amcbldc-main.o(.text._ZN5embot3app7LEDwaveD2Ev) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app7LEDwaveE)
 <LI><a href="#[132]">embot::app::LEDwaveT&lang;(unsigned short)64&rang;::tick()</a> from amcbldc-main.o(.text._ZN5embot3app8LEDwaveTILt64EE4tickEv) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8LEDwaveTILt64EEE)
 <LI><a href="#[135]">embot::app::LEDwaveT&lang;(unsigned short)64&rang;::~LEDwaveT__deallocating()</a> from amcbldc-main.o(.text._ZN5embot3app8LEDwaveTILt64EED0Ev) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8LEDwaveTILt64EEE)
 <LI><a href="#[134]">embot::app::LEDwaveT&lang;(unsigned short)64&rang;::~LEDwaveT__sub_object()</a> from amcbldc-main.o(.text._ZN5embot3app8LEDwaveTILt64EED2Ev) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8LEDwaveTILt64EEE)
 <LI><a href="#[136]">embot::app::skeleton::os::evthreadcan::evThreadCAN::~evThreadCAN__deallocating()</a> from amcbldc-main.o(.text._ZN5embot3app8skeleton2os11evthreadcan11evThreadCAND0Ev) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan11evThreadCANE)
 <LI><a href="#[c7]">embot::app::skeleton::os::evthreadcan::evThreadCAN::~evThreadCAN__sub_object()</a> from amcbldc-main.o(.text._ZN5embot3app8skeleton2os11evthreadcan11evThreadCAND2Ev) referenced from amcbldc-main.o(.rodata._ZTV5myEVT)
 <LI><a href="#[c7]">embot::app::skeleton::os::evthreadcan::evThreadCAN::~evThreadCAN__sub_object()</a> from amcbldc-main.o(.text._ZN5embot3app8skeleton2os11evthreadcan11evThreadCAND2Ev) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan11evThreadCANE)
 <LI><a href="#[13b]">embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::~SYSTEMevtcan__deallocating()</a> from embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanD0Ev) referenced from embot_app_skeleton_os_evthreadcan.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanE)
 <LI><a href="#[9f]">embot::app::skeleton::os::evthreadcan::alerteventbasedthread(void*)</a> from embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan21alerteventbasedthreadEPv) referenced 2 times from embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan8can_initEPNS_2os6ThreadE)
 <LI><a href="#[9c]">embot::app::skeleton::os::evthreadcan::eventbasedthread_onevent(embot::os::Thread*, unsigned int, void*)</a> from embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan24eventbasedthread_oneventEPNS_2os6ThreadEjPv) referenced 2 times from embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan15start_evt_basedEv)
 <LI><a href="#[9d]">embot::app::skeleton::os::evthreadcan::eventbasedthread_startup(embot::os::Thread*, void*)</a> from embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan24eventbasedthread_startupEPNS_2os6ThreadEPv) referenced 2 times from embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan15start_evt_basedEv)
 <LI><a href="#[a0]">embot::app::skeleton::os::basic::init(embot::os::Thread*, void*)</a> from embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic4initEPNS_2os6ThreadEPv) referenced 2 times from embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic3runERKNS3_3CFGE)
 <LI><a href="#[13f]">embot::app::skeleton::os::basic::SYSTEM::~SYSTEM__deallocating()</a> from amcbldc-main.o(.text._ZN5embot3app8skeleton2os5basic6SYSTEMD0Ev) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os5basic6SYSTEME)
 <LI><a href="#[cd]">embot::app::skeleton::os::basic::SYSTEM::~SYSTEM__sub_object()</a> from amcbldc-main.o(.text._ZN5embot3app8skeleton2os5basic6SYSTEMD2Ev) referenced from amcbldc-main.o(.rodata._ZTV5mySYS)
 <LI><a href="#[cd]">embot::app::skeleton::os::basic::SYSTEM::~SYSTEM__sub_object()</a> from amcbldc-main.o(.text._ZN5embot3app8skeleton2os5basic6SYSTEMD2Ev) referenced from embot_app_skeleton_os_evthreadcan.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanE)
 <LI><a href="#[cd]">embot::app::skeleton::os::basic::SYSTEM::~SYSTEM__sub_object()</a> from amcbldc-main.o(.text._ZN5embot3app8skeleton2os5basic6SYSTEMD2Ev) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os5basic6SYSTEME)
 <LI><a href="#[a1]">embot::app::skeleton::os::basic::onidle(embot::os::Thread*, void*)</a> from embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic6onidleEPNS_2os6ThreadEPv) referenced 2 times from embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic3runERKNS3_3CFGE)
 <LI><a href="#[a2]">embot::app::skeleton::os::basic::onerror(void*)</a> from embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic7onerrorEPv) referenced 2 times from embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic3runERKNS3_3CFGE)
 <LI><a href="#[143]">embot::app::LEDhandle::~LEDhandle__deallocating()</a> from embot_app_theledmanager.o(.text._ZN5embot3app9LEDhandleD0Ev) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app9LEDhandleE)
 <LI><a href="#[12c]">embot::app::LEDhandle::~LEDhandle__sub_object()</a> from embot_app_theledmanager.o(.text._ZN5embot3app9LEDhandleD2Ev) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
 <LI><a href="#[12c]">embot::app::LEDhandle::~LEDhandle__sub_object()</a> from embot_app_theledmanager.o(.text._ZN5embot3app9LEDhandleD2Ev) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app9LEDhandleE)
 <LI><a href="#[12c]">embot::app::LEDhandle::~LEDhandle__sub_object()</a> from embot_app_theledmanager.o(.text._ZN5embot3app9LEDhandleD2Ev) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
 <LI><a href="#[146]">embot::app::aDummyLED::on()</a> from embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLED2onEv) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
 <LI><a href="#[147]">embot::app::aDummyLED::off()</a> from embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLED3offEv) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
 <LI><a href="#[14a]">embot::app::aDummyLED::stop()</a> from embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLED4stopEv) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
 <LI><a href="#[14b]">embot::app::aDummyLED::wave(embot::app::LEDwave const*, unsigned int)</a> from embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLED4waveEPKNS0_7LEDwaveEj) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
 <LI><a href="#[149]">embot::app::aDummyLED::pulse(unsigned int, unsigned int)</a> from embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLED5pulseEjj) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
 <LI><a href="#[148]">embot::app::aDummyLED::toggle()</a> from embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLED6toggleEv) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
 <LI><a href="#[14c]">embot::app::aDummyLED::~aDummyLED__deallocating()</a> from embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLEDD0Ev) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
 <LI><a href="#[14e]">embot::core::utils::Storage::~Storage__deallocating()</a> from embot_hw_flashstorage.o(.text._ZN5embot4core5utils7StorageD0Ev) referenced from embot_hw_flashstorage.o(.rodata._ZTVN5embot4core5utils7StorageE)
 <LI><a href="#[14d]">embot::core::utils::Storage::~Storage__sub_object()</a> from embot_hw_flashstorage.o(.text._ZN5embot4core5utils7StorageD2Ev) referenced from embot_hw_flashstorage.o(.rodata._ZTVN5embot4core5utils7StorageE)
 <LI><a href="#[0]">embot::core::s_faketimenow()</a> from embot_core.o(.text._ZN5embot4coreL13s_faketimenowEv) referenced 2 times from embot_core.o(.data._ZN5embot4coreL9s_timenowE)
 <LI><a href="#[c8]">myEVT::~myEVT__deallocating()</a> from amcbldc-main.o(.text._ZN5myEVTD0Ev) referenced from amcbldc-main.o(.rodata._ZTV5myEVT)
 <LI><a href="#[ce]">mySYS::~mySYS__deallocating()</a> from amcbldc-main.o(.text._ZN5mySYSD0Ev) referenced from amcbldc-main.o(.rodata._ZTV5mySYS)
 <LI><a href="#[de]">embot::os::IdleThread::getPriority() const</a> from embot_os_thread.o(.text._ZNK5embot2os10IdleThread11getPriorityEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
 <LI><a href="#[e0]">embot::os::IdleThread::getName() const</a> from embot_os_thread.o(.text._ZNK5embot2os10IdleThread7getNameEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
 <LI><a href="#[dd]">embot::os::IdleThread::getType() const</a> from embot_os_thread.o(.text._ZNK5embot2os10IdleThread7getTypeEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
 <LI><a href="#[e9]">embot::os::InitThread::getPriority() const</a> from embot_os_thread.o(.text._ZNK5embot2os10InitThread11getPriorityEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
 <LI><a href="#[eb]">embot::os::InitThread::getName() const</a> from embot_os_thread.o(.text._ZNK5embot2os10InitThread7getNameEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
 <LI><a href="#[e8]">embot::os::InitThread::getType() const</a> from embot_os_thread.o(.text._ZNK5embot2os10InitThread7getTypeEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
 <LI><a href="#[f4]">embot::os::EventThread::getPriority() const</a> from embot_os_thread.o(.text._ZNK5embot2os11EventThread11getPriorityEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
 <LI><a href="#[f6]">embot::os::EventThread::getName() const</a> from embot_os_thread.o(.text._ZNK5embot2os11EventThread7getNameEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
 <LI><a href="#[f3]">embot::os::EventThread::getType() const</a> from embot_os_thread.o(.text._ZNK5embot2os11EventThread7getTypeEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
 <LI><a href="#[ff]">embot::os::MessageThread::getPriority() const</a> from embot_os_thread.o(.text._ZNK5embot2os13MessageThread11getPriorityEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
 <LI><a href="#[101]">embot::os::MessageThread::getName() const</a> from embot_os_thread.o(.text._ZNK5embot2os13MessageThread7getNameEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
 <LI><a href="#[fe]">embot::os::MessageThread::getType() const</a> from embot_os_thread.o(.text._ZNK5embot2os13MessageThread7getTypeEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
 <LI><a href="#[10a]">embot::os::CallbackThread::getPriority() const</a> from embot_os_thread.o(.text._ZNK5embot2os14CallbackThread11getPriorityEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
 <LI><a href="#[10c]">embot::os::CallbackThread::getName() const</a> from embot_os_thread.o(.text._ZNK5embot2os14CallbackThread7getNameEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
 <LI><a href="#[109]">embot::os::CallbackThread::getType() const</a> from embot_os_thread.o(.text._ZNK5embot2os14CallbackThread7getTypeEv) referenced from embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
 <LI><a href="#[125]">embot::app::aSlimPulsableLED::id() const</a> from embot_app_theledmanager.o(.text._ZNK5embot3app16aSlimPulsableLED2idEv) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
 <LI><a href="#[124]">embot::app::aSlimPulsableLED::supported() const</a> from embot_app_theledmanager.o(.text._ZNK5embot3app16aSlimPulsableLED9supportedEv) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
 <LI><a href="#[130]">embot::app::LEDwaveT&lang;(unsigned short)64&rang;::length() const</a> from amcbldc-main.o(.text._ZNK5embot3app8LEDwaveTILt64EE6lengthEv) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8LEDwaveTILt64EEE)
 <LI><a href="#[133]">embot::app::LEDwaveT&lang;(unsigned short)64&rang;::duplicate(void*, unsigned int) const</a> from amcbldc-main.o(.text._ZNK5embot3app8LEDwaveTILt64EE9duplicateEPvj) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8LEDwaveTILt64EEE)
 <LI><a href="#[131]">embot::app::LEDwaveT&lang;(unsigned short)64&rang;::frequency() const</a> from amcbldc-main.o(.text._ZNK5embot3app8LEDwaveTILt64EE9frequencyEv) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8LEDwaveTILt64EEE)
 <LI><a href="#[137]">embot::app::skeleton::os::evthreadcan::evThreadCAN::userdefStartup(embot::os::Thread*, void*) const</a> from amcbldc-main.o(.text._ZNK5embot3app8skeleton2os11evthreadcan11evThreadCAN14userdefStartupEPNS_2os6ThreadEPv) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan11evThreadCANE)
 <LI><a href="#[138]">embot::app::skeleton::os::evthreadcan::evThreadCAN::userdefOnTimeout(embot::os::Thread*, unsigned int, void*) const</a> from amcbldc-main.o(.text._ZNK5embot3app8skeleton2os11evthreadcan11evThreadCAN16userdefOnTimeoutEPNS_2os6ThreadEjPv) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan11evThreadCANE)
 <LI><a href="#[13a]">embot::app::skeleton::os::evthreadcan::evThreadCAN::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const</a> from amcbldc-main.o(.text._ZNK5embot3app8skeleton2os11evthreadcan11evThreadCAN22userdefOnEventANYotherEPNS_2os6ThreadEjPvRNSt3__26vectorINS_4prot3can5FrameENS9_9allocatorISD_EEEE) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan11evThreadCANE)
 <LI><a href="#[139]">embot::app::skeleton::os::evthreadcan::evThreadCAN::userdefOnEventRXcanframe(embot::os::Thread*, unsigned int, void*, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const</a> from amcbldc-main.o(.text._ZNK5embot3app8skeleton2os11evthreadcan11evThreadCAN24userdefOnEventRXcanframeEPNS_2os6ThreadEjPvRKNS_4prot3can5FrameERNSt3__26vectorISB_NSE_9allocatorISB_EEEE) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan11evThreadCANE)
 <LI><a href="#[cf]">embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::userdefInit(void*) const</a> from embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os11evthreadcan12SYSTEMevtcan11userdefInitEPv) referenced from amcbldc-main.o(.rodata._ZTV5mySYS)
 <LI><a href="#[cf]">embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::userdefInit(void*) const</a> from embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os11evthreadcan12SYSTEMevtcan11userdefInitEPv) referenced from embot_app_skeleton_os_evthreadcan.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanE)
 <LI><a href="#[13c]">embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::userdefOnIdle(embot::os::Thread*, void*) const</a> from embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os11evthreadcan12SYSTEMevtcan13userdefOnIdleEPNS_2os6ThreadEPv) referenced from embot_app_skeleton_os_evthreadcan.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanE)
 <LI><a href="#[13d]">embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::userdefonOSerror(void*) const</a> from embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os11evthreadcan12SYSTEMevtcan16userdefonOSerrorEPv) referenced from embot_app_skeleton_os_evthreadcan.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanE)
 <LI><a href="#[13e]">embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::userdefInit_Extra(embot::os::EventThread*, void*) const</a> from embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os11evthreadcan12SYSTEMevtcan17userdefInit_ExtraEPNS_2os11EventThreadEPv) referenced from embot_app_skeleton_os_evthreadcan.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanE)
 <LI><a href="#[140]">embot::app::skeleton::os::basic::SYSTEM::userdefInit(void*) const</a> from amcbldc-main.o(.text._ZNK5embot3app8skeleton2os5basic6SYSTEM11userdefInitEPv) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os5basic6SYSTEME)
 <LI><a href="#[141]">embot::app::skeleton::os::basic::SYSTEM::userdefOnIdle(embot::os::Thread*, void*) const</a> from amcbldc-main.o(.text._ZNK5embot3app8skeleton2os5basic6SYSTEM13userdefOnIdleEPNS_2os6ThreadEPv) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os5basic6SYSTEME)
 <LI><a href="#[142]">embot::app::skeleton::os::basic::SYSTEM::userdefonOSerror(void*) const</a> from amcbldc-main.o(.text._ZNK5embot3app8skeleton2os5basic6SYSTEM16userdefonOSerrorEPv) referenced from amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os5basic6SYSTEME)
 <LI><a href="#[145]">embot::app::aDummyLED::id() const</a> from embot_app_theledmanager.o(.text._ZNK5embot3app9aDummyLED2idEv) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
 <LI><a href="#[144]">embot::app::aDummyLED::supported() const</a> from embot_app_theledmanager.o(.text._ZNK5embot3app9aDummyLED9supportedEv) referenced from embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
 <LI><a href="#[c9]">myEVT::userdefStartup(embot::os::Thread*, void*) const</a> from amcbldc-main.o(.text._ZNK5myEVT14userdefStartupEPN5embot2os6ThreadEPv) referenced from amcbldc-main.o(.rodata._ZTV5myEVT)
 <LI><a href="#[ca]">myEVT::userdefOnTimeout(embot::os::Thread*, unsigned int, void*) const</a> from amcbldc-main.o(.text._ZNK5myEVT16userdefOnTimeoutEPN5embot2os6ThreadEjPv) referenced from amcbldc-main.o(.rodata._ZTV5myEVT)
 <LI><a href="#[cc]">myEVT::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const</a> from amcbldc-main.o(.text._ZNK5myEVT22userdefOnEventANYotherEPN5embot2os6ThreadEjPvRNSt3__26vectorINS0_4prot3can5FrameENS5_9allocatorIS9_EEEE) referenced from amcbldc-main.o(.rodata._ZTV5myEVT)
 <LI><a href="#[cb]">myEVT::userdefOnEventRXcanframe(embot::os::Thread*, unsigned int, void*, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const</a> from amcbldc-main.o(.text._ZNK5myEVT24userdefOnEventRXcanframeEPN5embot2os6ThreadEjPvRKNS0_4prot3can5FrameERNSt3__26vectorIS7_NSA_9allocatorIS7_EEEE) referenced from amcbldc-main.o(.rodata._ZTV5myEVT)
 <LI><a href="#[d0]">mySYS::userdefOnIdle(embot::os::Thread*, void*) const</a> from amcbldc-main.o(.text._ZNK5mySYS13userdefOnIdleEPN5embot2os6ThreadEPv) referenced from amcbldc-main.o(.rodata._ZTV5mySYS)
 <LI><a href="#[d1]">mySYS::userdefonOSerror(void*) const</a> from amcbldc-main.o(.text._ZNK5mySYS16userdefonOSerrorEPv) referenced from amcbldc-main.o(.rodata._ZTV5mySYS)
 <LI><a href="#[d2]">mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const</a> from amcbldc-main.o(.text._ZNK5mySYS17userdefInit_ExtraEPN5embot2os11EventThreadEPv) referenced from amcbldc-main.o(.rodata._ZTV5mySYS)
 <LI><a href="#[a3]">std::__2::map&lang;void*, embot::os::Thread*, std::__2::less&lang;void*&rang;, std::__2::allocator&lang;std::__2::pair&lang;void* const, embot::os::Thread*&rang; &rang; &rang;::~map__sub_object()</a> from embot_os_rtos.o(.text._ZNSt3__23mapIPvPN5embot2os6ThreadENS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S5_EEEEED2Ev) referenced 2 times from embot_os_rtos.o(.text.__cxx_global_var_init)
 <LI><a href="#[a4]">std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::~vector__sub_object()</a> from amcbldc-main.o(.text._ZNSt3__26vectorIN5embot4prot3can5FrameENS_9allocatorIS4_EEED2Ev) referenced 2 times from embot_app_skeleton_os_evthreadcan.o(.text.__cxx_global_var_init)
 <LI><a href="#[a4]">std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::~vector__sub_object()</a> from amcbldc-main.o(.text._ZNSt3__26vectorIN5embot4prot3can5FrameENS_9allocatorIS4_EEED2Ev) referenced 2 times from amcbldc-main.o(.text.__cxx_global_var_init.6)
 <LI><a href="#[114]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 9 times from embot_os_thread.o(.rodata._ZTVN5embot2os6ThreadE)
 <LI><a href="#[114]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 4 times from embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application11CANagentMBDE)
 <LI><a href="#[114]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 4 times from amcbldc-main.o(.rodata._ZTVN5embot3app7LEDwaveE)
 <LI><a href="#[114]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 8 times from embot_app_theledmanager.o(.rodata._ZTVN5embot3app9LEDhandleE)
 <LI><a href="#[114]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 8 times from embot_hw_flashstorage.o(.rodata._ZTVN5embot4core5utils7StorageE)
 <LI><a href="#[75]">__main</a> from __main.o(!!!main) referenced from stm32hal.startup.amcbldc.o(.text)
 <LI><a href="#[77]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[76]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[a5]">evIDLE</a> from eventviewer.o(.text.evIDLE) referenced 2 times from eventviewer.o(.text.eventviewer_init)
 <LI><a href="#[bf]">osal_launcher</a> from osal-oosiit.o(i.osal_launcher) referenced from osal-oosiit.o(i.osal_system_start)
 <LI><a href="#[72]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm4.o(.emb_text)
 <LI><a href="#[73]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm4.o(.emb_text)
 <LI><a href="#[be]">s_osal_on_idle</a> from osal-oosiit.o(i.s_osal_on_idle) referenced from osal-oosiit.o(i.osal_system_start)
 <LI><a href="#[2]">s_stm32hal_bps_dummy_tick1msget</a> from stm32hal.o(.text.s_stm32hal_bps_dummy_tick1msget) referenced 2 times from stm32hal.o(.data.s_stm32hal_bsp_config)
 <LI><a href="#[2]">s_stm32hal_bps_dummy_tick1msget</a> from stm32hal.o(.text.s_stm32hal_bps_dummy_tick1msget) referenced 3 times from stm32hal.o(.text.stm32hal_init)
 <LI><a href="#[1]">s_stm32hal_bps_dummy_tick1msinit</a> from stm32hal.o(.text.s_stm32hal_bps_dummy_tick1msinit) referenced 2 times from stm32hal.o(.data.s_stm32hal_bsp_config)
 <LI><a href="#[1]">s_stm32hal_bps_dummy_tick1msinit</a> from stm32hal.o(.text.s_stm32hal_bps_dummy_tick1msinit) referenced 3 times from stm32hal.o(.text.stm32hal_init)
 <LI><a href="#[a6]">svc_oosiit_advtmr_new</a> from oosiit.o(i.svc_oosiit_advtmr_new) referenced from oosiit.o(i.oosiit_advtmr_new)
 <LI><a href="#[a7]">svc_oosiit_advtmr_start</a> from oosiit.o(i.svc_oosiit_advtmr_start) referenced from oosiit.o(i.oosiit_advtmr_start)
 <LI><a href="#[a8]">svc_oosiit_advtmr_stop</a> from oosiit.o(i.svc_oosiit_advtmr_stop) referenced from oosiit.o(i.oosiit_advtmr_stop)
 <LI><a href="#[a9]">svc_oosiit_evt_get</a> from oosiit.o(i.svc_oosiit_evt_get) referenced from oosiit.o(i.oosiit_evt_get)
 <LI><a href="#[aa]">svc_oosiit_evt_set</a> from oosiit.o(i.svc_oosiit_evt_set) referenced from oosiit.o(i.oosiit_evt_set)
 <LI><a href="#[ab]">svc_oosiit_evt_wait</a> from oosiit.o(i.svc_oosiit_evt_wait) referenced from oosiit.o(i.oosiit_evt_wait)
 <LI><a href="#[ac]">svc_oosiit_mbx_create</a> from oosiit.o(i.svc_oosiit_mbx_create) referenced from oosiit.o(i.oosiit_mbx_create)
 <LI><a href="#[ad]">svc_oosiit_mbx_delete</a> from oosiit.o(i.svc_oosiit_mbx_delete) referenced from oosiit.o(i.oosiit_mbx_delete)
 <LI><a href="#[ae]">svc_oosiit_mbx_retrieve</a> from oosiit.o(i.svc_oosiit_mbx_retrieve) referenced from oosiit.o(i.oosiit_mbx_retrieve)
 <LI><a href="#[af]">svc_oosiit_mbx_send</a> from oosiit.o(i.svc_oosiit_mbx_send) referenced from oosiit.o(i.oosiit_mbx_send)
 <LI><a href="#[b0]">svc_oosiit_memory_del</a> from oosiit.o(i.svc_oosiit_memory_del) referenced from oosiit.o(i.oosiit_memory_del)
 <LI><a href="#[b1]">svc_oosiit_memory_getstack</a> from oosiit.o(i.svc_oosiit_memory_getstack) referenced from oosiit.o(i.oosiit_memory_getstack)
 <LI><a href="#[b2]">svc_oosiit_memory_new</a> from oosiit.o(i.svc_oosiit_memory_new) referenced from oosiit.o(i.oosiit_memory_new)
 <LI><a href="#[b3]">svc_oosiit_microtime_get</a> from oosiit.o(i.svc_oosiit_microtime_get) referenced from oosiit.o(i.oosiit_microtime_get)
 <LI><a href="#[b4]">svc_oosiit_mut_create</a> from oosiit.o(i.svc_oosiit_mut_create) referenced from oosiit.o(i.oosiit_mut_create)
 <LI><a href="#[b5]">svc_oosiit_mut_release</a> from oosiit.o(i.svc_oosiit_mut_release) referenced from oosiit.o(i.oosiit_mut_release)
 <LI><a href="#[b6]">svc_oosiit_mut_wait</a> from oosiit.o(i.svc_oosiit_mut_wait) referenced from oosiit.o(i.oosiit_mut_wait)
 <LI><a href="#[b7]">svc_oosiit_sys_start</a> from oosiit.o(i.svc_oosiit_sys_start) referenced from oosiit.o(i.oosiit_sys_start)
 <LI><a href="#[b8]">svc_oosiit_sys_suspend</a> from oosiit.o(i.svc_oosiit_sys_suspend) referenced from oosiit.o(i.oosiit_sys_suspend)
 <LI><a href="#[b9]">svc_oosiit_tsk_create</a> from oosiit.o(i.svc_oosiit_tsk_create) referenced from oosiit.o(i.oosiit_tsk_create)
 <LI><a href="#[ba]">svc_oosiit_tsk_delete</a> from oosiit.o(i.svc_oosiit_tsk_delete) referenced from oosiit.o(i.oosiit_tsk_delete)
 <LI><a href="#[bb]">svc_oosiit_tsk_get_extdata</a> from oosiit.o(i.svc_oosiit_tsk_get_extdata) referenced from oosiit.o(i.oosiit_tsk_get_extdata)
 <LI><a href="#[bc]">svc_oosiit_tsk_self</a> from oosiit.o(i.svc_oosiit_tsk_self) referenced from oosiit.o(i.oosiit_tsk_self)
 <LI><a href="#[bd]">svc_oosiit_tsk_setprio</a> from oosiit.o(i.svc_oosiit_tsk_setprio) referenced from oosiit.o(i.oosiit_tsk_setprio)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[75]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[157]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4d6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4d7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4d8]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[4d9]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[4da]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[158]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[183]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[15a]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[15c]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[4db]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[16c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[15e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[160]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4dc]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[4dd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[162]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[4de]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[4df]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4e0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[4e1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[4e2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[164]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[4e3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[4e4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[4e5]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[4e6]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[166]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[4e7]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[4e8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[4e9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[4ea]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[4eb]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[4ec]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[4ed]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[4ee]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[4ef]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[171]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[167]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[4f0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[4f1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[4f2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[4f3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[4f4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[4f5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[4f6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[156]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[4f7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[169]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[16b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[4f8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[16d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; embot::app::skeleton::os::evthreadcan::run(embot::app::skeleton::os::evthreadcan::CFG const&) &rArr; embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&) &rArr; embot::app::theApplication::execute(embot::app::theApplication::Config const&) &rArr; embot::os::theScheduler::start(embot::os::theScheduler::Config const&) &rArr; embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&) &rArr; embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&) &rArr; osal_base_initialise &rArr; oosiit_memory_load &rArr; rt_iit_params_init &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4f9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1ac]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[170]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[4fa]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[172]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4ad]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_sys_start
</UL>

<P><STRONG><a name="[4b4]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_delete
</UL>

<P><STRONG><a name="[481]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_start
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_load
</UL>

<P><STRONG><a name="[4fb]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[4fc]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; rt_stk_check &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_iit_pop_req_base &rArr; rt_mbx_psh &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; rt_iit_pop_req_base &rArr; rt_mbx_psh &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[177]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ADC5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>COMP4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>FDCAN3_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FDCAN3_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>HRTIM1_TIMF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_TAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM20_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM20_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM20_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM20_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32hal.startup.amcbldc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[1ab]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32hal.startup.amcbldc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4fd]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4fe]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_ext_calloc
</UL>

<P><STRONG><a name="[17c]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_ext_free
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[234]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::bsp::_get1millitick()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_microtime_get
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_microtime_get
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_rt_iit_advtmr_start
</UL>

<P><STRONG><a name="[4ff]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
</UL>

<P><STRONG><a name="[199]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[15b]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[500]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__printf</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, __printf_ss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[184]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__vector_base_common&lang;true&rang;::__throw_length_error() const
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::insert(unsigned int, char const*, unsigned int)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::to_string(int)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__grow_by_and_replace(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char const*)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[186]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[41f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::char_traits&lang;char&rang;::length(char const*)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::insert(unsigned int, char const*)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*)
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::load(embot::prot::can::Frame const&)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_setadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::to_string(int)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*, unsigned int)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__grow_by_and_replace(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char const*)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[188]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[501]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::write(unsigned int, unsigned int, void const*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::read(unsigned int, unsigned int, void*)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::insert(unsigned int, char const*, unsigned int)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Frame::Frame__sub_object(unsigned int, unsigned char, unsigned char*)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::Frame::Frame__sub_object(unsigned int, unsigned char, unsigned char*)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Frame::copyto(unsigned int&, unsigned char&, unsigned char*) const
</UL>

<P><STRONG><a name="[18a]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[502]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;&)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;&)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[503]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[504]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[505]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::get(embot::hw::CAN, embot::hw::can::Frame&, unsigned char&)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_oneframehasgone(embot::hw::CAN, __FDCAN_HandleTypeDef*)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_start(embot::hw::CAN)
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::gettx(embot::prot::can::Frame&, unsigned int&)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::getrx(embot::prot::can::Frame&, unsigned int&)
</UL>

<P><STRONG><a name="[506]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[18c]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[507]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_base_initialise
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_init
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_getstack
</UL>

<P><STRONG><a name="[1f4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_getrxmessagefromqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_addtxmessagetoqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__fill_n_false&lang;std::__2::__bitset&lang;2u, 64u&rang; &rang;(std::__2::__bit_iterator&lang;std::__2::__bitset&lang;2u, 64u&rang;, false, 0&rang;, std::__2::__bitset&lang;2u, 64u&rang;::size_type)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::Impl::reset()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::TMR__sub_object(embot::os::Timer*)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Config::Config__sub_object()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::Impl__sub_object()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::synch(embot::prot::can::versionOfAPPLICATION, embot::prot::can::versionOfCANPROTOCOL)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::Config::Config__sub_object()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::Impl::Impl__sub_object()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::setCANaddress(unsigned char)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getCANaddress()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_setadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32hal_board_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMultiWordShl(unsigned int const*, int, unsigned int, unsigned int*, int)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double2MultiWord(double, unsigned int*, int)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::CAN_Decoder()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_init
</UL>

<P><STRONG><a name="[3c5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::theApplication()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::execute(embot::app::theApplication::Config const&)
</UL>

<P><STRONG><a name="[508]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[509]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[50a]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[50b]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[173]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[17d]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[50c]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[50d]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[50e]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[50f]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[510]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[511]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[192]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[161]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[17a]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[195]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[197]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[181]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[17f]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[180]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[76]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[198]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[19a]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[15d]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[185]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[512]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[513]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[514]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[515]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[516]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[517]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1a5]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[168]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[19d]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[19c]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[193]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[16a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[163]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[1a4]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a7]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1a0]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a8]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[1a9]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1ad]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[4bb]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, motorhal_config.o(.text.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC1_2_IRQHandler &rArr; HAL_ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motorhal_config.o(.text.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motorhal_config.o(.text.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motorhal_config.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[1cf]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_amcbldc_v120.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
</UL>

<P><STRONG><a name="[62]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_hw_bsp_amcbldc.o(.text.FDCAN2_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FDCAN2_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_hw_bsp_amcbldc.o(.text.FDCAN2_IT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FDCAN2_IT1_IRQHandler &rArr; HAL_FDCAN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[1bc]"></a>FLASH_FlushCaches</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32g4xx_hal_flash_ex_1.o(.text.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[1bb]"></a>FLASH_PageErase</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32g4xx_hal_flash_ex_1.o(.text.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[1b2]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32g4xx_hal_flash_1.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 720 bytes, Stack size 32 bytes, stm32g4xx_hal_adc_1.o(.text.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>

<P><STRONG><a name="[1af]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32g4xx_hal_dma_1.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_Delay</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_stm32hal_bps_dummy_tick1msget
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::BSP::init(embot::hw::CAN) const
</UL>

<P><STRONG><a name="[264]"></a>HAL_FDCAN_ActivateNotification</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQresume(embot::hw::CAN, bool)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQenable(embot::hw::CAN)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::RX_IRQenable(embot::hw::CAN)
</UL>

<P><STRONG><a name="[23c]"></a>HAL_FDCAN_AddMessageToTxFifoQ</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_AddMessageToTxFifoQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_FDCAN_AddMessageToTxFifoQ
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_addtxmessagetoqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&)
</UL>

<P><STRONG><a name="[241]"></a>HAL_FDCAN_ConfigFilter</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_filters_set_by_class(__FDCAN_HandleTypeDef*, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_filters_init(__FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[265]"></a>HAL_FDCAN_DeactivateNotification</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_DeactivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_DeactivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQdisable(embot::hw::CAN)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::RX_IRQdisable(embot::hw::CAN)
</UL>

<P><STRONG><a name="[81]"></a>HAL_FDCAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_ErrorCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
</UL>
<P><STRONG><a name="[82]"></a>HAL_FDCAN_ErrorStatusCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_ErrorStatusCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
</UL>
<P><STRONG><a name="[243]"></a>HAL_FDCAN_GetRxMessage</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_getrxmessagefromqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&)
</UL>

<P><STRONG><a name="[7e]"></a>HAL_FDCAN_HighPriorityMessageCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_HighPriorityMessageCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
</UL>
<P><STRONG><a name="[1b1]"></a>HAL_FDCAN_IRQHandler</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FDCAN_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN2_IT1_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN2_IT0_IRQHandler
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_FDCAN_Init</STRONG> (Thumb, 630 bytes, Stack size 16 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_FDCAN_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init
</UL>

<P><STRONG><a name="[83]"></a>HAL_FDCAN_MspInit</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, fdcan_4.o(.text.HAL_FDCAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
</UL>
<P><STRONG><a name="[267]"></a>HAL_FDCAN_RegisterCallback</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_RegisterCallback))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_registercallbacks(__FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[268]"></a>HAL_FDCAN_RegisterRxFifo0Callback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_RegisterRxFifo0Callback))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_registercallbacks(__FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[78]"></a>HAL_FDCAN_RxFifo0Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_RxFifo0Callback))
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
</UL>
<P><STRONG><a name="[7a]"></a>HAL_FDCAN_RxFifo1Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_RxFifo1Callback))
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
</UL>
<P><STRONG><a name="[266]"></a>HAL_FDCAN_Start</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Start))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_startdriver(__FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[80]"></a>HAL_FDCAN_TimeoutOccurredCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_TimeoutOccurredCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
</UL>
<P><STRONG><a name="[7f]"></a>HAL_FDCAN_TimestampWraparoundCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_TimestampWraparoundCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
</UL>
<P><STRONG><a name="[7d]"></a>HAL_FDCAN_TxBufferAbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_TxBufferAbortCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
</UL>
<P><STRONG><a name="[7c]"></a>HAL_FDCAN_TxBufferCompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_TxBufferCompleteCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
</UL>
<P><STRONG><a name="[79]"></a>HAL_FDCAN_TxEventFifoCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_TxEventFifoCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
</UL>
<P><STRONG><a name="[7b]"></a>HAL_FDCAN_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_TxFifoEmptyCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_fdcan_1.o(.text.HAL_FDCAN_Init)
</UL>
<P><STRONG><a name="[1b9]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, stm32g4xx_hal_flash_ex_1.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::fullerase()
</UL>

<P><STRONG><a name="[228]"></a>HAL_FLASH_GetError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_flash_1.o(.text.HAL_FLASH_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::write(unsigned int, unsigned int, void const*)
</UL>

<P><STRONG><a name="[229]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32g4xx_hal_flash_1.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::fullerase()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::write(unsigned int, unsigned int, void const*)
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_FLASH_Program</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32g4xx_hal_flash_1.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::write(unsigned int, unsigned int, void const*)
</UL>

<P><STRONG><a name="[224]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32g4xx_hal_flash_1.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::fullerase()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::write(unsigned int, unsigned int, void const*)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::Impl::Impl__sub_object(unsigned int, unsigned int, unsigned long long*)
</UL>

<P><STRONG><a name="[1be]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio_1.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio_1.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, stm32g4xx_hal_gpio_1.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[290]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio_1.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_toggle(embot::hw::gpio::PROP const&)
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio_1.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_set(embot::hw::gpio::PROP const&, embot::hw::gpio::State)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::BSP::init(embot::hw::CAN) const
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32hal_board_init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_GetTick</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32hal.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_stm32hal_bps_dummy_tick1msget
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32g4xx_hal_1.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32hal_board_init
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_InitTick</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_MspInit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32g4xx_hal_msp_4.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnablePVD
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_ConfigPVD
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex_1.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex_1.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex_1.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[448]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex_1.o(.text.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32hal_board_init
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex_1.o(.text.HAL_PWREx_DisableUCPDDeadBattery))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_PWR_ConfigPVD</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_1.o(.text.HAL_PWR_ConfigPVD))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_PWR_EnablePVD</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_1.o(.text.HAL_PWR_EnablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 650 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc_ex_1.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32hal_board_init
</UL>

<P><STRONG><a name="[1c7]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 534 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc_1.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32hal_board_init
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc_1.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1170 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc_1.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32hal_board_init
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32g4xx_hal_rng_1.o(.text.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RNG_GenerateRandomNumber &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::sys::random()
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_RNG_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32g4xx_hal_rng_1.o(.text.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, rng_4.o(.text.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 538 bytes, Stack size 8 bytes, stm32g4xx_hal_tim_1.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM17_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
</UL>

<P><STRONG><a name="[1cd]"></a>MX_DMA_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dma_4.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32hal_board_init
</UL>

<P><STRONG><a name="[1ce]"></a>MX_FDCAN2_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fdcan_4.o(.text.MX_FDCAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_FDCAN2_Init &rArr; HAL_FDCAN_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::BSP::init(embot::hw::CAN) const
</UL>

<P><STRONG><a name="[1d0]"></a>MX_GPIO_Init</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, gpio_4.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32hal_board_init
</UL>

<P><STRONG><a name="[1d2]"></a>MX_RNG_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rng_4.o(.text.MX_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MX_RNG_Init &rArr; HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32hal_board_init
</UL>

<P><STRONG><a name="[74]"></a>SystemInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, system_stm32g4xx_1.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motorhal_config.o(.text.TIM1_BRK_TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_BRK_TIM15_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motorhal_config.o(.text.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_CC_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motorhal_config.o(.text.TIM1_TRG_COM_TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_TRG_COM_TIM17_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motorhal_config.o(.text.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motorhal_config.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, motorhal_config.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32hal.startup.amcbldc.o(RESET)
</UL>
<P><STRONG><a name="[1de]"></a>mbd_mc_init()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, amcbldc-main.o(.text._Z11mbd_mc_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = mbd_mc_init() &rArr; embot::app::application::theMBDagent::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::getInstance()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::initialise(embot::app::application::theMBDagent::Config const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_startup(embot::os::Thread*, void*)
</UL>

<P><STRONG><a name="[1e1]"></a>mbd_mc_tick(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, amcbldc-main.o(.text._Z11mbd_mc_tickRNSt3__26vectorIN5embot4prot3can5FrameENS_9allocatorIS4_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = mbd_mc_tick(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theMBDagent::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::tick(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_onevent(embot::os::Thread*, unsigned int, void*)
</UL>

<P><STRONG><a name="[20e]"></a>MultiWordIor(unsigned int const*, unsigned int const*, unsigned int*, int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, multiwordior.o(.text._Z12MultiWordIorPKjS0_Pji))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MultiWordIor(unsigned int const*, unsigned int const*, unsigned int*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::can_decoder_merge_2bytes(double, double)
</UL>

<P><STRONG><a name="[84]"></a>tCTRL_onevent(embot::os::Thread*, unsigned int, void*)</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, amcbldc-main.o(.text._Z13tCTRL_oneventPN5embot2os6ThreadEjPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tCTRL_onevent(embot::os::Thread*, unsigned int, void*) &rArr; mbd_mc_canparse(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::sizeoftx()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::getrx(embot::prot::can::Frame&, unsigned int&)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addtx(embot::prot::can::Frame const&)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Frame::Frame__sub_object()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::core::binary::mask::check&lang;unsigned int&rang;(unsigned int, unsigned int, unsigned char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbd_mc_canparse(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbd_mc_tick(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.text._Z19s_start_CTRL_threadv)
</UL>
<P><STRONG><a name="[85]"></a>tCTRL_startup(embot::os::Thread*, void*)</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, amcbldc-main.o(.text._Z13tCTRL_startupPN5embot2os6ThreadEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tCTRL_startup(embot::os::Thread*, void*) &rArr; embot::os::Timer::start(embot::os::Timer::Config const&, bool) &rArr; embot::os::timertools::TMR::start(embot::os::Timer::Config const&, bool) &rArr; embot::os::rtos::timer_start(void*, embot::os::rtos::timerMode, unsigned int, void (*)(void*, void*), void*) &rArr; osal_timer_start &rArr; oosiit_advtmr_start &rArr; isr_iit_advtmr_start &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::reserve(unsigned int)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Config::Config__sub_object(embot::app::application::CANagentMBD*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::getInstance()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::initialise(embot::app::application::theCANparserMBD::Config const&)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::getInstance()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::initialise(embot::app::application::theMBDagent::Config const&)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::Action__sub_object(embot::os::EventToThread const&)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Timer()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Config::Config__sub_object(unsigned int, embot::os::Action const&, embot::os::Timer::Mode, unsigned int)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::start(embot::os::Timer::Config const&, bool)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventToThread::EventToThread__sub_object(unsigned int, embot::os::Thread*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbd_mc_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.text._Z19s_start_CTRL_threadv)
</UL>
<P><STRONG><a name="[1f3]"></a>uMultiWordShl(unsigned int const*, int, unsigned int, unsigned int*, int)</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, umultiwordshl.o(.text._Z13uMultiWordShlPKjijPji))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = uMultiWordShl(unsigned int const*, int, unsigned int, unsigned int*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::can_decoder_merge_2bytes(double, double)
</UL>

<P><STRONG><a name="[1f5]"></a>s_shared_start()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, amcbldc-main.o(.text._Z14s_shared_startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = s_shared_start() &rArr; shared_t::shared_t__sub_object() &rArr; std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::reserve(unsigned int) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::shared_t__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const
</UL>

<P><STRONG><a name="[1e6]"></a>mbd_mc_canparse(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, amcbldc-main.o(.text._Z15mbd_mc_canparseRKN5embot4prot3can5FrameERNSt3__26vectorIS2_NS5_9allocatorIS2_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbd_mc_canparse(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_onevent(embot::os::Thread*, unsigned int, void*)
</UL>

<P><STRONG><a name="[1f8]"></a>Double2MultiWord(double, unsigned int*, int)</STRONG> (Thumb, 320 bytes, Stack size 80 bytes, double2multiword.o(.text._Z16Double2MultiWorddPji))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Double2MultiWord(double, unsigned int*, int) &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_s32(int, int)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_frexp
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::can_decoder_merge_2bytes(double, double)
</UL>

<P><STRONG><a name="[201]"></a>uMultiWord2Double(unsigned int const*, int, int)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, umultiword2double.o(.text._Z17uMultiWord2DoublePKjii))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uMultiWord2Double(unsigned int const*, int, int) &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::can_decoder_merge_2bytes(double, double)
</UL>

<P><STRONG><a name="[204]"></a>s_start_CTRL_thread()</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, amcbldc-main.o(.text._Z19s_start_CTRL_threadv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = s_start_CTRL_thread() &rArr; embot::os::EventThread::start(embot::os::EventThread::Config const&, void (*)(void*)) &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::EventThread()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, void (*)(embot::os::Thread*, unsigned int, void*), char const*)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::start(embot::os::EventThread::Config const&, void (*)(void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const
</UL>

<P><STRONG><a name="[9e]"></a>thrCAN(void*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text._Z6thrCANPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = thrCAN(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan15start_evt_basedEv)
</UL>
<P><STRONG><a name="[1fa]"></a>div_s32(int, int)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, div_s32.o(.text._Z7div_s32ii))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double2MultiWord(double, unsigned int*, int)
</UL>

<P><STRONG><a name="[98]"></a>tCBKman(void*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_os_thecallbackmanager.o(.text._Z7tCBKmanPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tCBKman(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thecallbackmanager.o(.text._ZN5embot2os18theCallbackManager5startERKNS1_6ConfigE)
</UL>
<P><STRONG><a name="[97]"></a>tTMRman(void*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_os_thetimermanager.o(.text._Z7tTMRmanPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tTMRman(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thetimermanager.o(.text._ZN5embot2os15theTimerManager5startERKNS1_6ConfigE)
</UL>
<P><STRONG><a name="[86]"></a>thrCTRL(void*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, amcbldc-main.o(.text._Z7thrCTRLPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = thrCTRL(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.text._Z19s_start_CTRL_threadv)
</UL>
<P><STRONG><a name="[208]"></a>leds_off()</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, embot_hw_bsp_amcbldc.o(.text._Z8leds_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = leds_off() &rArr; embot::hw::gpio::init(embot::hw::GPIO const&, embot::hw::gpio::Config const&) &rArr; embot::hw::gpio::configure(embot::hw::GPIO const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed) &rArr; embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::BSP::getPROP(embot::hw::LED) const
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::init(embot::hw::GPIO const&, embot::hw::gpio::Config const&)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::Config::Config__sub_object(embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::bsp::specialize()
</UL>

<P><STRONG><a name="[20d]"></a>can_messaging::CAN_Decoder::can_decoder_merge_2bytes(double, double)</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, can_decoder.o(.text._ZN13can_messaging11CAN_Decoder24can_decoder_merge_2bytesEdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = can_messaging::CAN_Decoder::can_decoder_merge_2bytes(double, double) &rArr; Double2MultiWord(double, unsigned int*, int) &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMultiWordShl(unsigned int const*, int, unsigned int, unsigned int*, int)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMultiWord2Double(unsigned int const*, int, int)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiWordIor(unsigned int const*, unsigned int const*, unsigned int*, int)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double2MultiWord(double, unsigned int*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::step(unsigned char const*, CANClassTypes const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
</UL>

<P><STRONG><a name="[214]"></a>can_messaging::CAN_Decoder::can_decoder_ERROR_HANDLING(unsigned char const*)</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, can_decoder.o(.text._ZN13can_messaging11CAN_Decoder26can_decoder_ERROR_HANDLINGEPKh))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::step(unsigned char const*, CANClassTypes const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
</UL>

<P><STRONG><a name="[20f]"></a>can_messaging::CAN_Decoder::can_d_is_controlmode_recognized(double)</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, can_decoder.o(.text._ZN13can_messaging11CAN_Decoder31can_d_is_controlmode_recognizedEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can_messaging::CAN_Decoder::can_d_is_controlmode_recognized(double) &rArr; __aeabi_dcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::step(unsigned char const*, CANClassTypes const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
</UL>

<P><STRONG><a name="[212]"></a>can_messaging::CAN_Decoder::can_de_safe_cast_to_MCStreaming(int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can_decoder.o(.text._ZN13can_messaging11CAN_Decoder31can_de_safe_cast_to_MCStreamingEi))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::step(unsigned char const*, CANClassTypes const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
</UL>

<P><STRONG><a name="[213]"></a>can_messaging::CAN_Decoder::can_safe_cast_to_MCControlModes(int)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, can_decoder.o(.text._ZN13can_messaging11CAN_Decoder31can_safe_cast_to_MCControlModesEi))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::step(unsigned char const*, CANClassTypes const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
</UL>

<P><STRONG><a name="[359]"></a>can_messaging::CAN_Decoder::init(unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, can_decoder.o(.text._ZN13can_messaging11CAN_Decoder4initEPhP14MCControlModesS1_PsPtS5_S4_S1_S1_S1_S1_P13CANErrorTypes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_messaging::CAN_Decoder::init(unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::initialise(embot::app::application::theCANparserMBD::Config const&)
</UL>

<P><STRONG><a name="[211]"></a>can_messaging::CAN_Decoder::step(unsigned char const*, CANClassTypes const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)</STRONG> (Thumb, 1312 bytes, Stack size 48 bytes, can_decoder.o(.text._ZN13can_messaging11CAN_Decoder4stepEPKhPK13CANClassTypesS2_S2_S2_S2_S2_S2_PhP14MCControlModesS6_PsPtSA_S9_S6_S6_S6_S6_P13CANErrorTypes))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = can_messaging::CAN_Decoder::step(unsigned char const*, CANClassTypes const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*) &rArr; can_messaging::CAN_Decoder::can_decoder_merge_2bytes(double, double) &rArr; Double2MultiWord(double, unsigned int*, int) &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::can_safe_cast_to_MCControlModes(int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::can_de_safe_cast_to_MCStreaming(int)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::can_d_is_controlmode_recognized(double)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::can_decoder_ERROR_HANDLING(unsigned char const*)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::can_decoder_merge_2bytes(double, double)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[216]"></a>can_messaging::CAN_Decoder::CAN_Decoder()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, can_decoder.o(.text._ZN13can_messaging11CAN_DecoderC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[518]"></a>can_messaging::CAN_Decoder::CAN_Decoder__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, can_decoder.o(.text._ZN13can_messaging11CAN_DecoderC2Ev), UNUSED)

<P><STRONG><a name="[378]"></a>can_messaging::CAN_Decoder::~CAN_Decoder()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_decoder.o(.text._ZN13can_messaging11CAN_DecoderD2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[519]"></a>can_messaging::CAN_Decoder::~CAN_Decoder__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_decoder.o(.text._ZN13can_messaging11CAN_DecoderD2Ev), UNUSED)

<P><STRONG><a name="[218]"></a>can_messaging::CAN_RX_raw2struct::c_convert_to_enum_CANClassTypes(int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, can_rx_raw2struct.o(.text._ZN13can_messaging17CAN_RX_raw2struct31c_convert_to_enum_CANClassTypesEi))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_RX_raw2struct::step(unsigned char const*, unsigned char const*, unsigned short const*, unsigned char const*, unsigned char*, CANClassTypes*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[217]"></a>can_messaging::CAN_RX_raw2struct::step(unsigned char const*, unsigned char const*, unsigned short const*, unsigned char const*, unsigned char*, CANClassTypes*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, can_rx_raw2struct.o(.text._ZN13can_messaging17CAN_RX_raw2struct4stepEPKhS2_PKtS2_PhP13CANClassTypesS5_S5_S5_S5_S5_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can_messaging::CAN_RX_raw2struct::step(unsigned char const*, unsigned char const*, unsigned short const*, unsigned char const*, unsigned char*, CANClassTypes*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_RX_raw2struct::c_convert_to_enum_CANClassTypes(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[375]"></a>can_messaging::CAN_RX_raw2struct::CAN_RX_raw2struct()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_rx_raw2struct.o(.text._ZN13can_messaging17CAN_RX_raw2structC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[51a]"></a>can_messaging::CAN_RX_raw2struct::CAN_RX_raw2struct__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_rx_raw2struct.o(.text._ZN13can_messaging17CAN_RX_raw2structC2Ev), UNUSED)

<P><STRONG><a name="[379]"></a>can_messaging::CAN_RX_raw2struct::~CAN_RX_raw2struct()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_rx_raw2struct.o(.text._ZN13can_messaging17CAN_RX_raw2structD2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[51b]"></a>can_messaging::CAN_RX_raw2struct::~CAN_RX_raw2struct__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_rx_raw2struct.o(.text._ZN13can_messaging17CAN_RX_raw2structD2Ev), UNUSED)

<P><STRONG><a name="[87]"></a>osal_init_pre_main_t::on_fatal(void*, osal_fatalerror_t, char const*)</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, embot_os_rtos.o(.text._ZN20osal_init_pre_main_t8on_fatalEPv17osal_fatalerror_tPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = osal_init_pre_main_t::on_fatal(void*, osal_fatalerror_t, char const*) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::~basic_string__sub_object()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::char_traits&lang;char&rang;::length(char const*)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::print(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::insert(unsigned int, char const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_rtos.o(.text._ZN20osal_init_pre_main_tC2Ev)
</UL>
<P><STRONG><a name="[21e]"></a>osal_init_pre_main_t::osal_init_pre_main_t__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN20osal_init_pre_main_tC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osal_init_pre_main_t::osal_init_pre_main_t__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_errorhandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[271]"></a>embot::hw::initialised()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, embot_hw.o(.text._ZN5embot2hw11initialisedEv))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::init(embot::hw::LED)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::init(embot::hw::Config const&)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::init(embot::hw::LED)
</UL>

<P><STRONG><a name="[d5]"></a>embot::hw::FlashStorage::getBaseAddress()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage14getBaseAddressEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
</UL>
<P><STRONG><a name="[d4]"></a>embot::hw::FlashStorage::isAddressValid(unsigned int)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage14isAddressValidEj))
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
</UL>
<P><STRONG><a name="[220]"></a>embot::hw::FlashStorage::Impl::Impl__sub_object(unsigned int, unsigned int, unsigned long long*)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage4ImplC2EjjPy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::flash::isaddressvalid(unsigned int)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::flash::getpartition(embot::hw::FLASH)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::FlashStorage(unsigned int, unsigned int, unsigned long long*)
</UL>

<P><STRONG><a name="[225]"></a>embot::hw::FlashStorage::Impl::~Impl__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage4ImplD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::~FlashStorage()
</UL>

<P><STRONG><a name="[d9]"></a>embot::hw::FlashStorage::read(unsigned int, unsigned int, void*)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage4readEjjPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::hw::FlashStorage::read(unsigned int, unsigned int, void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
</UL>
<P><STRONG><a name="[d8]"></a>embot::hw::FlashStorage::erase(unsigned int, unsigned int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage5eraseEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::hw::FlashStorage::erase(unsigned int, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
</UL>
<P><STRONG><a name="[da]"></a>embot::hw::FlashStorage::write(unsigned int, unsigned int, void const*)</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage5writeEjjPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = embot::hw::FlashStorage::write(unsigned int, unsigned int, void const*) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_GetError
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
</UL>
<P><STRONG><a name="[d6]"></a>embot::hw::FlashStorage::getSize()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage7getSizeEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
</UL>
<P><STRONG><a name="[d7]"></a>embot::hw::FlashStorage::fullerase()</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage9fulleraseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = embot::hw::FlashStorage::fullerase() &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
</UL>
<P><STRONG><a name="[d3]"></a>embot::hw::FlashStorage::isInitted()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorage9isInittedEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
</UL>
<P><STRONG><a name="[22a]"></a>embot::hw::FlashStorage::FlashStorage(unsigned int, unsigned int, unsigned long long*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorageC2EjjPy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::utils::Storage::Storage__sub_object()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::Impl::Impl__sub_object(unsigned int, unsigned int, unsigned long long*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[51c]"></a>embot::hw::FlashStorage::FlashStorage__sub_object(unsigned int, unsigned int, unsigned long long*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorageC2EjjPy), UNUSED)

<P><STRONG><a name="[dc]"></a>embot::hw::FlashStorage::~FlashStorage__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorageD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::hw::FlashStorage::~FlashStorage__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::~FlashStorage__sub_object()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
</UL>
<P><STRONG><a name="[22d]"></a>embot::hw::FlashStorage::~FlashStorage()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorageD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::utils::Storage::~Storage__sub_object()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::Impl::~Impl__sub_object()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>

<P><STRONG><a name="[db]"></a>embot::hw::FlashStorage::~FlashStorage__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, embot_hw_flashstorage.o(.text._ZN5embot2hw12FlashStorageD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::hw::FlashStorage::~FlashStorage__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::~FlashStorage__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_flashstorage.o(.rodata._ZTVN5embot2hw12FlashStorageE)
</UL>
<P><STRONG><a name="[22e]"></a>embot::hw::bsp::specialize()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw3bsp10specializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = embot::hw::bsp::specialize() &rArr; leds_off() &rArr; embot::hw::gpio::init(embot::hw::GPIO const&, embot::hw::gpio::Config const&) &rArr; embot::hw::gpio::configure(embot::hw::GPIO const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed) &rArr; embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off()
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::bsp::init(embot::hw::Config const&)
</UL>

<P><STRONG><a name="[22f]"></a>embot::hw::bsp::init(embot::hw::Config const&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, embot_hw_bsp.o(.text._ZN5embot2hw3bsp4initERKNS0_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = embot::hw::bsp::init(embot::hw::Config const&) &rArr; stm32hal_init &rArr; stm32hal_board_init &rArr; MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32hal_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::bsp::specialize()
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::init(embot::hw::Config const&)
</UL>

<P><STRONG><a name="[231]"></a>embot::hw::bsp::puts(char const*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, embot_hw_bsp.o(.text._ZN5embot2hw3bsp4putsEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::hw::bsp::puts(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::bsp::print(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&)
</UL>

<P><STRONG><a name="[8b]"></a>embot::hw::bsp::print(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_hw_bsp.o(.text._ZN5embot2hw3bsp5printERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::hw::bsp::print(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&) &rArr; embot::hw::bsp::puts(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::bsp::puts(char const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw.o(.text._ZN5embot2hw4initERKNS0_6ConfigE)
</UL>
<P><STRONG><a name="[235]"></a>embot::hw::can::setfilters(embot::hw::CAN, unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, embot_hw_can.o(.text._ZN5embot2hw3can10setfiltersENS0_3CANEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = embot::hw::can::setfilters(embot::hw::CAN, unsigned char) &rArr; embot::hw::can::s_filters_set(__FDCAN_HandleTypeDef*, unsigned char) &rArr; embot::hw::can::s_filters_set_by_class(__FDCAN_HandleTypeDef*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; HAL_FDCAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::supported(embot::hw::CAN)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_filters_set(__FDCAN_HandleTypeDef*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::can_init(embot::os::Thread*)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::setcanaddress(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[239]"></a>embot::hw::can::initialised(embot::hw::CAN)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, embot_hw_can.o(.text._ZN5embot2hw3can11initialisedENS0_3CANE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::hw::can::initialised(embot::hw::CAN)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::core::binary::bit::check&lang;unsigned int&rang;(unsigned int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::transmit(embot::hw::CAN)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::enable(embot::hw::CAN)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::get(embot::hw::CAN, embot::hw::can::Frame&, unsigned char&)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::callbackOnTXcompletion(__FDCAN_HandleTypeDef*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::callbackOnRXcompletion(__FDCAN_HandleTypeDef*, unsigned int)
</UL>

<P><STRONG><a name="[23b]"></a>embot::hw::can::s_addtxmessagetoqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&)</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, embot_hw_can.o(.text._ZN5embot2hw3can21s_addtxmessagetoqueueEP21__FDCAN_HandleTypeDefRNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = embot::hw::can::s_addtxmessagetoqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&) &rArr; HAL_FDCAN_AddMessageToTxFifoQ
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_oneframehasgone(embot::hw::CAN, __FDCAN_HandleTypeDef*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_start(embot::hw::CAN)
</UL>

<P><STRONG><a name="[8a]"></a>embot::hw::can::callbackOnRXcompletion(__FDCAN_HandleTypeDef*, unsigned int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, embot_hw_can.o(.text._ZN5embot2hw3can22callbackOnRXcompletionEP21__FDCAN_HandleTypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = embot::hw::can::callbackOnRXcompletion(__FDCAN_HandleTypeDef*, unsigned int) &rArr; embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*) &rArr; std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::initialised(embot::hw::CAN)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::toCAN(__FDCAN_HandleTypeDef*)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_can.o(.text._ZN5embot2hw3canL19s_registercallbacksEP21__FDCAN_HandleTypeDef)
</UL>
<P><STRONG><a name="[89]"></a>embot::hw::can::callbackOnTXcompletion(__FDCAN_HandleTypeDef*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, embot_hw_can.o(.text._ZN5embot2hw3can22callbackOnTXcompletionEP21__FDCAN_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = embot::hw::can::callbackOnTXcompletion(__FDCAN_HandleTypeDef*) &rArr; embot::hw::can::s_tx_oneframehasgone(embot::hw::CAN, __FDCAN_HandleTypeDef*) &rArr; embot::hw::can::s_addtxmessagetoqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&) &rArr; HAL_FDCAN_AddMessageToTxFifoQ
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::initialised(embot::hw::CAN)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::toCAN(__FDCAN_HandleTypeDef*)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_oneframehasgone(embot::hw::CAN, __FDCAN_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_can.o(.text._ZN5embot2hw3canL19s_registercallbacksEP21__FDCAN_HandleTypeDef)
</UL>
<P><STRONG><a name="[240]"></a>embot::hw::can::s_filters_set_by_class(__FDCAN_HandleTypeDef*, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, embot_hw_can.o(.text._ZN5embot2hw3can22s_filters_set_by_classEP21__FDCAN_HandleTypeDefhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = embot::hw::can::s_filters_set_by_class(__FDCAN_HandleTypeDef*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; HAL_FDCAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_filters_set(__FDCAN_HandleTypeDef*, unsigned char)
</UL>

<P><STRONG><a name="[242]"></a>embot::hw::can::s_getrxmessagefromqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&)</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, embot_hw_can.o(.text._ZN5embot2hw3can23s_getrxmessagefromqueueEP21__FDCAN_HandleTypeDefRNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = embot::hw::can::s_getrxmessagefromqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&) &rArr; HAL_FDCAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[244]"></a>embot::hw::can::get(embot::hw::CAN, embot::hw::can::Frame&, unsigned char&)</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, embot_hw_can.o(.text._ZN5embot2hw3can3getENS0_3CANERNS1_5FrameERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = embot::hw::can::get(embot::hw::CAN, embot::hw::can::Frame&, unsigned char&) &rArr; embot::hw::can::RX_IRQdisable(embot::hw::CAN) &rArr; HAL_FDCAN_DeactivateNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::Frame::Frame__sub_object()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::initialised(embot::hw::CAN)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::RX_IRQdisable(embot::hw::CAN)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::RX_IRQenable(embot::hw::CAN)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::eventbasedthread_onevent(embot::os::Thread*, unsigned int, void*)
</UL>

<P><STRONG><a name="[249]"></a>embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, embot_hw_can.o(.text._ZN5embot2hw3can3putENS0_3CANERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&) &rArr; std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;&)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;&, unsigned int)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::max_size() const
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::initialised(embot::hw::CAN)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQdisable(embot::hw::CAN)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQresume(embot::hw::CAN, bool)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__vector_base_common&lang;true&rang;::__throw_length_error() const
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::eventbasedthread_onevent(embot::os::Thread*, unsigned int, void*)
</UL>

<P><STRONG><a name="[253]"></a>embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, embot_hw_can.o(.text._ZN5embot2hw3can4initENS0_3CANERKNS1_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&) &rArr; std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::reserve(unsigned int) &rArr; std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::reserve(unsigned int)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::BSP::getPROP(embot::hw::CAN) const
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::BSP::init(embot::hw::CAN) const
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void embot::core::binary::bit::set&lang;unsigned int&rang;(unsigned int&, unsigned char)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::supported(embot::hw::CAN)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::getBSP()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::initialised(embot::hw::CAN)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_registercallbacks(__FDCAN_HandleTypeDef*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_filters_init(__FDCAN_HandleTypeDef*)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_startdriver(__FDCAN_HandleTypeDef*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::can_init(embot::os::Thread*)
</UL>

<P><STRONG><a name="[25c]"></a>embot::hw::can::Frame::Frame__sub_object(unsigned int, unsigned char, unsigned char*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot2hw3can5FrameC2EjhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::hw::can::Frame::Frame__sub_object(unsigned int, unsigned char, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::eventbasedthread_onevent(embot::os::Thread*, unsigned int, void*)
</UL>

<P><STRONG><a name="[245]"></a>embot::hw::can::Frame::Frame__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, embot_hw_can.o(.text._ZN5embot2hw3can5FrameC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::get(embot::hw::CAN, embot::hw::can::Frame&, unsigned char&)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::eventbasedthread_onevent(embot::os::Thread*, unsigned int, void*)
</UL>

<P><STRONG><a name="[25d]"></a>embot::hw::can::Config::Config__sub_object()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot2hw3can6ConfigC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::hw::can::Config::Config__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::Callback__sub_object(void (*)(void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::can_init(embot::os::Thread*)
</UL>

<P><STRONG><a name="[25f]"></a>embot::hw::can::enable(embot::hw::CAN)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, embot_hw_can.o(.text._ZN5embot2hw3can6enableENS0_3CANE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = embot::hw::can::enable(embot::hw::CAN) &rArr; embot::hw::can::tx_IRQdisable(embot::hw::CAN) &rArr; HAL_FDCAN_DeactivateNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::initialised(embot::hw::CAN)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQdisable(embot::hw::CAN)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::RX_IRQenable(embot::hw::CAN)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::can_enable(embot::os::Thread*)
</UL>

<P><STRONG><a name="[254]"></a>embot::hw::can::getBSP()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw3can6getBSPEv))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::supported(embot::hw::CAN)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)
</UL>

<P><STRONG><a name="[260]"></a>embot::hw::can::transmit(embot::hw::CAN)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, embot_hw_can.o(.text._ZN5embot2hw3can8transmitENS0_3CANE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = embot::hw::can::transmit(embot::hw::CAN) &rArr; embot::hw::can::s_tx_start(embot::hw::CAN) &rArr; embot::hw::can::s_addtxmessagetoqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&) &rArr; HAL_FDCAN_AddMessageToTxFifoQ
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::initialised(embot::hw::CAN)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_start(embot::hw::CAN)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::eventbasedthread_onevent(embot::os::Thread*, unsigned int, void*)
</UL>

<P><STRONG><a name="[236]"></a>embot::hw::can::supported(embot::hw::CAN)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_hw_can.o(.text._ZN5embot2hw3can9supportedENS0_3CANE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::hw::can::supported(embot::hw::CAN) &rArr; bool embot::hw::bsp::SUPP::supported&lang;embot::hw::CAN&rang;(embot::hw::CAN) const
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::hw::bsp::SUPP::supported&lang;embot::hw::CAN&rang;(embot::hw::CAN) const
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::getBSP()
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::setfilters(embot::hw::CAN, unsigned char)
</UL>

<P><STRONG><a name="[26a]"></a>embot::hw::led::initialised(embot::hw::LED)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, embot_hw_led.o(.text._ZN5embot2hw3led11initialisedENS0_3LEDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::hw::led::initialised(embot::hw::LED)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::LED&rang;(embot::hw::LED)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::core::binary::bit::check&lang;unsigned int&rang;(unsigned int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::toggle(embot::hw::LED)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::init(embot::hw::LED)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::off(embot::hw::LED)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::on(embot::hw::LED)
</UL>

<P><STRONG><a name="[26c]"></a>embot::hw::led::on(embot::hw::LED)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, embot_hw_led.o(.text._ZN5embot2hw3led2onENS0_3LEDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = embot::hw::led::on(embot::hw::LED) &rArr; embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State) &rArr; embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const &rArr; embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::BSP::getPROP(embot::hw::LED) const
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::getBSP()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::initialised(embot::hw::LED)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State)
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::on()
</UL>

<P><STRONG><a name="[26e]"></a>embot::hw::led::off(embot::hw::LED)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, embot_hw_led.o(.text._ZN5embot2hw3led3offENS0_3LEDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = embot::hw::led::off(embot::hw::LED) &rArr; embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State) &rArr; embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const &rArr; embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::BSP::getPROP(embot::hw::LED) const
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::getBSP()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::initialised(embot::hw::LED)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State)
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::init(embot::hw::LED)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::off()
</UL>

<P><STRONG><a name="[26f]"></a>embot::hw::led::init(embot::hw::LED)</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, embot_hw_led.o(.text._ZN5embot2hw3led4initENS0_3LEDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = embot::hw::led::init(embot::hw::LED) &rArr; embot::hw::led::off(embot::hw::LED) &rArr; embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State) &rArr; embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const &rArr; embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::BSP::init(embot::hw::LED) const
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::LED&rang;(embot::hw::LED)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::supported(embot::hw::LED)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::getBSP()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::off(embot::hw::LED)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::initialised(embot::hw::LED)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void embot::core::binary::bit::set&lang;unsigned int&rang;(unsigned int&, unsigned char)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::initialised()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::init(embot::hw::LED)
</UL>

<P><STRONG><a name="[26d]"></a>embot::hw::led::getBSP()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw3led6getBSPEv))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::supported(embot::hw::LED)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::toggle(embot::hw::LED)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::init(embot::hw::LED)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::off(embot::hw::LED)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::on(embot::hw::LED)
</UL>

<P><STRONG><a name="[273]"></a>embot::hw::led::toggle(embot::hw::LED)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, embot_hw_led.o(.text._ZN5embot2hw3led6toggleENS0_3LEDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = embot::hw::led::toggle(embot::hw::LED) &rArr; embot::hw::gpio::toggle(embot::hw::GPIO const&) &rArr; embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const &rArr; embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::BSP::getPROP(embot::hw::LED) const
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::getBSP()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::initialised(embot::hw::LED)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::toggle(embot::hw::GPIO const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::toggle()
</UL>

<P><STRONG><a name="[270]"></a>embot::hw::led::supported(embot::hw::LED)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_hw_led.o(.text._ZN5embot2hw3led9supportedENS0_3LEDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::hw::led::supported(embot::hw::LED) &rArr; bool embot::hw::bsp::SUPP::supported&lang;embot::hw::LED&rang;(embot::hw::LED) const
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::hw::bsp::SUPP::supported&lang;embot::hw::LED&rang;(embot::hw::LED) const
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::getBSP()
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::init(embot::hw::LED)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::supported() const
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::init(embot::hw::LED)
</UL>

<P><STRONG><a name="[3c4]"></a>embot::hw::sys::relocatevectortable(unsigned int)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, embot_hw_sys.o(.text._ZN5embot2hw3sys19relocatevectortableEj))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::execute(embot::app::theApplication::Config const&)
</UL>

<P><STRONG><a name="[276]"></a>embot::hw::sys::reset()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_hw_sys.o(.text._ZN5embot2hw3sys5resetEv))
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_board_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[278]"></a>embot::hw::sys::random()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, embot_hw_sys.o(.text._ZN5embot2hw3sys6randomEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = embot::hw::sys::random() &rArr; HAL_RNG_GenerateRandomNumber &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::setcanaddress(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[385]"></a>embot::hw::sys::minrandom()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_hw_sys.o(.text._ZN5embot2hw3sys9minrandomEv))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::setcanaddress(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[279]"></a>embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, embot_hw_gpio.o(.text._ZN5embot2hw4gpio10_configureERKNS1_4PROPENS1_4ModeENS1_4PullENS1_5SpeedE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::PROP::clockenable() const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_convert_to_stm32speed(embot::hw::gpio::Speed)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_convert_to_stm32pull(embot::hw::gpio::Pull)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_convert_to_stm32mode(embot::hw::gpio::Mode)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType(GPIO_TypeDef*, unsigned int, unsigned int)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode(GPIO_TypeDef*, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::configure(embot::hw::GPIO const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
</UL>

<P><STRONG><a name="[27b]"></a>embot::hw::gpio::_convert_to_stm32mode(embot::hw::gpio::Mode)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_hw_gpio.o(.text._ZN5embot2hw4gpio21_convert_to_stm32modeENS1_4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::hw::gpio::_convert_to_stm32mode(embot::hw::gpio::Mode)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::gpio::Mode&rang;(embot::hw::gpio::Mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
</UL>

<P><STRONG><a name="[27c]"></a>embot::hw::gpio::_convert_to_stm32pull(embot::hw::gpio::Pull)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_hw_gpio.o(.text._ZN5embot2hw4gpio21_convert_to_stm32pullENS1_4PullE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::hw::gpio::_convert_to_stm32pull(embot::hw::gpio::Pull)
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::gpio::Pull&rang;(embot::hw::gpio::Pull)
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
</UL>

<P><STRONG><a name="[27d]"></a>embot::hw::gpio::_convert_to_stm32speed(embot::hw::gpio::Speed)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_hw_gpio.o(.text._ZN5embot2hw4gpio22_convert_to_stm32speedENS1_5SpeedE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::hw::gpio::_convert_to_stm32speed(embot::hw::gpio::Speed)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::gpio::Speed&rang;(embot::hw::gpio::Speed)
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
</UL>

<P><STRONG><a name="[20c]"></a>embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, embot_hw_gpio.o(.text._ZN5embot2hw4gpio3setERKNS0_4GPIOENS1_5StateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State) &rArr; embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const &rArr; embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::PROP::isvalid() const
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::getBSP()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_set(embot::hw::gpio::PROP const&, embot::hw::gpio::State)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::off(embot::hw::LED)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::on(embot::hw::LED)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off()
</UL>

<P><STRONG><a name="[40a]"></a>embot::hw::gpio::PROP::PROP__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, embot_hw_gpio.o(.text._ZN5embot2hw4gpio4PROPC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const
</UL>

<P><STRONG><a name="[28d]"></a>embot::hw::gpio::_set(embot::hw::gpio::PROP const&, embot::hw::gpio::State)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, embot_hw_gpio.o(.text._ZN5embot2hw4gpio4_setERKNS1_4PROPENS1_5StateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::hw::gpio::_set(embot::hw::gpio::PROP const&, embot::hw::gpio::State)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State)
</UL>

<P><STRONG><a name="[20b]"></a>embot::hw::gpio::init(embot::hw::GPIO const&, embot::hw::gpio::Config const&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_hw_gpio.o(.text._ZN5embot2hw4gpio4initERKNS0_4GPIOERKNS1_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = embot::hw::gpio::init(embot::hw::GPIO const&, embot::hw::gpio::Config const&) &rArr; embot::hw::gpio::configure(embot::hw::GPIO const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed) &rArr; embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::configure(embot::hw::GPIO const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off()
</UL>

<P><STRONG><a name="[20a]"></a>embot::hw::gpio::Config::Config__sub_object(embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio6ConfigC2ENS1_4ModeENS1_4PullENS1_5SpeedE))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off()
</UL>

<P><STRONG><a name="[28a]"></a>embot::hw::gpio::getBSP()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio6getBSPEv))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::configure(embot::hw::GPIO const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::toggle(embot::hw::GPIO const&)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State)
</UL>

<P><STRONG><a name="[274]"></a>embot::hw::gpio::toggle(embot::hw::GPIO const&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, embot_hw_gpio.o(.text._ZN5embot2hw4gpio6toggleERKNS0_4GPIOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = embot::hw::gpio::toggle(embot::hw::GPIO const&) &rArr; embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const &rArr; embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::PROP::isvalid() const
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_toggle(embot::hw::gpio::PROP const&)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::getBSP()
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::toggle(embot::hw::LED)
</UL>

<P><STRONG><a name="[28f]"></a>embot::hw::gpio::_toggle(embot::hw::gpio::PROP const&)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_hw_gpio.o(.text._ZN5embot2hw4gpio7_toggleERKNS1_4PROPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::hw::gpio::_toggle(embot::hw::gpio::PROP const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::toggle(embot::hw::GPIO const&)
</UL>

<P><STRONG><a name="[28e]"></a>embot::hw::gpio::configure(embot::hw::GPIO const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, embot_hw_gpio.o(.text._ZN5embot2hw4gpio9configureERKNS0_4GPIOENS1_4ModeENS1_4PullENS1_5SpeedE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = embot::hw::gpio::configure(embot::hw::GPIO const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed) &rArr; embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed) &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::PROP::isvalid() const
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::getBSP()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::init(embot::hw::GPIO const&, embot::hw::gpio::Config const&)
</UL>

<P><STRONG><a name="[291]"></a>embot::hw::init(embot::hw::Config const&)</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, embot_hw.o(.text._ZN5embot2hw4initERKNS0_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = embot::hw::init(embot::hw::Config const&) &rArr; embot::hw::bsp::init(embot::hw::Config const&) &rArr; stm32hal_init &rArr; stm32hal_board_init &rArr; MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Config::Config__sub_object(embot::core::TimeConfig const&, embot::core::PrintConfig const&)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::PrintConfig::PrintConfig__sub_object(int (*)(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&))
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::TimeConfig::TimeConfig__sub_object(void (*)(), unsigned long long (*)())
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::bsp::init(embot::hw::Config const&)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::initialised()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::init(embot::core::Config const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::init(embot::os::Config const&)
</UL>

<P><STRONG><a name="[222]"></a>embot::hw::flash::getpartition(embot::hw::FLASH)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_hw_flash.o(.text._ZN5embot2hw5flash12getpartitionENS0_5FLASHE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = embot::hw::flash::getpartition(embot::hw::FLASH) &rArr; embot::hw::flash::BSP::getPROP(embot::hw::FLASH) const &rArr; bool embot::hw::bsp::SUPP::supported&lang;embot::hw::FLASH&rang;(embot::hw::FLASH) const
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::flash::BSP::getPROP(embot::hw::FLASH) const
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::flash::getBSP()
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::flash::isaddressvalid(unsigned int)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::Impl::Impl__sub_object(unsigned int, unsigned int, unsigned long long*)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::Impl::Impl__sub_object()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::execute(embot::app::theApplication::Config const&)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[221]"></a>embot::hw::flash::isaddressvalid(unsigned int)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, embot_hw_flash.o(.text._ZN5embot2hw5flash14isaddressvalidEj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::flash::getpartition(embot::hw::FLASH)
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::Impl::Impl__sub_object(unsigned int, unsigned int, unsigned long long*)
</UL>

<P><STRONG><a name="[296]"></a>embot::hw::flash::getBSP()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw5flash6getBSPEv))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::flash::getpartition(embot::hw::FLASH)
</UL>

<P><STRONG><a name="[298]"></a>embot::hw::motor::PrivateData::PrivateData__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_hw_motor.o(.text._ZN5embot2hw5motor11PrivateDataC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = embot::hw::motor::PrivateData::PrivateData__sub_object() &rArr; std::__2::array&lang;embot::hw::motor::TBDef, 4u&rang;::array__sub_object() &rArr; embot::hw::motor::TBDef::TBDef__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;embot::hw::motor::Config, 4u&rang;::array__sub_object()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;embot::hw::motor::TBDef, 4u&rang;::array__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[29b]"></a>embot::hw::motor::TBDef::TBDef__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, embot_hw_motor.o(.text._ZN5embot2hw5motor5TBDefC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::hw::motor::TBDef::TBDef__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::Callback__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;embot::hw::motor::TBDef, 4u&rang;::array__sub_object()
</UL>

<P><STRONG><a name="[42b]"></a>embot::hw::motor::Config::Config__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_hw_motor.o(.text._ZN5embot2hw5motor6ConfigC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;embot::hw::motor::Config, 4u&rang;::array__sub_object()
</UL>

<P><STRONG><a name="[318]"></a>embot::hw::Config::Config__sub_object(void (*)(), unsigned long long (*)())</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_os.o(.text._ZN5embot2hw6ConfigC2EPFvvEPFyvE))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::init(embot::os::Config const&)
</UL>

<P><STRONG><a name="[e3]"></a>embot::os::IdleThread::setMessage(void*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThread10setMessageEPvj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
</UL>
<P><STRONG><a name="[29d]"></a>embot::os::IdleThread::getInstance()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThread11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = embot::os::IdleThread::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::IdleThread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::osIdleThread()
</UL>

<P><STRONG><a name="[e5]"></a>embot::os::IdleThread::setCallback(embot::core::Callback const&, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThread11setCallbackERKNS_4core8CallbackEj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
</UL>
<P><STRONG><a name="[df]"></a>embot::os::IdleThread::setPriority(embot::os::Priority)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThread11setPriorityENS0_8PriorityE))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
</UL>
<P><STRONG><a name="[e1]"></a>embot::os::IdleThread::run()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThread3runEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
</UL>
<P><STRONG><a name="[2ab]"></a>embot::os::IdleThread::Impl::Impl__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThread4ImplC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::IdleThread()
</UL>

<P><STRONG><a name="[2ac]"></a>embot::os::IdleThread::Impl::~Impl__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThread4ImplD2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::~IdleThread()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::IdleThread()
</UL>

<P><STRONG><a name="[2a1]"></a>embot::os::IdleThread::synch()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThread5synchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = embot::os::IdleThread::synch() &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_thread_running()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_associate(void*, embot::os::Thread*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::osIdleThread()
</UL>

<P><STRONG><a name="[2a4]"></a>embot::os::IdleThread::Config::Config__sub_object(unsigned short, void (*)(embot::os::Thread*, void*), void*, void (*)(embot::os::Thread*, void*))</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, embot_app_skeleton_os_basic.o(.text._ZN5embot2os10IdleThread6ConfigC2EtPFvPNS0_6ThreadEPvES5_S7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = embot::os::IdleThread::Config::Config__sub_object(unsigned short, void (*)(embot::os::Thread*, void*), void*, void (*)(embot::os::Thread*, void*)) &rArr; embot::os::Thread::BaseConfig::BaseConfig__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::BaseConfig__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&)
</UL>

<P><STRONG><a name="[2a6]"></a>embot::os::IdleThread::Config::Config__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_os_thescheduler.o(.text._ZN5embot2os10IdleThread6ConfigC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::IdleThread::Config::Config__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::BaseConfig__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Behaviour::Behaviour__sub_object()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Config::Config__sub_object()
</UL>

<P><STRONG><a name="[e2]"></a>embot::os::IdleThread::setEvent(unsigned int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThread8setEventEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = embot::os::IdleThread::setEvent(unsigned int) &rArr; embot::os::rtos::event_set(void*, unsigned int) &rArr; osal_eventflag_set &rArr; oosiit_evt_set &rArr; iitchanged_isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::event_set(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
</UL>
<P><STRONG><a name="[e4]"></a>embot::os::IdleThread::setValue(unsigned int, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThread8setValueEjj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
</UL>
<P><STRONG><a name="[2a9]"></a>embot::os::IdleThread::IdleThread()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThreadC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::Thread__sub_object()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::Impl::~Impl__sub_object()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[29f]"></a>embot::os::IdleThread::IdleThread__sub_object()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThreadC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::IdleThread::IdleThread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::getInstance()
</UL>

<P><STRONG><a name="[e7]"></a>embot::os::IdleThread::~IdleThread__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThreadD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::os::IdleThread::~IdleThread__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::~IdleThread__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
</UL>
<P><STRONG><a name="[2ad]"></a>embot::os::IdleThread::~IdleThread()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThreadD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::~Thread__sub_object()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[e6]"></a>embot::os::IdleThread::~IdleThread__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os10IdleThreadD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::IdleThread::~IdleThread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::~IdleThread__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
</UL>
<P><STRONG><a name="[ee]"></a>embot::os::InitThread::setMessage(void*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThread10setMessageEPvj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
</UL>
<P><STRONG><a name="[2ae]"></a>embot::os::InitThread::getInstance()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThread11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = embot::os::InitThread::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::InitThread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::launcher()
</UL>

<P><STRONG><a name="[f0]"></a>embot::os::InitThread::setCallback(embot::core::Callback const&, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThread11setCallbackERKNS_4core8CallbackEj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
</UL>
<P><STRONG><a name="[ea]"></a>embot::os::InitThread::setPriority(embot::os::Priority)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThread11setPriorityENS0_8PriorityE))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
</UL>
<P><STRONG><a name="[ec]"></a>embot::os::InitThread::run()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThread3runEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
</UL>
<P><STRONG><a name="[2b4]"></a>embot::os::InitThread::Impl::Impl__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThread4ImplC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::InitThread()
</UL>

<P><STRONG><a name="[2b5]"></a>embot::os::InitThread::Impl::~Impl__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThread4ImplD2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::~InitThread()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::InitThread()
</UL>

<P><STRONG><a name="[2b0]"></a>embot::os::InitThread::synch()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThread5synchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = embot::os::InitThread::synch() &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_thread_running()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_associate(void*, embot::os::Thread*)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::launcher()
</UL>

<P><STRONG><a name="[2b1]"></a>embot::os::InitThread::Config::Config__sub_object(unsigned short, void (*)(embot::os::Thread*, void*), void*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, embot_app_skeleton_os_basic.o(.text._ZN5embot2os10InitThread6ConfigC2EtPFvPNS0_6ThreadEPvES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::InitThread::Config::Config__sub_object(unsigned short, void (*)(embot::os::Thread*, void*), void*) &rArr; embot::os::Thread::BaseConfig::BaseConfig__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::BaseConfig__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&)
</UL>

<P><STRONG><a name="[2b2]"></a>embot::os::InitThread::Config::Config__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_thescheduler.o(.text._ZN5embot2os10InitThread6ConfigC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::InitThread::Config::Config__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::BaseConfig__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Behaviour::Behaviour__sub_object()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Config::Config__sub_object()
</UL>

<P><STRONG><a name="[ed]"></a>embot::os::InitThread::setEvent(unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThread8setEventEj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
</UL>
<P><STRONG><a name="[ef]"></a>embot::os::InitThread::setValue(unsigned int, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThread8setValueEjj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
</UL>
<P><STRONG><a name="[2dc]"></a>embot::os::InitThread::terminate()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThread9terminateEv))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::launcher()
</UL>

<P><STRONG><a name="[2b3]"></a>embot::os::InitThread::InitThread()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThreadC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::Thread__sub_object()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::Impl::~Impl__sub_object()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[2af]"></a>embot::os::InitThread::InitThread__sub_object()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThreadC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::InitThread::InitThread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::getInstance()
</UL>

<P><STRONG><a name="[f2]"></a>embot::os::InitThread::~InitThread__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThreadD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::os::InitThread::~InitThread__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::~InitThread__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
</UL>
<P><STRONG><a name="[2b6]"></a>embot::os::InitThread::~InitThread()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThreadD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::~Thread__sub_object()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[f1]"></a>embot::os::InitThread::~InitThread__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os10InitThreadD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::InitThread::~InitThread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::~InitThread__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
</UL>
<P><STRONG><a name="[8c]"></a>embot::os::timertools::TMR::OnExpiryCbk(void*, void*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, embot_os_timer.o(.text._ZN5embot2os10timertools3TMR11OnExpiryCbkEPvS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = embot::os::timertools::TMR::OnExpiryCbk(void*, void*) &rArr; embot::os::timertools::TMR::stop() &rArr; embot::os::rtos::timer_stop(void*) &rArr; osal_timer_stop &rArr; oosiit_advtmr_stop &rArr; isr_iit_advtmr_stop &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::stop()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::started() const
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::execute()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::onexpiry(embot::os::Timer const&)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::getInstance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_timer.o(.text._ZN5embot2os10timertools3TMR5startERKNS0_5Timer6ConfigEb)
</UL>
<P><STRONG><a name="[2bb]"></a>embot::os::timertools::TMR::stop()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, embot_os_timer.o(.text._ZN5embot2os10timertools3TMR4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = embot::os::timertools::TMR::stop() &rArr; embot::os::rtos::timer_stop(void*) &rArr; osal_timer_stop &rArr; oosiit_advtmr_stop &rArr; isr_iit_advtmr_stop &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::timer_stop(void*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::getstatus()
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::reset(embot::os::Timer::Status, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::stop()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::OnExpiryCbk(void*, void*)
</UL>

<P><STRONG><a name="[2be]"></a>embot::os::timertools::TMR::reset(embot::os::Timer::Status, bool)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, embot_os_timer.o(.text._ZN5embot2os10timertools3TMR5resetENS0_5Timer6StatusEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::timertools::TMR::reset(embot::os::Timer::Status, bool) &rArr; embot::os::Timer::Config::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::clear()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Config::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::TMR__sub_object(embot::os::Timer*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::stop()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::execute()
</UL>

<P><STRONG><a name="[2c1]"></a>embot::os::timertools::TMR::start(embot::os::Timer::Config const&, bool)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, embot_os_timer.o(.text._ZN5embot2os10timertools3TMR5startERKNS0_5Timer6ConfigEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = embot::os::timertools::TMR::start(embot::os::Timer::Config const&, bool) &rArr; embot::os::rtos::timer_start(void*, embot::os::rtos::timerMode, unsigned int, void (*)(void*, void*), void*) &rArr; osal_timer_start &rArr; oosiit_advtmr_start &rArr; isr_iit_advtmr_start &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Config::isvalid() const
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::timer_start(void*, embot::os::rtos::timerMode, unsigned int, void (*)(void*, void*), void*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::getstatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::start(embot::os::Timer::Config const&, bool)
</UL>

<P><STRONG><a name="[2bc]"></a>embot::os::timertools::TMR::getstatus()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_timer.o(.text._ZN5embot2os10timertools3TMR9getstatusEv))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::start(embot::os::Timer::Config const&, bool)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::stop()
</UL>

<P><STRONG><a name="[2c4]"></a>embot::os::timertools::TMR::TMR__sub_object(embot::os::Timer*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, embot_os_timer.o(.text._ZN5embot2os10timertools3TMRC2EPNS0_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = embot::os::timertools::TMR::TMR__sub_object(embot::os::Timer*) &rArr; embot::os::rtos::timer_new() &rArr; osal_timer_new &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Config::Config__sub_object()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::timer_new()
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::reset(embot::os::Timer::Status, bool)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Impl::Impl__sub_object(embot::os::Timer*)
</UL>

<P><STRONG><a name="[f9]"></a>embot::os::EventThread::setMessage(void*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThread10setMessageEPvj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
</UL>
<P><STRONG><a name="[fb]"></a>embot::os::EventThread::setCallback(embot::core::Callback const&, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThread11setCallbackERKNS_4core8CallbackEj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
</UL>
<P><STRONG><a name="[f5]"></a>embot::os::EventThread::setPriority(embot::os::Priority)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThread11setPriorityENS0_8PriorityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = embot::os::EventThread::setPriority(embot::os::Priority) &rArr; embot::os::rtos::thread_setpriority(void*, embot::os::Priority) &rArr; osal_task_priority_set &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::os::Priority&rang;(embot::os::Priority)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_setpriority(void*, embot::os::Priority)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::setprio(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
</UL>
<P><STRONG><a name="[f7]"></a>embot::os::EventThread::run()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThread3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::os::EventThread::run() &rArr; embot::os::EventThread::Impl::os_eventdriven_loop(void*) &rArr; embot::os::rtos::event_get(unsigned int) &rArr; osal_eventflag_getany
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Impl::os_eventdriven_loop(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
</UL>
<P><STRONG><a name="[8d]"></a>embot::os::EventThread::Impl::dummyOnEvent(embot::os::Thread*, unsigned int, void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThread4Impl12dummyOnEventEPNS0_6ThreadEjPv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.text._ZN5embot2os11EventThread4ImplC2EPS1_)
</UL>
<P><STRONG><a name="[8e]"></a>embot::os::EventThread::Impl::os_eventdriven_loop(void*)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThread4Impl19os_eventdriven_loopEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = embot::os::EventThread::Impl::os_eventdriven_loop(void*) &rArr; embot::os::rtos::event_get(unsigned int) &rArr; osal_eventflag_getany
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::event_get(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.text._ZN5embot2os11EventThread5startERKNS1_6ConfigEPFvPvE)
</UL>
<P><STRONG><a name="[2cb]"></a>embot::os::EventThread::Impl::Impl__sub_object(embot::os::EventThread*)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThread4ImplC2EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = embot::os::EventThread::Impl::Impl__sub_object(embot::os::EventThread*) &rArr; embot::os::rtos::thread_props_t::thread_props_t() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, void (*)(embot::os::Thread*, unsigned int, void*), char const*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::thread_props_t()
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::EventThread()
</UL>

<P><STRONG><a name="[2cd]"></a>embot::os::EventThread::Impl::~Impl__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThread4ImplD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_deassociate(void*, embot::os::Thread*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::~thread_props_t()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::~EventThread()
</UL>

<P><STRONG><a name="[207]"></a>embot::os::EventThread::start(embot::os::EventThread::Config const&, void (*)(void*))</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThread5startERKNS1_6ConfigEPFvPvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = embot::os::EventThread::start(embot::os::EventThread::Config const&, void (*)(void*)) &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Config::isvalid() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::os::Priority&rang;(embot::os::Priority)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_associate(void*, embot::os::Thread*)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::prepare(void (*)(void*), void*, unsigned char, unsigned short)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_new(embot::os::rtos::thread_props_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_start_CTRL_thread()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::start_evt_based()
</UL>

<P><STRONG><a name="[206]"></a>embot::os::EventThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, void (*)(embot::os::Thread*, unsigned int, void*), char const*)</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, amcbldc-main.o(.text._ZN5embot2os11EventThread6ConfigC2EtNS0_8PriorityEPFvPNS0_6ThreadEPvES6_jPFvS5_jS6_EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = embot::os::EventThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, void (*)(embot::os::Thread*, unsigned int, void*), char const*) &rArr; embot::os::Thread::BaseConfig::BaseConfig__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::BaseConfig__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_start_CTRL_thread()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Impl::Impl__sub_object(embot::os::EventThread*)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::start_evt_based()
</UL>

<P><STRONG><a name="[f8]"></a>embot::os::EventThread::setEvent(unsigned int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThread8setEventEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = embot::os::EventThread::setEvent(unsigned int) &rArr; embot::os::rtos::event_set(void*, unsigned int) &rArr; osal_eventflag_set &rArr; oosiit_evt_set &rArr; iitchanged_isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::event_set(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
</UL>
<P><STRONG><a name="[fa]"></a>embot::os::EventThread::setValue(unsigned int, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThread8setValueEjj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
</UL>
<P><STRONG><a name="[205]"></a>embot::os::EventThread::EventThread()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThreadC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = embot::os::EventThread::EventThread() &rArr; embot::os::EventThread::Impl::Impl__sub_object(embot::os::EventThread*) &rArr; embot::os::rtos::thread_props_t::thread_props_t() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::Thread__sub_object()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Impl::Impl__sub_object(embot::os::EventThread*)
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_start_CTRL_thread()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::start_evt_based()
</UL>

<P><STRONG><a name="[51d]"></a>embot::os::EventThread::EventThread__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThreadC2Ev), UNUSED)

<P><STRONG><a name="[fd]"></a>embot::os::EventThread::~EventThread__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThreadD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::os::EventThread::~EventThread__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::~EventThread__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
</UL>
<P><STRONG><a name="[2d4]"></a>embot::os::EventThread::~EventThread()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThreadD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::~Thread__sub_object()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[fc]"></a>embot::os::EventThread::~EventThread__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os11EventThreadD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::EventThread::~EventThread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::~EventThread__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
</UL>
<P><STRONG><a name="[316]"></a>embot::os::initialised()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, embot_os.o(.text._ZN5embot2os11initialisedEv))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::init(embot::os::Config const&)
</UL>

<P><STRONG><a name="[2d5]"></a>embot::os::theScheduler::getInstance()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = embot::os::theScheduler::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::theScheduler__sub_object()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefonOSerror(void*) const
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::osOnError(void*, int, char const*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::launcher()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::osIdleThread()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::execute(embot::app::theApplication::Config const&)
</UL>

<P><STRONG><a name="[8f]"></a>embot::os::theScheduler::Impl::osIdleThread()</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4Impl12osIdleThreadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = embot::os::theScheduler::Impl::osIdleThread() &rArr; embot::os::IdleThread::synch() &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::getInstance()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::synch()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::getInstance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4Impl5startERKNS1_6ConfigE)
</UL>
<P><STRONG><a name="[2d7]"></a>embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&)</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4Impl5startERKNS1_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&) &rArr; embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&) &rArr; osal_base_initialise &rArr; oosiit_memory_load &rArr; rt_iit_params_init &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Config::isvalid() const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::prepare(unsigned long long, unsigned short, unsigned short, void (*)(), void (*)(), void (*)(void*, int, char const*))
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_start2()
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::start(embot::os::theScheduler::Config const&)
</UL>

<P><STRONG><a name="[91]"></a>embot::os::theScheduler::Impl::launcher()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4Impl8launcherEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = embot::os::theScheduler::Impl::launcher() &rArr; embot::os::InitThread::synch() &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::getInstance()
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::terminate()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::synch()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::getInstance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4Impl5startERKNS1_6ConfigE)
</UL>
<P><STRONG><a name="[90]"></a>embot::os::theScheduler::Impl::osOnError(void*, int, char const*)</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4Impl9osOnErrorEPviPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = embot::os::theScheduler::Impl::osOnError(void*, int, char const*) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::execute() const
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::~basic_string__sub_object()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::char_traits&lang;char&rang;::length(char const*)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::print(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::getInstance()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_getassociated(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4Impl5startERKNS1_6ConfigE)
</UL>
<P><STRONG><a name="[2df]"></a>embot::os::theScheduler::Impl::Impl__sub_object()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4ImplC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::scheduler_props_t()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Config::Config__sub_object()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::theScheduler()
</UL>

<P><STRONG><a name="[2e2]"></a>embot::os::theScheduler::Impl::~Impl__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler4ImplD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::~scheduler_props_t()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::theScheduler()
</UL>

<P><STRONG><a name="[2e4]"></a>embot::os::theScheduler::start(embot::os::theScheduler::Config const&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler5startERKNS1_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = embot::os::theScheduler::start(embot::os::theScheduler::Config const&) &rArr; embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&) &rArr; embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&) &rArr; osal_base_initialise &rArr; oosiit_memory_load &rArr; rt_iit_params_init &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::started() const
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::execute(embot::app::theApplication::Config const&)
</UL>

<P><STRONG><a name="[3c6]"></a>embot::os::theScheduler::Config::Config__sub_object(embot::os::theScheduler::Timing const&, embot::os::theScheduler::Behaviour const&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, embot_os.o(.text._ZN5embot2os12theScheduler6ConfigC2ERKNS1_6TimingERKNS1_9BehaviourE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::theScheduler::Config::Config__sub_object(embot::os::theScheduler::Timing const&, embot::os::theScheduler::Behaviour const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::execute(embot::app::theApplication::Config const&)
</UL>

<P><STRONG><a name="[2e0]"></a>embot::os::theScheduler::Config::Config__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler6ConfigC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Behaviour::Behaviour__sub_object()
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Timing::Timing__sub_object(unsigned int)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[2e6]"></a>embot::os::theScheduler::Timing::Timing__sub_object(unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os.o(.text._ZN5embot2os12theScheduler6TimingC2Ej))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Config::Config__sub_object()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::execute(embot::app::theApplication::Config const&)
</UL>

<P><STRONG><a name="[3e1]"></a>embot::os::theScheduler::Behaviour::Behaviour__sub_object(embot::os::InitThread::Config const&, embot::os::IdleThread::Config const&, embot::core::Callback const&)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, embot_os.o(.text._ZN5embot2os12theScheduler9BehaviourC2ERKNS0_10InitThread6ConfigERKNS0_10IdleThread6ConfigERKNS_4core8CallbackE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::theScheduler::Behaviour::Behaviour__sub_object(embot::os::InitThread::Config const&, embot::os::IdleThread::Config const&, embot::core::Callback const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&)
</UL>

<P><STRONG><a name="[2e7]"></a>embot::os::theScheduler::Behaviour::Behaviour__sub_object()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, embot_os_thescheduler.o(.text._ZN5embot2os12theScheduler9BehaviourC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::Config::Config__sub_object()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::Config::Config__sub_object()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::Callback__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Config::Config__sub_object()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::Config::Config__sub_object()
</UL>

<P><STRONG><a name="[2e8]"></a>embot::os::theScheduler::theScheduler()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, embot_os_thescheduler.o(.text._ZN5embot2os12theSchedulerC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::~Impl__sub_object()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[2d6]"></a>embot::os::theScheduler::theScheduler__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, embot_os_thescheduler.o(.text._ZN5embot2os12theSchedulerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::theScheduler::theScheduler__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::getInstance()
</UL>

<P><STRONG><a name="[2e9]"></a>embot::os::EventToThread::execute()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, embot_os_action.o(.text._ZN5embot2os13EventToThread7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::EventToThread::execute() &rArr; embot::os::EventToThread::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventToThread::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::execute(unsigned int)
</UL>

<P><STRONG><a name="[1ef]"></a>embot::os::EventToThread::EventToThread__sub_object(unsigned int, embot::os::Thread*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZN5embot2os13EventToThreadC2EjPNS0_6ThreadE))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefStartup(embot::os::Thread*, void*) const
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_startup(embot::os::Thread*, void*)
</UL>

<P><STRONG><a name="[104]"></a>embot::os::MessageThread::setMessage(void*, unsigned int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThread10setMessageEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = embot::os::MessageThread::setMessage(void*, unsigned int) &rArr; embot::os::rtos::messagequeue_put(void*, void*, unsigned int) &rArr; osal_messagequeue_put &rArr; oosiit_mbx_send &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::messagequeue_put(void*, void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
</UL>
<P><STRONG><a name="[106]"></a>embot::os::MessageThread::setCallback(embot::core::Callback const&, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThread11setCallbackERKNS_4core8CallbackEj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
</UL>
<P><STRONG><a name="[100]"></a>embot::os::MessageThread::setPriority(embot::os::Priority)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThread11setPriorityENS0_8PriorityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = embot::os::MessageThread::setPriority(embot::os::Priority) &rArr; embot::os::rtos::thread_setpriority(void*, embot::os::Priority) &rArr; osal_task_priority_set &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::os::Priority&rang;(embot::os::Priority)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_setpriority(void*, embot::os::Priority)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::setprio(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
</UL>
<P><STRONG><a name="[102]"></a>embot::os::MessageThread::run()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThread3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = embot::os::MessageThread::run() &rArr; embot::os::MessageThread::Impl::os_messagedriven_loop(void*) &rArr; embot::os::rtos::messagequeue_get(void*, unsigned int) &rArr; osal_messagequeue_getquick &rArr; oosiit_mbx_retrieve &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Impl::os_messagedriven_loop(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
</UL>
<P><STRONG><a name="[92]"></a>embot::os::MessageThread::Impl::dummyOnMessage(embot::os::Thread*, void*, void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThread4Impl14dummyOnMessageEPNS0_6ThreadEPvS5_))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.text._ZN5embot2os13MessageThread4ImplC2EPS1_)
</UL>
<P><STRONG><a name="[93]"></a>embot::os::MessageThread::Impl::os_messagedriven_loop(void*)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThread4Impl21os_messagedriven_loopEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = embot::os::MessageThread::Impl::os_messagedriven_loop(void*) &rArr; embot::os::rtos::messagequeue_get(void*, unsigned int) &rArr; osal_messagequeue_getquick &rArr; oosiit_mbx_retrieve &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::messagequeue_get(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.text._ZN5embot2os13MessageThread5startERKNS1_6ConfigEPFvPvE)
</UL>
<P><STRONG><a name="[2ed]"></a>embot::os::MessageThread::Impl::Impl__sub_object(embot::os::MessageThread*)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThread4ImplC2EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = embot::os::MessageThread::Impl::Impl__sub_object(embot::os::MessageThread*) &rArr; embot::os::rtos::thread_props_t::thread_props_t() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::thread_props_t()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, unsigned char, void (*)(embot::os::Thread*, void*, void*), char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::MessageThread()
</UL>

<P><STRONG><a name="[2ef]"></a>embot::os::MessageThread::Impl::~Impl__sub_object()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThread4ImplD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_deassociate(void*, embot::os::Thread*)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::messagequeue_delete(void*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::~thread_props_t()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::~MessageThread()
</UL>

<P><STRONG><a name="[2f1]"></a>embot::os::MessageThread::start(embot::os::MessageThread::Config const&, void (*)(void*))</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThread5startERKNS1_6ConfigEPFvPvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = embot::os::MessageThread::start(embot::os::MessageThread::Config const&, void (*)(void*)) &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Config::isvalid() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::os::Priority&rang;(embot::os::Priority)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_associate(void*, embot::os::Thread*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::messagequeue_new(unsigned char)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::prepare(void (*)(void*), void*, unsigned char, unsigned short)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_new(embot::os::rtos::thread_props_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::start(embot::os::theTimerManager::Config const&)
</UL>

<P><STRONG><a name="[2ee]"></a>embot::os::MessageThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, unsigned char, void (*)(embot::os::Thread*, void*, void*), char const*)</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThread6ConfigC2EtNS0_8PriorityEPFvPNS0_6ThreadEPvES6_jhPFvS5_S6_S6_EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = embot::os::MessageThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, unsigned char, void (*)(embot::os::Thread*, void*, void*), char const*) &rArr; embot::os::Thread::BaseConfig::BaseConfig__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::BaseConfig__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Impl::Impl__sub_object(embot::os::MessageThread*)
</UL>

<P><STRONG><a name="[2f4]"></a>embot::os::MessageThread::Config::Config__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, embot_os_thetimermanager.o(.text._ZN5embot2os13MessageThread6ConfigC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::MessageThread::Config::Config__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::BaseConfig__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::start(embot::os::theTimerManager::Config const&)
</UL>

<P><STRONG><a name="[103]"></a>embot::os::MessageThread::setEvent(unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThread8setEventEj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
</UL>
<P><STRONG><a name="[105]"></a>embot::os::MessageThread::setValue(unsigned int, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThread8setValueEjj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
</UL>
<P><STRONG><a name="[2f5]"></a>embot::os::MessageThread::MessageThread()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThreadC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = embot::os::MessageThread::MessageThread() &rArr; embot::os::MessageThread::Impl::Impl__sub_object(embot::os::MessageThread*) &rArr; embot::os::rtos::thread_props_t::thread_props_t() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::Thread__sub_object()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Impl::Impl__sub_object(embot::os::MessageThread*)
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::start(embot::os::theTimerManager::Config const&)
</UL>

<P><STRONG><a name="[51e]"></a>embot::os::MessageThread::MessageThread__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThreadC2Ev), UNUSED)

<P><STRONG><a name="[108]"></a>embot::os::MessageThread::~MessageThread__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThreadD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::os::MessageThread::~MessageThread__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::~MessageThread__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
</UL>
<P><STRONG><a name="[2f6]"></a>embot::os::MessageThread::~MessageThread()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThreadD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::~Thread__sub_object()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[107]"></a>embot::os::MessageThread::~MessageThread__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os13MessageThreadD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::MessageThread::~MessageThread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::~MessageThread__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
</UL>
<P><STRONG><a name="[2f7]"></a>embot::os::ValueToThread::execute(unsigned int)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, embot_os_action.o(.text._ZN5embot2os13ValueToThread7executeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::ValueToThread::execute(unsigned int) &rArr; embot::os::ValueToThread::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::ValueToThread::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::execute(unsigned int)
</UL>

<P><STRONG><a name="[10f]"></a>embot::os::CallbackThread::setMessage(void*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread10setMessageEPvj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
</UL>
<P><STRONG><a name="[111]"></a>embot::os::CallbackThread::setCallback(embot::core::Callback const&, unsigned int)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread11setCallbackERKNS_4core8CallbackEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = embot::os::CallbackThread::setCallback(embot::core::Callback const&, unsigned int) &rArr; embot::os::rtos::messagequeue_put(void*, void*, unsigned int) &rArr; osal_messagequeue_put &rArr; oosiit_mbx_send &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::isvalid() const
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::messagequeue_put(void*, void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
</UL>
<P><STRONG><a name="[10b]"></a>embot::os::CallbackThread::setPriority(embot::os::Priority)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread11setPriorityENS0_8PriorityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = embot::os::CallbackThread::setPriority(embot::os::Priority) &rArr; embot::os::rtos::thread_setpriority(void*, embot::os::Priority) &rArr; osal_task_priority_set &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::os::Priority&rang;(embot::os::Priority)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_setpriority(void*, embot::os::Priority)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::setprio(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
</UL>
<P><STRONG><a name="[10d]"></a>embot::os::CallbackThread::run()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = embot::os::CallbackThread::run() &rArr; embot::os::CallbackThread::Impl::os_callbackdriven_loop(void*) &rArr; embot::os::CallbackThread::Impl::os_get_argument(void*, unsigned int) &rArr; embot::os::rtos::messagequeue_get(void*, unsigned int) &rArr; osal_messagequeue_getquick &rArr; oosiit_mbx_retrieve &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::os_callbackdriven_loop(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
</UL>
<P><STRONG><a name="[94]"></a>embot::os::CallbackThread::Impl::dummyAfter(embot::os::Thread*, embot::core::Callback&, void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread4Impl10dummyAfterEPNS0_6ThreadERNS_4core8CallbackEPv))
<BR>[Address Reference Count : 2]<UL><LI> embot_os_thread.o(.text._ZN5embot2os14CallbackThread4ImplC2EPS1_)
<LI> embot_os_thread.o(.text._ZN5embot2os14CallbackThread4Impl22os_callbackdriven_loopEPv)
</UL>
<P><STRONG><a name="[2fa]"></a>embot::os::CallbackThread::Impl::os_get_caller(void*, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread4Impl13os_get_callerEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = embot::os::CallbackThread::Impl::os_get_caller(void*, unsigned int) &rArr; embot::os::rtos::messagequeue_get(void*, unsigned int) &rArr; osal_messagequeue_getquick &rArr; oosiit_mbx_retrieve &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::messagequeue_get(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::os_callbackdriven_loop(void*)
</UL>

<P><STRONG><a name="[2fb]"></a>embot::os::CallbackThread::Impl::os_get_argument(void*, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread4Impl15os_get_argumentEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = embot::os::CallbackThread::Impl::os_get_argument(void*, unsigned int) &rArr; embot::os::rtos::messagequeue_get(void*, unsigned int) &rArr; osal_messagequeue_getquick &rArr; oosiit_mbx_retrieve &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::messagequeue_get(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::os_callbackdriven_loop(void*)
</UL>

<P><STRONG><a name="[95]"></a>embot::os::CallbackThread::Impl::os_callbackdriven_loop(void*)</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread4Impl22os_callbackdriven_loopEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = embot::os::CallbackThread::Impl::os_callbackdriven_loop(void*) &rArr; embot::os::CallbackThread::Impl::os_get_argument(void*, unsigned int) &rArr; embot::os::rtos::messagequeue_get(void*, unsigned int) &rArr; osal_messagequeue_getquick &rArr; oosiit_mbx_retrieve &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::execute() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::os_get_argument(void*, unsigned int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::os_get_caller(void*, unsigned int)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::Callback__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.text._ZN5embot2os14CallbackThread5startERKNS1_6ConfigEPFvPvE)
</UL>
<P><STRONG><a name="[2fc]"></a>embot::os::CallbackThread::Impl::Impl__sub_object(embot::os::CallbackThread*)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread4ImplC2EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = embot::os::CallbackThread::Impl::Impl__sub_object(embot::os::CallbackThread*) &rArr; embot::os::rtos::thread_props_t::thread_props_t() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::thread_props_t()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, unsigned char, void (*)(embot::os::Thread*, embot::core::Callback&, void*), char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::CallbackThread()
</UL>

<P><STRONG><a name="[2fe]"></a>embot::os::CallbackThread::Impl::~Impl__sub_object()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread4ImplD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_deassociate(void*, embot::os::Thread*)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::messagequeue_delete(void*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::~thread_props_t()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::~CallbackThread()
</UL>

<P><STRONG><a name="[2ff]"></a>embot::os::CallbackThread::start(embot::os::CallbackThread::Config const&, void (*)(void*))</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread5startERKNS1_6ConfigEPFvPvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = embot::os::CallbackThread::start(embot::os::CallbackThread::Config const&, void (*)(void*)) &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Config::isvalid() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::os::Priority&rang;(embot::os::Priority)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_associate(void*, embot::os::Thread*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::messagequeue_new(unsigned char)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::prepare(void (*)(void*), void*, unsigned char, unsigned short)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_new(embot::os::rtos::thread_props_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::start(embot::os::theCallbackManager::Config const&)
</UL>

<P><STRONG><a name="[2fd]"></a>embot::os::CallbackThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, unsigned char, void (*)(embot::os::Thread*, embot::core::Callback&, void*), char const*)</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread6ConfigC2EtNS0_8PriorityEPFvPNS0_6ThreadEPvES6_jhPFvS5_RNS_4core8CallbackES6_EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = embot::os::CallbackThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, unsigned char, void (*)(embot::os::Thread*, embot::core::Callback&, void*), char const*) &rArr; embot::os::Thread::BaseConfig::BaseConfig__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::BaseConfig__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::Impl__sub_object(embot::os::CallbackThread*)
</UL>

<P><STRONG><a name="[301]"></a>embot::os::CallbackThread::Config::Config__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, embot_os_thecallbackmanager.o(.text._ZN5embot2os14CallbackThread6ConfigC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::CallbackThread::Config::Config__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::BaseConfig__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::start(embot::os::theCallbackManager::Config const&)
</UL>

<P><STRONG><a name="[10e]"></a>embot::os::CallbackThread::setEvent(unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread8setEventEj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
</UL>
<P><STRONG><a name="[110]"></a>embot::os::CallbackThread::setValue(unsigned int, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThread8setValueEjj))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
</UL>
<P><STRONG><a name="[302]"></a>embot::os::CallbackThread::CallbackThread()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThreadC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = embot::os::CallbackThread::CallbackThread() &rArr; embot::os::CallbackThread::Impl::Impl__sub_object(embot::os::CallbackThread*) &rArr; embot::os::rtos::thread_props_t::thread_props_t() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::Thread__sub_object()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::Impl__sub_object(embot::os::CallbackThread*)
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::start(embot::os::theCallbackManager::Config const&)
</UL>

<P><STRONG><a name="[51f]"></a>embot::os::CallbackThread::CallbackThread__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThreadC2Ev), UNUSED)

<P><STRONG><a name="[113]"></a>embot::os::CallbackThread::~CallbackThread__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThreadD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::os::CallbackThread::~CallbackThread__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::~CallbackThread__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
</UL>
<P><STRONG><a name="[303]"></a>embot::os::CallbackThread::~CallbackThread()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThreadD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::~Thread__sub_object()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[112]"></a>embot::os::CallbackThread::~CallbackThread__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZN5embot2os14CallbackThreadD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::CallbackThread::~CallbackThread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::~CallbackThread__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
</UL>
<P><STRONG><a name="[304]"></a>embot::os::MessageToThread::execute(unsigned int)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, embot_os_action.o(.text._ZN5embot2os15MessageToThread7executeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::MessageToThread::execute(unsigned int) &rArr; embot::os::MessageToThread::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageToThread::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::execute(unsigned int)
</UL>

<P><STRONG><a name="[2b7]"></a>embot::os::theTimerManager::getInstance()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, embot_os_thetimermanager.o(.text._ZN5embot2os15theTimerManager11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = embot::os::theTimerManager::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::theTimerManager__sub_object()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::OnExpiryCbk(void*, void*)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::start_sys_services()
</UL>

<P><STRONG><a name="[96]"></a>embot::os::theTimerManager::Impl::processtimer(embot::os::Thread*, void*, void*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_os_thetimermanager.o(.text._ZN5embot2os15theTimerManager4Impl12processtimerEPNS0_6ThreadEPvS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = embot::os::theTimerManager::Impl::processtimer(embot::os::Thread*, void*, void*) &rArr; embot::os::Timer::execute() &rArr; embot::os::Action::execute(unsigned int) &rArr; embot::os::CallbackToThread::execute(unsigned int) &rArr; embot::core::Callback::execute() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::execute()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thetimermanager.o(.text._ZN5embot2os15theTimerManager5startERKNS1_6ConfigE)
</UL>
<P><STRONG><a name="[307]"></a>embot::os::theTimerManager::Impl::Impl__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_os_thetimermanager.o(.text._ZN5embot2os15theTimerManager4ImplC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::Config::Config__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::theTimerManager()
</UL>

<P><STRONG><a name="[309]"></a>embot::os::theTimerManager::start(embot::os::theTimerManager::Config const&)</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, embot_os_thetimermanager.o(.text._ZN5embot2os15theTimerManager5startERKNS1_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = embot::os::theTimerManager::start(embot::os::theTimerManager::Config const&) &rArr; embot::os::MessageThread::start(embot::os::MessageThread::Config const&, void (*)(void*)) &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::started() const
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Config::Config__sub_object()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::MessageThread()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::start(embot::os::MessageThread::Config const&, void (*)(void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::start_sys_services()
</UL>

<P><STRONG><a name="[308]"></a>embot::os::theTimerManager::Config::Config__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, embot_os_thetimermanager.o(.text._ZN5embot2os15theTimerManager6ConfigC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[2b9]"></a>embot::os::theTimerManager::onexpiry(embot::os::Timer const&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, embot_os_thetimermanager.o(.text._ZN5embot2os15theTimerManager8onexpiryERKNS0_5TimerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::theTimerManager::onexpiry(embot::os::Timer const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::OnExpiryCbk(void*, void*)
</UL>

<P><STRONG><a name="[30a]"></a>embot::os::theTimerManager::theTimerManager()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, embot_os_thetimermanager.o(.text._ZN5embot2os15theTimerManagerC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[306]"></a>embot::os::theTimerManager::theTimerManager__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, embot_os_thetimermanager.o(.text._ZN5embot2os15theTimerManagerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::theTimerManager::theTimerManager__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::getInstance()
</UL>

<P><STRONG><a name="[30b]"></a>embot::os::CallbackToThread::execute(unsigned int)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, embot_os_action.o(.text._ZN5embot2os16CallbackToThread7executeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::CallbackToThread::execute(unsigned int) &rArr; embot::core::Callback::execute() const
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::execute() const
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackToThread::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::execute(unsigned int)
</UL>

<P><STRONG><a name="[30d]"></a>embot::os::CallbackToThread::CallbackToThread__sub_object(void (*)(void*), void*, embot::os::Thread*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZN5embot2os16CallbackToThreadC2EPFvPvES2_PNS0_6ThreadE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::CallbackToThread::CallbackToThread__sub_object(void (*)(void*), void*, embot::os::Thread*)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::Callback__sub_object(void (*)(void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::pulse(unsigned int, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::wave(embot::app::LEDwave const*, unsigned int)
</UL>

<P><STRONG><a name="[30e]"></a>embot::os::theCallbackManager::getInstance()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, embot_os_thecallbackmanager.o(.text._ZN5embot2os18theCallbackManager11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = embot::os::theCallbackManager::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::theCallbackManager__sub_object()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::start_sys_services()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::pulse(unsigned int, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::wave(embot::app::LEDwave const*, unsigned int)
</UL>

<P><STRONG><a name="[310]"></a>embot::os::theCallbackManager::Impl::Impl__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_os_thecallbackmanager.o(.text._ZN5embot2os18theCallbackManager4ImplC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::Config::Config__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::theCallbackManager()
</UL>

<P><STRONG><a name="[312]"></a>embot::os::theCallbackManager::start(embot::os::theCallbackManager::Config const&)</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, embot_os_thecallbackmanager.o(.text._ZN5embot2os18theCallbackManager5startERKNS1_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = embot::os::theCallbackManager::start(embot::os::theCallbackManager::Config const&) &rArr; embot::os::CallbackThread::start(embot::os::CallbackThread::Config const&, void (*)(void*)) &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::started() const
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Config::Config__sub_object()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::CallbackThread()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::start(embot::os::CallbackThread::Config const&, void (*)(void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::start_sys_services()
</UL>

<P><STRONG><a name="[311]"></a>embot::os::theCallbackManager::Config::Config__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, embot_os_thecallbackmanager.o(.text._ZN5embot2os18theCallbackManager6ConfigC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[314]"></a>embot::os::theCallbackManager::theCallbackManager()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, embot_os_thecallbackmanager.o(.text._ZN5embot2os18theCallbackManagerC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[30f]"></a>embot::os::theCallbackManager::theCallbackManager__sub_object()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, embot_os_thecallbackmanager.o(.text._ZN5embot2os18theCallbackManagerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::theCallbackManager::theCallbackManager__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::getInstance()
</UL>

<P><STRONG><a name="[315]"></a>embot::os::init(embot::os::Config const&)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, embot_os.o(.text._ZN5embot2os4initERKNS0_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = embot::os::init(embot::os::Config const&) &rArr; embot::hw::init(embot::hw::Config const&) &rArr; embot::hw::bsp::init(embot::hw::Config const&) &rArr; stm32hal_init &rArr; stm32hal_board_init &rArr; MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::init(embot::hw::Config const&)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Config::isvalid() const
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::initialised()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::Config::Config__sub_object(void (*)(), unsigned long long (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::execute(embot::app::theApplication::Config const&)
</UL>

<P><STRONG><a name="[319]"></a>embot::os::rtos::mutex_take(void*, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos10mutex_takeEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::mutex_take(void*, unsigned int) &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::sizeoftx()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::gettx(embot::prot::can::Frame&, unsigned int&)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::getrx(embot::prot::can::Frame&, unsigned int&)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addtx(embot::prot::can::Frame const&)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addrx(embot::prot::can::Frame const&)
</UL>

<P><STRONG><a name="[2d3]"></a>embot::os::rtos::thread_new(embot::os::rtos::thread_props_t&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos10thread_newERNS1_14thread_props_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::thread_new(embot::os::rtos::thread_props_t&) &rArr; osal_task_new1 &rArr; osal_task_new &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::getInternals()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_new1
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::start(embot::os::EventThread::Config const&, void (*)(void*))
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::start(embot::os::CallbackThread::Config const&, void (*)(void*))
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::start(embot::os::MessageThread::Config const&, void (*)(void*))
</UL>

<P><STRONG><a name="[2bd]"></a>embot::os::rtos::timer_stop(void*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos10timer_stopEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::timer_stop(void*) &rArr; osal_timer_stop &rArr; oosiit_advtmr_stop &rArr; isr_iit_advtmr_stop &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::stop()
</UL>

<P><STRONG><a name="[2c3]"></a>embot::os::rtos::timer_start(void*, embot::os::rtos::timerMode, unsigned int, void (*)(void*, void*), void*)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos11timer_startEPvNS1_9timerModeEjPFvS2_S2_ES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::timer_start(void*, embot::os::rtos::timerMode, unsigned int, void (*)(void*, void*), void*) &rArr; osal_timer_start &rArr; oosiit_advtmr_start &rArr; isr_iit_advtmr_start &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::start(embot::os::Timer::Config const&, bool)
</UL>

<P><STRONG><a name="[31f]"></a>embot::os::rtos::mutex_release(void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos13mutex_releaseEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::mutex_release(void*) &rArr; osal_mutex_release &rArr; oosiit_mut_release &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::sizeoftx()
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::gettx(embot::prot::can::Frame&, unsigned int&)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::getrx(embot::prot::can::Frame&, unsigned int&)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addtx(embot::prot::can::Frame const&)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addrx(embot::prot::can::Frame const&)
</UL>

<P><STRONG><a name="[2cf]"></a>embot::os::rtos::thread_delete(void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos13thread_deleteEPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::~Impl__sub_object()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Impl::~Impl__sub_object()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[2da]"></a>embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos14scheduler_initERNS1_17scheduler_props_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&) &rArr; osal_base_initialise &rArr; oosiit_memory_load &rArr; rt_iit_params_init &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::getInternals()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_base_memory_new
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_base_memory_getsize
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_base_initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&)
</UL>

<P><STRONG><a name="[31b]"></a>embot::os::rtos::thread_props_t::getInternals()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos14thread_props_t12getInternalsEv))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_new(embot::os::rtos::thread_props_t&)
</UL>

<P><STRONG><a name="[326]"></a>embot::os::rtos::thread_props_t::Impl::prepare(void (*)(void*), void*, unsigned char, unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos14thread_props_t4Impl7prepareEPFvPvES4_ht))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::prepare(void (*)(void*), void*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[327]"></a>embot::os::rtos::thread_props_t::Impl::setprio(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos14thread_props_t4Impl7setprioEh))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::setprio(unsigned char)
</UL>

<P><STRONG><a name="[328]"></a>embot::os::rtos::thread_props_t::Impl::Impl__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos14thread_props_t4ImplC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::thread_props_t()
</UL>

<P><STRONG><a name="[329]"></a>embot::os::rtos::thread_props_t::Impl::~Impl__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos14thread_props_t4ImplD2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::~thread_props_t()
</UL>

<P><STRONG><a name="[2d2]"></a>embot::os::rtos::thread_props_t::prepare(void (*)(void*), void*, unsigned char, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos14thread_props_t7prepareEPFvPvES3_ht))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::rtos::thread_props_t::prepare(void (*)(void*), void*, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::Impl::prepare(void (*)(void*), void*, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::start(embot::os::EventThread::Config const&, void (*)(void*))
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::start(embot::os::CallbackThread::Config const&, void (*)(void*))
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::start(embot::os::MessageThread::Config const&, void (*)(void*))
</UL>

<P><STRONG><a name="[2c8]"></a>embot::os::rtos::thread_props_t::setprio(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos14thread_props_t7setprioEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::rtos::thread_props_t::setprio(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::Impl::setprio(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::setPriority(embot::os::Priority)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::setPriority(embot::os::Priority)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::setPriority(embot::os::Priority)
</UL>

<P><STRONG><a name="[2cc]"></a>embot::os::rtos::thread_props_t::thread_props_t()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos14thread_props_tC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::thread_props_t::thread_props_t() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::Impl::Impl__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::Impl__sub_object(embot::os::CallbackThread*)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Impl::Impl__sub_object(embot::os::MessageThread*)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Impl::Impl__sub_object(embot::os::EventThread*)
</UL>

<P><STRONG><a name="[520]"></a>embot::os::rtos::thread_props_t::thread_props_t__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos14thread_props_tC2Ev), UNUSED)

<P><STRONG><a name="[2d0]"></a>embot::os::rtos::thread_props_t::~thread_props_t()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos14thread_props_tD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::Impl::~Impl__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::~Impl__sub_object()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Impl::~Impl__sub_object()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[521]"></a>embot::os::rtos::thread_props_t::~thread_props_t__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos14thread_props_tD2Ev), UNUSED)

<P><STRONG><a name="[2ec]"></a>embot::os::rtos::messagequeue_get(void*, unsigned int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos16messagequeue_getEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::messagequeue_get(void*, unsigned int) &rArr; osal_messagequeue_getquick &rArr; oosiit_mbx_retrieve &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_getquick
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::os_get_argument(void*, unsigned int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::os_get_caller(void*, unsigned int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Impl::os_messagedriven_loop(void*)
</UL>

<P><STRONG><a name="[2f3]"></a>embot::os::rtos::messagequeue_new(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos16messagequeue_newEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::messagequeue_new(unsigned char) &rArr; osal_messagequeue_new &rArr; oosiit_mbx_create &rArr; rt_iit_memory_getmbx &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::start(embot::os::CallbackThread::Config const&, void (*)(void*))
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::start(embot::os::MessageThread::Config const&, void (*)(void*))
</UL>

<P><STRONG><a name="[2eb]"></a>embot::os::rtos::messagequeue_put(void*, void*, unsigned int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos16messagequeue_putEPvS2_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::messagequeue_put(void*, void*, unsigned int) &rArr; osal_messagequeue_put &rArr; oosiit_mbx_send &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_put
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::setCallback(embot::core::Callback const&, unsigned int)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::setMessage(void*, unsigned int)
</UL>

<P><STRONG><a name="[2db]"></a>embot::os::rtos::scheduler_start2()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos16scheduler_start2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = embot::os::rtos::scheduler_start2() &rArr; osal_system_start &rArr; oosiit_sys_start &rArr; rt_iit_dbg_global_init &rArr; eventviewer_init &rArr;  eventviewer_load (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::getInternals()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_system_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&)
</UL>

<P><STRONG><a name="[322]"></a>embot::os::rtos::scheduler_props_t::getInternals()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos17scheduler_props_t12getInternalsEv))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_start2()
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&)
</UL>

<P><STRONG><a name="[32e]"></a>embot::os::rtos::scheduler_props_t::Impl::reset()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos17scheduler_props_t4Impl5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::scheduler_props_t::Impl::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::Impl::prepare(unsigned long long, unsigned short, unsigned short, void (*)(), void (*)(), void (*)(void*, int, char const*))
</UL>

<P><STRONG><a name="[32f]"></a>embot::os::rtos::scheduler_props_t::Impl::prepare(unsigned long long, unsigned short, unsigned short, void (*)(), void (*)(), void (*)(void*, int, char const*))</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos17scheduler_props_t4Impl7prepareEyttPFvvES5_PFvPviPKcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::scheduler_props_t::Impl::prepare(unsigned long long, unsigned short, unsigned short, void (*)(), void (*)(), void (*)(void*, int, char const*)) &rArr; embot::os::rtos::scheduler_props_t::Impl::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::Impl::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::prepare(unsigned long long, unsigned short, unsigned short, void (*)(), void (*)(), void (*)(void*, int, char const*))
</UL>

<P><STRONG><a name="[330]"></a>embot::os::rtos::scheduler_props_t::Impl::Impl__sub_object(embot::os::rtos::scheduler_props_t*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos17scheduler_props_t4ImplC2EPS2_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::scheduler_props_t()
</UL>

<P><STRONG><a name="[331]"></a>embot::os::rtos::scheduler_props_t::Impl::~Impl__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos17scheduler_props_t4ImplD2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::~scheduler_props_t()
</UL>

<P><STRONG><a name="[2d9]"></a>embot::os::rtos::scheduler_props_t::prepare(unsigned long long, unsigned short, unsigned short, void (*)(), void (*)(), void (*)(void*, int, char const*))</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos17scheduler_props_t7prepareEyttPFvvES4_PFvPviPKcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::scheduler_props_t::prepare(unsigned long long, unsigned short, unsigned short, void (*)(), void (*)(), void (*)(void*, int, char const*)) &rArr; embot::os::rtos::scheduler_props_t::Impl::prepare(unsigned long long, unsigned short, unsigned short, void (*)(), void (*)(), void (*)(void*, int, char const*)) &rArr; embot::os::rtos::scheduler_props_t::Impl::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::Impl::prepare(unsigned long long, unsigned short, unsigned short, void (*)(), void (*)(), void (*)(void*, int, char const*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&)
</UL>

<P><STRONG><a name="[2e1]"></a>embot::os::rtos::scheduler_props_t::scheduler_props_t()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos17scheduler_props_tC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::Impl::Impl__sub_object(embot::os::rtos::scheduler_props_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[522]"></a>embot::os::rtos::scheduler_props_t::scheduler_props_t__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos17scheduler_props_tC2Ev), UNUSED)

<P><STRONG><a name="[2e3]"></a>embot::os::rtos::scheduler_props_t::~scheduler_props_t()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos17scheduler_props_tD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::Impl::~Impl__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[523]"></a>embot::os::rtos::scheduler_props_t::~scheduler_props_t__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos17scheduler_props_tD2Ev), UNUSED)

<P><STRONG><a name="[332]"></a>embot::os::rtos::scheduler_timeget()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos17scheduler_timegetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = embot::os::rtos::scheduler_timeget() &rArr; osal_system_abstime_get &rArr; oosiit_microtime_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_isrunning()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_system_abstime_get
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::_now()
</UL>

<P><STRONG><a name="[2c9]"></a>embot::os::rtos::thread_setpriority(void*, embot::os::Priority)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos18thread_setpriorityEPvNS0_8PriorityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::thread_setpriority(void*, embot::os::Priority) &rArr; osal_task_priority_set &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::os::Priority&rang;(embot::os::Priority)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_priority_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::setPriority(embot::os::Priority)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::setPriority(embot::os::Priority)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::setPriority(embot::os::Priority)
</UL>

<P><STRONG><a name="[2f0]"></a>embot::os::rtos::messagequeue_delete(void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos19messagequeue_deleteEPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::~Impl__sub_object()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[2a3]"></a>embot::os::rtos::scheduler_associate(void*, embot::os::Thread*)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos19scheduler_associateEPvPNS0_6ThreadE))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::start(embot::os::EventThread::Config const&, void (*)(void*))
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::start(embot::os::CallbackThread::Config const&, void (*)(void*))
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::start(embot::os::MessageThread::Config const&, void (*)(void*))
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::synch()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::synch()
</UL>

<P><STRONG><a name="[333]"></a>embot::os::rtos::scheduler_isrunning()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos19scheduler_isrunningEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::rtos::scheduler_isrunning()
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_info_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_timeget()
</UL>

<P><STRONG><a name="[2ce]"></a>embot::os::rtos::scheduler_deassociate(void*, embot::os::Thread*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos21scheduler_deassociateEPvPNS0_6ThreadE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned int std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__erase_unique&lang;void*&rang;(void* const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::~Impl__sub_object()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Impl::~Impl__sub_object()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[2dd]"></a>embot::os::rtos::scheduler_getassociated(void*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos23scheduler_getassociatedEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::os::rtos::scheduler_getassociated(void*) &rArr; std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::find&lang;void*&rang;(void* const&) &rArr; std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__lower_bound&lang;void*&rang;(void* const&, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;void* const, embot::os::Thread*&rang;* std::__2::__launder&lang;std::__2::pair&lang;void* const, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void* const, embot::os::Thread*&rang;*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::find&lang;void*&rang;(void* const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::osOnError(void*, int, char const*)
</UL>

<P><STRONG><a name="[2a2]"></a>embot::os::rtos::scheduler_thread_running()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos24scheduler_thread_runningEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::rtos::scheduler_thread_running() &rArr; osal_task_get &rArr; oosiit_tsk_get_extdata &rArr;  oosiit_sys_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::synch()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::synch()
</UL>

<P><STRONG><a name="[2ca]"></a>embot::os::rtos::event_get(unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos9event_getEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::rtos::event_get(unsigned int) &rArr; osal_eventflag_getany
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_eventflag_getany
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Impl::os_eventdriven_loop(void*)
</UL>

<P><STRONG><a name="[2a8]"></a>embot::os::rtos::event_set(void*, unsigned int)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos9event_setEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::event_set(void*, unsigned int) &rArr; osal_eventflag_set &rArr; oosiit_evt_set &rArr; iitchanged_isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_eventflag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::setEvent(unsigned int)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::setEvent(unsigned int)
</UL>

<P><STRONG><a name="[33f]"></a>embot::os::rtos::mutex_new()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos9mutex_newEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::mutex_new() &rArr; osal_mutex_new &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::shared_t__sub_object()
</UL>

<P><STRONG><a name="[2c6]"></a>embot::os::rtos::timer_new()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZN5embot2os4rtos9timer_newEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = embot::os::rtos::timer_new() &rArr; osal_timer_new &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::TMR__sub_object(embot::os::Timer*)
</UL>

<P><STRONG><a name="[342]"></a>embot::os::Timer::Impl::Impl__sub_object(embot::os::Timer*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, embot_os_timer.o(.text._ZN5embot2os5Timer4ImplC2EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = embot::os::Timer::Impl::Impl__sub_object(embot::os::Timer*) &rArr; embot::os::timertools::TMR::TMR__sub_object(embot::os::Timer*) &rArr; embot::os::rtos::timer_new() &rArr; osal_timer_new &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::TMR__sub_object(embot::os::Timer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Timer()
</UL>

<P><STRONG><a name="[343]"></a>embot::os::Timer::stop()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_os_timer.o(.text._ZN5embot2os5Timer4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = embot::os::Timer::stop() &rArr; embot::os::timertools::TMR::stop() &rArr; embot::os::rtos::timer_stop(void*) &rArr; osal_timer_stop &rArr; oosiit_advtmr_stop &rArr; isr_iit_advtmr_stop &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::pulse(unsigned int, unsigned int)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::stop()
</UL>

<P><STRONG><a name="[1f2]"></a>embot::os::Timer::start(embot::os::Timer::Config const&, bool)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_os_timer.o(.text._ZN5embot2os5Timer5startERKNS1_6ConfigEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = embot::os::Timer::start(embot::os::Timer::Config const&, bool) &rArr; embot::os::timertools::TMR::start(embot::os::Timer::Config const&, bool) &rArr; embot::os::rtos::timer_start(void*, embot::os::rtos::timerMode, unsigned int, void (*)(void*, void*), void*) &rArr; osal_timer_start &rArr; oosiit_advtmr_start &rArr; isr_iit_advtmr_start &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::start(embot::os::Timer::Config const&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefStartup(embot::os::Thread*, void*) const
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_startup(embot::os::Thread*, void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::pulse(unsigned int, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::wave(embot::app::LEDwave const*, unsigned int)
</UL>

<P><STRONG><a name="[2bf]"></a>embot::os::Timer::Config::clear()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, embot_os_timer.o(.text._ZN5embot2os5Timer6Config5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::Timer::Config::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::reset(embot::os::Timer::Status, bool)
</UL>

<P><STRONG><a name="[1f1]"></a>embot::os::Timer::Config::Config__sub_object(unsigned int, embot::os::Action const&, embot::os::Timer::Mode, unsigned int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5embot2os5Timer6ConfigC2EjRKNS0_6ActionENS1_4ModeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::Timer::Config::Config__sub_object(unsigned int, embot::os::Action const&, embot::os::Timer::Mode, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefStartup(embot::os::Thread*, void*) const
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_startup(embot::os::Thread*, void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::pulse(unsigned int, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::wave(embot::app::LEDwave const*, unsigned int)
</UL>

<P><STRONG><a name="[2c5]"></a>embot::os::Timer::Config::Config__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, embot_os_timer.o(.text._ZN5embot2os5Timer6ConfigC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::Timer::Config::Config__sub_object() &rArr; embot::os::Action::Action__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::Action__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::TMR__sub_object(embot::os::Timer*)
</UL>

<P><STRONG><a name="[2ba]"></a>embot::os::Timer::execute()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, embot_os_timer.o(.text._ZN5embot2os5Timer7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = embot::os::Timer::execute() &rArr; embot::os::Action::execute(unsigned int) &rArr; embot::os::CallbackToThread::execute(unsigned int) &rArr; embot::core::Callback::execute() const
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::execute(unsigned int)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::reset(embot::os::Timer::Status, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::OnExpiryCbk(void*, void*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::Impl::processtimer(embot::os::Thread*, void*, void*)
</UL>

<P><STRONG><a name="[1ee]"></a>embot::os::Timer::Timer()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, embot_os_timer.o(.text._ZN5embot2os5TimerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = embot::os::Timer::Timer() &rArr; embot::os::Timer::Impl::Impl__sub_object(embot::os::Timer*) &rArr; embot::os::timertools::TMR::TMR__sub_object(embot::os::Timer*) &rArr; embot::os::rtos::timer_new() &rArr; osal_timer_new &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Impl::Impl__sub_object(embot::os::Timer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefStartup(embot::os::Thread*, void*) const
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_startup(embot::os::Thread*, void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::pulse(unsigned int, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::wave(embot::app::LEDwave const*, unsigned int)
</UL>

<P><STRONG><a name="[524]"></a>embot::os::Timer::Timer__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, embot_os_timer.o(.text._ZN5embot2os5TimerC2Ev), UNUSED)

<P><STRONG><a name="[347]"></a>embot::os::Action::load(embot::os::EventToThread const&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_os_action.o(.text._ZN5embot2os6Action4loadERKNS0_13EventToThreadE))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::Action__sub_object(embot::os::EventToThread const&)
</UL>

<P><STRONG><a name="[349]"></a>embot::os::Action::load(embot::os::CallbackToThread const&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, embot_os_action.o(.text._ZN5embot2os6Action4loadERKNS0_16CallbackToThreadE))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::Action__sub_object(embot::os::CallbackToThread const&)
</UL>

<P><STRONG><a name="[2c0]"></a>embot::os::Action::clear()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_os_timer.o(.text._ZN5embot2os6Action5clearEv))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::Action__sub_object()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Config::clear()
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::reset(embot::os::Timer::Status, bool)
</UL>

<P><STRONG><a name="[345]"></a>embot::os::Action::execute(unsigned int)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, embot_os_action.o(.text._ZN5embot2os6Action7executeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = embot::os::Action::execute(unsigned int) &rArr; embot::os::CallbackToThread::execute(unsigned int) &rArr; embot::core::Callback::execute() const
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackToThread::execute(unsigned int)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageToThread::execute(unsigned int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::ValueToThread::execute(unsigned int)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventToThread::execute()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::execute()
</UL>

<P><STRONG><a name="[1f0]"></a>embot::os::Action::Action__sub_object(embot::os::EventToThread const&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5embot2os6ActionC2ERKNS0_13EventToThreadE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::Action::Action__sub_object(embot::os::EventToThread const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::load(embot::os::EventToThread const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefStartup(embot::os::Thread*, void*) const
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_startup(embot::os::Thread*, void*)
</UL>

<P><STRONG><a name="[348]"></a>embot::os::Action::Action__sub_object(embot::os::CallbackToThread const&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZN5embot2os6ActionC2ERKNS0_16CallbackToThreadE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::Action::Action__sub_object(embot::os::CallbackToThread const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::load(embot::os::CallbackToThread const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::pulse(unsigned int, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::wave(embot::app::LEDwave const*, unsigned int)
</UL>

<P><STRONG><a name="[344]"></a>embot::os::Action::Action__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_os_timer.o(.text._ZN5embot2os6ActionC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::Action::Action__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Config::Config__sub_object()
</UL>

<P><STRONG><a name="[34a]"></a>embot::os::Config::Config__sub_object()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, embot_app_theapplication.o(.text._ZN5embot2os6ConfigC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::Config::Config__sub_object() &rArr; embot::os::InitThread::Config::Config__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::Config::Config__sub_object()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::Config::Config__sub_object()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::Callback__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::execute(embot::app::theApplication::Config const&)
</UL>

<P><STRONG><a name="[2a5]"></a>embot::os::Thread::BaseConfig::BaseConfig__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, char const*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5embot2os6Thread10BaseConfigC2EtNS0_8PriorityEPFvPS1_PvES5_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::Thread::BaseConfig::BaseConfig__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, void (*)(embot::os::Thread*, unsigned int, void*), char const*)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, unsigned char, void (*)(embot::os::Thread*, embot::core::Callback&, void*), char const*)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, unsigned char, void (*)(embot::os::Thread*, void*, void*), char const*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::Config::Config__sub_object(unsigned short, void (*)(embot::os::Thread*, void*), void*)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::Config::Config__sub_object(unsigned short, void (*)(embot::os::Thread*, void*), void*, void (*)(embot::os::Thread*, void*))
</UL>

<P><STRONG><a name="[2a7]"></a>embot::os::Thread::BaseConfig::BaseConfig__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, embot_os_thecallbackmanager.o(.text._ZN5embot2os6Thread10BaseConfigC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Config::Config__sub_object()
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::Config::Config__sub_object()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::Config::Config__sub_object()
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Config::Config__sub_object()
</UL>

<P><STRONG><a name="[2aa]"></a>embot::os::Thread::Thread__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os6ThreadC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::EventThread()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::CallbackThread()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::MessageThread()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::InitThread()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::IdleThread()
</UL>

<P><STRONG><a name="[116]"></a>embot::os::Thread::~Thread__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os6ThreadD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os6ThreadE)
</UL>
<P><STRONG><a name="[115]"></a>embot::os::Thread::~Thread__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot2os6ThreadD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::~CallbackThread()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::~MessageThread()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::~EventThread()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::~InitThread()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::~IdleThread()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os6ThreadE)
</UL>
<P><STRONG><a name="[413]"></a>embot::os::priority::isvalid(embot::os::Priority)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_os.o(.text._ZN5embot2os8priority7isvalidENS0_8PriorityE))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::isvalid() const
</UL>

<P><STRONG><a name="[34b]"></a>embot::os::priority::isSystem(embot::os::Priority)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, embot_app_skeleton_os_basic.o(.text._ZN5embot2os8priority8isSystemENS0_8PriorityE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::priority::isSystem(embot::os::Priority)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::os::Priority&rang;(embot::os::Priority)
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::Config::isvalid() const
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::Config::isvalid() const
</UL>

<P><STRONG><a name="[353]"></a>embot::app::application::CANagentMBD::CANagentMBD__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application11CANagentMBDC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::theMBDagent()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::dummyCANagentMBD__sub_object()
</UL>

<P><STRONG><a name="[118]"></a>embot::app::application::CANagentMBD::~CANagentMBD__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application11CANagentMBDD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application11CANagentMBDE)
</UL>
<P><STRONG><a name="[117]"></a>embot::app::application::CANagentMBD::~CANagentMBD__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application11CANagentMBDD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::~theMBDagent()
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::~Impl__sub_object()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::~dummyCANagentMBD__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDE)
<LI> embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application11CANagentMBDE)
</UL>
<P><STRONG><a name="[1e0]"></a>embot::app::application::theMBDagent::initialise(embot::app::application::theMBDagent::Config const&)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagent10initialiseERKNS2_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::application::theMBDagent::initialise(embot::app::application::theMBDagent::Config const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::Impl::initialise()
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_startup(embot::os::Thread*, void*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbd_mc_init()
</UL>

<P><STRONG><a name="[1df]"></a>embot::app::application::theMBDagent::getInstance()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagent11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theMBDagent::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::theMBDagent__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_startup(embot::os::Thread*, void*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbd_mc_tick(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbd_mc_init()
</UL>

<P><STRONG><a name="[119]"></a>embot::app::application::theMBDagent::onrecognisedframe(void*)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagent17onrecognisedframeEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theMBDagent::onrecognisedframe(void*) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::~basic_string__sub_object()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::char_traits&lang;char&rang;::length(char const*)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::print(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_application_thembdagent.o(.rodata._ZTVN5embot3app11application11theMBDagentE)
</UL>
<P><STRONG><a name="[11c]"></a>embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::Info const&, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo&)</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagent3getERKNS_4prot3can5motor7polling24Message_GET_CONTROL_MODE4InfoERNS7_9ReplyInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::Info const&, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo&) &rArr; embot::prot::can::motor::polling::tostring(embot::prot::can::motor::polling::MotIndex) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::~basic_string__sub_object()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::print(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::insert(unsigned int, char const*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::tostring(embot::prot::can::motor::polling::MotIndex)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_application_thembdagent.o(.rodata._ZTVN5embot3app11application11theMBDagentE)
</UL>
<P><STRONG><a name="[11b]"></a>embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Info const&)</STRONG> (Thumb, 192 bytes, Stack size 96 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagent3getERKNS_4prot3can5motor7polling24Message_SET_CONTROL_MODE4InfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Info const&) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*, unsigned int) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__grow_by_and_replace(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char const*) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::~basic_string__sub_object()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::print(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::insert(unsigned int, char const*)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::tostring(embot::prot::can::motor::polling::MotIndex)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::tostring(embot::prot::can::motor::polling::ControlMode)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_application_thembdagent.o(.rodata._ZTVN5embot3app11application11theMBDagentE)
</UL>
<P><STRONG><a name="[11a]"></a>embot::app::application::theMBDagent::get(embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Info const&)</STRONG> (Thumb, 314 bytes, Stack size 136 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagent3getERKNS_4prot3can5motor8periodic33Message_EMSTO2FOC_DESIRED_CURRENT4InfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theMBDagent::get(embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Info const&) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*, unsigned int) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__grow_by_and_replace(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char const*) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::~basic_string__sub_object()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::print(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::insert(unsigned int, char const*)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::to_string(int)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_application_thembdagent.o(.rodata._ZTVN5embot3app11application11theMBDagentE)
</UL>
<P><STRONG><a name="[34c]"></a>embot::app::application::theMBDagent::Impl::initialise()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagent4Impl10initialiseEv))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::initialise(embot::app::application::theMBDagent::Config const&)
</UL>

<P><STRONG><a name="[354]"></a>embot::app::application::theMBDagent::Impl::Impl__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagent4ImplC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::theMBDagent()
</UL>

<P><STRONG><a name="[1e2]"></a>embot::app::application::theMBDagent::tick(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagent4tickERNSt3__26vectorINS_4prot3can5FrameENS3_9allocatorIS7_EEEE))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbd_mc_tick(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[352]"></a>embot::app::application::theMBDagent::theMBDagent()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagentC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::Impl::Impl__sub_object()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::CANagentMBD::CANagentMBD__sub_object()
</UL>

<P><STRONG><a name="[34d]"></a>embot::app::application::theMBDagent::theMBDagent__sub_object()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagentC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::app::application::theMBDagent::theMBDagent__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::getInstance()
</UL>

<P><STRONG><a name="[11e]"></a>embot::app::application::theMBDagent::~theMBDagent__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagentD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::app::application::theMBDagent::~theMBDagent__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::~theMBDagent__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_application_thembdagent.o(.rodata._ZTVN5embot3app11application11theMBDagentE)
</UL>
<P><STRONG><a name="[355]"></a>embot::app::application::theMBDagent::~theMBDagent()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagentD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::CANagentMBD::~CANagentMBD__sub_object()
</UL>

<P><STRONG><a name="[11d]"></a>embot::app::application::theMBDagent::~theMBDagent__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, embot_app_application_thembdagent.o(.text._ZN5embot3app11application11theMBDagentD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::application::theMBDagent::~theMBDagent__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::~theMBDagent__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_application_thembdagent.o(.rodata._ZTVN5embot3app11application11theMBDagentE)
</UL>
<P><STRONG><a name="[1ec]"></a>embot::app::application::theCANparserMBD::initialise(embot::app::application::theCANparserMBD::Config const&)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD10initialiseERKNS2_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = embot::app::application::theCANparserMBD::initialise(embot::app::application::theCANparserMBD::Config const&) &rArr; embot::app::application::theCANparserMBD::Impl::initialise(embot::app::application::theCANparserMBD::Config const&) &rArr; can_messaging::CAN_Decoder::init(unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::initialise(embot::app::application::theCANparserMBD::Config const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_startup(embot::os::Thread*, void*)
</UL>

<P><STRONG><a name="[1ea]"></a>embot::app::application::theCANparserMBD::getInstance()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserMBD::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::theCANparserMBD__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbd_mc_canparse(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_startup(embot::os::Thread*, void*)
</UL>

<P><STRONG><a name="[356]"></a>embot::app::application::theCANparserMBD::Impl::initialise(embot::app::application::theCANparserMBD::Config const&)</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl10initialiseERKNS2_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = embot::app::application::theCANparserMBD::Impl::initialise(embot::app::application::theCANparserMBD::Config const&) &rArr; can_messaging::CAN_Decoder::init(unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Config::isvalid() const
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::init(unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::initialise(embot::app::application::theCANparserMBD::Config const&)
</UL>

<P><STRONG><a name="[35a]"></a>embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl14legacy_processERKNS_4prot3can5FrameERNSt3__26vectorIS6_NS9_9allocatorIS6_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frameis4board(embot::prot::can::Frame const&, unsigned char)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2clas(embot::prot::can::Frame const&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::cachedCANaddress()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_ems2foc_desired_current(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_set_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[11f]"></a>embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::onrecognisedframe(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBD17onrecognisedframeEPv))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDE)
</UL>
<P><STRONG><a name="[122]"></a>embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::get(embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::Info const&, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBD3getERKNS_4prot3can5motor7polling24Message_GET_CONTROL_MODE4InfoERNS9_9ReplyInfoE))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDE)
</UL>
<P><STRONG><a name="[121]"></a>embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::get(embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Info const&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBD3getERKNS_4prot3can5motor7polling24Message_SET_CONTROL_MODE4InfoE))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDE)
</UL>
<P><STRONG><a name="[120]"></a>embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::get(embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Info const&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBD3getERKNS_4prot3can5motor8periodic33Message_EMSTO2FOC_DESIRED_CURRENT4InfoE))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDE)
</UL>
<P><STRONG><a name="[363]"></a>embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::dummyCANagentMBD__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::CANagentMBD::CANagentMBD__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[123]"></a>embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::~dummyCANagentMBD__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::~dummyCANagentMBD__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::CANagentMBD::~CANagentMBD__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application15theCANparserMBD4Impl16dummyCANagentMBDE)
</UL>
<P><STRONG><a name="[362]"></a>embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 230 bytes, Stack size 104 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl30legacy_process_get_controlmodeERKNS_4prot3can5FrameERNSt3__26vectorIS6_NS9_9allocatorIS6_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&, unsigned int)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::max_size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__vector_base_common&lang;true&rang;::__throw_length_error() const
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Frame::Frame__sub_object()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo const&)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::load(embot::prot::can::Frame const&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::cachedCANaddress()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::Message_GET_CONTROL_MODE__sub_object()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo::ReplyInfo__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[361]"></a>embot::app::application::theCANparserMBD::Impl::legacy_process_set_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 42 bytes, Stack size 64 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl30legacy_process_set_controlmodeERKNS_4prot3can5FrameERNSt3__26vectorIS6_NS9_9allocatorIS6_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = embot::app::application::theCANparserMBD::Impl::legacy_process_set_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::load(embot::prot::can::Frame const&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Message_SET_CONTROL_MODE__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[360]"></a>embot::app::application::theCANparserMBD::Impl::legacy_process_get_ems2foc_desired_current(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 42 bytes, Stack size 64 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl42legacy_process_get_ems2foc_desired_currentERKNS_4prot3can5FrameERNSt3__26vectorIS6_NS9_9allocatorIS6_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = embot::app::application::theCANparserMBD::Impl::legacy_process_get_ems2foc_desired_current(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::load(embot::prot::can::Frame const&)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Message_EMSTO2FOC_DESIRED_CURRENT__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[372]"></a>embot::app::application::theCANparserMBD::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 298 bytes, Stack size 160 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4Impl7processERKNS_4prot3can5FrameERNSt3__26vectorIS6_NS9_9allocatorIS6_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserMBD::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Frame::copyto(unsigned int&, unsigned char&, unsigned char*) const
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_RX_raw2struct::step(unsigned char const*, unsigned char const*, unsigned short const*, unsigned char const*, unsigned char*, CANClassTypes*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::step(unsigned char const*, CANClassTypes const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[374]"></a>embot::app::application::theCANparserMBD::Impl::Impl__sub_object()</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4ImplC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Frame::Frame__sub_object()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Config::Config__sub_object()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::dummyCANagentMBD__sub_object()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_RX_raw2struct::CAN_RX_raw2struct()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::CAN_Decoder()
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::theCANparserMBD()
</UL>

<P><STRONG><a name="[377]"></a>embot::app::application::theCANparserMBD::Impl::~Impl__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD4ImplD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::CANagentMBD::~CANagentMBD__sub_object()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_RX_raw2struct::~CAN_RX_raw2struct()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::~CAN_Decoder()
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::theCANparserMBD()
</UL>

<P><STRONG><a name="[1eb]"></a>embot::app::application::theCANparserMBD::Config::Config__sub_object(embot::app::application::CANagentMBD*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZN5embot3app11application15theCANparserMBD6ConfigC2EPNS1_11CANagentMBDE))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_startup(embot::os::Thread*, void*)
</UL>

<P><STRONG><a name="[376]"></a>embot::app::application::theCANparserMBD::Config::Config__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD6ConfigC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[1f7]"></a>embot::app::application::theCANparserMBD::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBD7processERKNS_4prot3can5FrameERNSt3__26vectorIS5_NS8_9allocatorIS5_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserMBD::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbd_mc_canparse(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[37a]"></a>embot::app::application::theCANparserMBD::theCANparserMBD()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBDC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::~Impl__sub_object()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[357]"></a>embot::app::application::theCANparserMBD::theCANparserMBD__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot3app11application15theCANparserMBDC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::app::application::theCANparserMBD::theCANparserMBD__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::getInstance()
</UL>

<P><STRONG><a name="[37b]"></a>embot::app::application::theCANparserBasic::initialise(embot::app::application::theCANparserBasic::Config const&)</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic10initialiseERKNS2_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserBasic::initialise(embot::app::application::theCANparserBasic::Config const&) &rArr; embot::app::theCANboardInfo::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::get(embot::app::theCANboardInfo::StoredInfo&)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const
</UL>

<P><STRONG><a name="[37d]"></a>embot::app::application::theCANparserBasic::getInstance()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserBasic::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::theCANparserBasic__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefOnEventRXcanframe(embot::os::Thread*, unsigned int, void*, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const
</UL>

<P><STRONG><a name="[37f]"></a>embot::app::application::theCANparserBasic::Impl::process_setid(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 44 bytes, Stack size 72 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic4Impl13process_setidENS_4prot3can4ClasEhRKNS5_5FrameERNSt3__26vectorIS7_NSA_9allocatorIS7_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserBasic::Impl::process_setid(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserBasic::Impl::setcanaddress(unsigned char, unsigned short) &rArr; embot::app::theCANboardInfo::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_SET_ID::Message_SET_ID__sub_object(embot::prot::can::Clas, unsigned char)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_SET_ID::reply()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_SET_ID::load(embot::prot::can::Frame const&)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::setcanaddress(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[382]"></a>embot::app::application::theCANparserBasic::Impl::setcanaddress(unsigned char, unsigned short)</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic4Impl13setcanaddressEht))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserBasic::Impl::setcanaddress(unsigned char, unsigned short) &rArr; embot::app::theCANboardInfo::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::core::binary::bit::check&lang;unsigned short&rang;(unsigned short, unsigned char)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::setfilters(embot::hw::CAN, unsigned char)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::sys::minrandom()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::sys::random()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::setCANaddress(unsigned char)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getCANaddress()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_setcanaddress(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_setid(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[388]"></a>embot::app::application::theCANparserBasic::Impl::process_bl_board_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 28 bytes, Stack size 56 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic4Impl21process_bl_board_applERKNS_4prot3can5FrameERNSt3__26vectorIS6_NS9_9allocatorIS6_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = embot::app::application::theCANparserBasic::Impl::process_bl_board_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::prot::can::bootloader::Message_BOARD::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::sys::reset()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BOARD::Message_BOARD__sub_object()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BOARD::load(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[38b]"></a>embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 224 bytes, Stack size 96 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic4Impl24process_bl_gettimeoflifeERKNS_4prot3can5FrameERNSt3__26vectorIS6_NS9_9allocatorIS6_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::now()
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&, unsigned int)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::max_size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__vector_base_common&lang;true&rang;::__throw_length_error() const
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::Message_GET_TIMEOFLIFE__sub_object()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::ReplyInfo::ReplyInfo__sub_object()
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::ReplyInfo const&)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::load(embot::prot::can::Frame const&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::cachedCANaddress()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[390]"></a>embot::app::application::theCANparserBasic::Impl::process_bl_setcanaddress(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 46 bytes, Stack size 64 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic4Impl24process_bl_setcanaddressERKNS_4prot3can5FrameERNSt3__26vectorIS6_NS9_9allocatorIS6_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserBasic::Impl::process_bl_setcanaddress(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserBasic::Impl::setcanaddress(unsigned char, unsigned short) &rArr; embot::app::theCANboardInfo::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SETCANADDRESS::Message_SETCANADDRESS__sub_object()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SETCANADDRESS::reply()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SETCANADDRESS::load(embot::prot::can::Frame const&)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::setcanaddress(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[394]"></a>embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 264 bytes, Stack size 152 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic4Impl25process_bl_broadcast_applERKNS_4prot3can5FrameERNSt3__26vectorIS6_NS9_9allocatorIS6_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&, unsigned int)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::max_size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__vector_base_common&lang;true&rang;::__throw_length_error() const
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BROADCAST::Message_BROADCAST__sub_object()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BROADCAST::ReplyInfo::ReplyInfo__sub_object()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BROADCAST::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_BROADCAST::ReplyInfo const&)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BROADCAST::load(embot::prot::can::Frame const&)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::get(embot::app::theCANboardInfo::StoredInfo&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::cachedCANaddress()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[399]"></a>embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 244 bytes, Stack size 112 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic4Impl26process_getfirmwareversionENS_4prot3can4ClasEhRKNS5_5FrameERNSt3__26vectorIS7_NSA_9allocatorIS7_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&, unsigned int)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::max_size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__vector_base_common&lang;true&rang;::__throw_length_error() const
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::Message_GET_VERSION__sub_object(embot::prot::can::Clas, unsigned char)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::ReplyInfo::ReplyInfo__sub_object()
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::shared::Message_GET_VERSION::ReplyInfo const&)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::load(embot::prot::can::Frame const&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::cachedCANaddress()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[39e]"></a>embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 292 bytes, Stack size 184 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic4Impl28process_bl_getadditionalinfoERKNS_4prot3can5FrameERNSt3__26vectorIS6_NS9_9allocatorIS6_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&, unsigned int)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::max_size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__vector_base_common&lang;true&rang;::__throw_length_error() const
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::Message_GET_ADDITIONAL_INFO__sub_object()
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::ReplyInfo const&)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::load(embot::prot::can::Frame const&)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::numberofreplies()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::get(embot::app::theCANboardInfo::StoredInfo&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::cachedCANaddress()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3a3]"></a>embot::app::application::theCANparserBasic::Impl::process_bl_setadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 78 bytes, Stack size 144 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic4Impl28process_bl_setadditionalinfoERKNS_4prot3can5FrameERNSt3__26vectorIS6_NS9_9allocatorIS6_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserBasic::Impl::process_bl_setadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::theCANboardInfo::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::Message_SET_ADDITIONAL_INFO2__sub_object()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::load(embot::prot::can::Frame const&)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::set(embot::app::theCANboardInfo::StoredInfo const&)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::get(embot::app::theCANboardInfo::StoredInfo&)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3a7]"></a>embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic4Impl7processERKNS_4prot3can5FrameERNSt3__26vectorIS6_NS9_9allocatorIS6_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::sys::reset()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frameis4board(embot::prot::can::Frame const&, unsigned char)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2clas(embot::prot::can::Frame const&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::cachedCANaddress()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_setadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_setcanaddress(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_board_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_setid(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3a8]"></a>embot::app::application::theCANparserBasic::Impl::Impl__sub_object()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic4ImplC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Frame::Frame__sub_object()
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::versionOfCANPROTOCOL::versionOfCANPROTOCOL__sub_object()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::versionOfFIRMWARE::versionOfFIRMWARE__sub_object()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Config::Config__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::theCANparserBasic()
</UL>

<P><STRONG><a name="[3a9]"></a>embot::app::application::theCANparserBasic::Config::Config__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic6ConfigC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[3ac]"></a>embot::app::application::theCANparserBasic::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasic7processERKNS_4prot3can5FrameERNSt3__26vectorIS5_NS8_9allocatorIS5_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = embot::app::application::theCANparserBasic::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefOnEventRXcanframe(embot::os::Thread*, unsigned int, void*, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const
</UL>

<P><STRONG><a name="[3ad]"></a>embot::app::application::theCANparserBasic::theCANparserBasic()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasicC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theJumper::getInstance()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[37e]"></a>embot::app::application::theCANparserBasic::theCANparserBasic__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot3app11application17theCANparserBasicC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::app::application::theCANparserBasic::theCANparserBasic__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::getInstance()
</UL>

<P><STRONG><a name="[3af]"></a>embot::app::theLEDmanager::getInstance()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZN5embot3app13theLEDmanager11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = embot::app::theLEDmanager::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::theLEDmanager__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const
</UL>

<P><STRONG><a name="[3b1]"></a>embot::app::theLEDmanager::Impl::init(embot::hw::LED)</STRONG> (Thumb, 122 bytes, Stack size 128 bytes, embot_app_theledmanager.o(.text._ZN5embot3app13theLEDmanager4Impl4initENS_2hw3LEDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = embot::app::theLEDmanager::Impl::init(embot::hw::LED) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__emplace_unique_key_args&lang;embot::hw::LED, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(embot::hw::LED const&, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::LED&rang;(embot::hw::LED)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::supported(embot::hw::LED)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::init(embot::hw::LED)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void embot::core::binary::bit::set&lang;unsigned int&rang;(unsigned int&, unsigned char)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::initialised()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__emplace_unique_key_args&lang;embot::hw::LED, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(embot::hw::LED const&, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;::~pair__sub_object()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::initialised(embot::hw::LED) const
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDhandle::~LEDhandle__sub_object()
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::aSlimPulsableLED__sub_object(embot::app::aSlimPulsableLED const&)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::aSlimPulsableLED__sub_object(embot::hw::LED)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::off()
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::init(std::initializer_list&lang;embot::hw::LED&rang; const&)
</UL>

<P><STRONG><a name="[3b7]"></a>embot::app::theLEDmanager::Impl::Impl__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, embot_app_theledmanager.o(.text._ZN5embot3app13theLEDmanager4ImplC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__tree__sub_object(std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang; const&)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aDummyLED::aDummyLED__sub_object(embot::hw::LED)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::theLEDmanager()
</UL>

<P><STRONG><a name="[3ba]"></a>embot::app::theLEDmanager::Impl::~Impl__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZN5embot3app13theLEDmanager4ImplD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::~__tree__sub_object()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDhandle::~LEDhandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::theLEDmanager()
</UL>

<P><STRONG><a name="[3bc]"></a>embot::app::theLEDmanager::init(std::initializer_list&lang;embot::hw::LED&rang; const&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, embot_app_theledmanager.o(.text._ZN5embot3app13theLEDmanager4initERKSt16initializer_listINS_2hw3LEDEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = embot::app::theLEDmanager::init(std::initializer_list&lang;embot::hw::LED&rang; const&) &rArr; embot::app::theLEDmanager::Impl::init(embot::hw::LED) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__emplace_unique_key_args&lang;embot::hw::LED, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(embot::hw::LED const&, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::init(embot::hw::LED)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const
</UL>

<P><STRONG><a name="[3bd]"></a>embot::app::theLEDmanager::theLEDmanager()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, embot_app_theledmanager.o(.text._ZN5embot3app13theLEDmanagerC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::~Impl__sub_object()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[3b0]"></a>embot::app::theLEDmanager::theLEDmanager__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, embot_app_theledmanager.o(.text._ZN5embot3app13theLEDmanagerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::app::theLEDmanager::theLEDmanager__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::getInstance()
</UL>

<P><STRONG><a name="[3be]"></a>embot::app::theApplication::getInstance()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, embot_app_theapplication.o(.text._ZN5embot3app14theApplication11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = embot::app::theApplication::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::theApplication__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&)
</UL>

<P><STRONG><a name="[3c0]"></a>embot::app::theApplication::Impl::Impl__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_app_theapplication.o(.text._ZN5embot3app14theApplication4ImplC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::Config::Config__sub_object()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::theApplication()
</UL>

<P><STRONG><a name="[3e2]"></a>embot::app::theApplication::Config::Config__sub_object(unsigned int, bool, unsigned int, embot::os::theScheduler::Behaviour const&)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, embot_app_skeleton_os_basic.o(.text._ZN5embot3app14theApplication6ConfigC2EjbjRKNS_2os12theScheduler9BehaviourE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::app::theApplication::Config::Config__sub_object(unsigned int, bool, unsigned int, embot::os::theScheduler::Behaviour const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&)
</UL>

<P><STRONG><a name="[3c1]"></a>embot::app::theApplication::Config::Config__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, embot_app_theapplication.o(.text._ZN5embot3app14theApplication6ConfigC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Behaviour::Behaviour__sub_object()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[3c2]"></a>embot::app::theApplication::execute(embot::app::theApplication::Config const&)</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, embot_app_theapplication.o(.text._ZN5embot3app14theApplication7executeERKNS1_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = embot::app::theApplication::execute(embot::app::theApplication::Config const&) &rArr; embot::os::theScheduler::start(embot::os::theScheduler::Config const&) &rArr; embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&) &rArr; embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&) &rArr; osal_base_initialise &rArr; oosiit_memory_load &rArr; rt_iit_params_init &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::flash::getpartition(embot::hw::FLASH)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::sys::relocatevectortable(unsigned int)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::getInstance()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::init(embot::os::Config const&)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Timing::Timing__sub_object(unsigned int)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Config::Config__sub_object(embot::os::theScheduler::Timing const&, embot::os::theScheduler::Behaviour const&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::start(embot::os::theScheduler::Config const&)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::Config::isvalid() const
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Config::Config__sub_object()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&)
</UL>

<P><STRONG><a name="[3c7]"></a>embot::app::theApplication::theApplication()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, embot_app_theapplication.o(.text._ZN5embot3app14theApplicationC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::Impl::Impl__sub_object()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>

<P><STRONG><a name="[3bf]"></a>embot::app::theApplication::theApplication__sub_object()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, embot_app_theapplication.o(.text._ZN5embot3app14theApplicationC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::app::theApplication::theApplication__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::getInstance()
</UL>

<P><STRONG><a name="[35b]"></a>embot::app::theCANboardInfo::getInstance()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, embot_app_thecanboardinfo.o(.text._ZN5embot3app15theCANboardInfo11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = embot::app::theCANboardInfo::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::theCANboardInfo__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::initialise(embot::app::application::theCANparserBasic::Config const&)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::can_init(embot::os::Thread*)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_setadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::setcanaddress(unsigned char, unsigned short)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[384]"></a>embot::app::theCANboardInfo::getCANaddress()</STRONG> (Thumb, 36 bytes, Stack size 64 bytes, embot_app_thecanboardinfo.o(.text._ZN5embot3app15theCANboardInfo13getCANaddressEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = embot::app::theCANboardInfo::getCANaddress() &rArr; embot::app::theCANboardInfo::get(embot::app::theCANboardInfo::StoredInfo&)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::get(embot::app::theCANboardInfo::StoredInfo&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::can_init(embot::os::Thread*)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::cachedCANaddress()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::setcanaddress(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[387]"></a>embot::app::theCANboardInfo::setCANaddress(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, embot_app_thecanboardinfo.o(.text._ZN5embot3app15theCANboardInfo13setCANaddressEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = embot::app::theCANboardInfo::setCANaddress(unsigned char) &rArr; embot::app::theCANboardInfo::set(embot::app::theCANboardInfo::StoredInfo const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::set(embot::app::theCANboardInfo::StoredInfo const&)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::get(embot::app::theCANboardInfo::StoredInfo&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::setcanaddress(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[35c]"></a>embot::app::theCANboardInfo::cachedCANaddress()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, embot_app_thecanboardinfo.o(.text._ZN5embot3app15theCANboardInfo16cachedCANaddressEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = embot::app::theCANboardInfo::cachedCANaddress() &rArr; embot::app::theCANboardInfo::getCANaddress() &rArr; embot::app::theCANboardInfo::get(embot::app::theCANboardInfo::StoredInfo&)
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getCANaddress()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[37c]"></a>embot::app::theCANboardInfo::get(embot::app::theCANboardInfo::StoredInfo&)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, embot_app_thecanboardinfo.o(.text._ZN5embot3app15theCANboardInfo3getERNS1_10StoredInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::theCANboardInfo::get(embot::app::theCANboardInfo::StoredInfo&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::initialise(embot::app::application::theCANparserBasic::Config const&)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::synch(embot::prot::can::versionOfAPPLICATION, embot::prot::can::versionOfCANPROTOCOL)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::setCANaddress(unsigned char)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getCANaddress()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_setadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3a6]"></a>embot::app::theCANboardInfo::set(embot::app::theCANboardInfo::StoredInfo const&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, embot_app_thecanboardinfo.o(.text._ZN5embot3app15theCANboardInfo3setERKNS1_10StoredInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::app::theCANboardInfo::set(embot::app::theCANboardInfo::StoredInfo const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::synch(embot::prot::can::versionOfAPPLICATION, embot::prot::can::versionOfCANPROTOCOL)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::setCANaddress(unsigned char)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_setadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3c9]"></a>embot::app::theCANboardInfo::Impl::Impl__sub_object()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, embot_app_thecanboardinfo.o(.text._ZN5embot3app15theCANboardInfo4ImplC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::flash::getpartition(embot::hw::FLASH)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::FlashStorage(unsigned int, unsigned int, unsigned long long*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::theCANboardInfo()
</UL>

<P><STRONG><a name="[3ca]"></a>embot::app::theCANboardInfo::synch(embot::prot::can::versionOfAPPLICATION, embot::prot::can::versionOfCANPROTOCOL)</STRONG> (Thumb, 174 bytes, Stack size 88 bytes, embot_app_thecanboardinfo.o(.text._ZN5embot3app15theCANboardInfo5synchENS_4prot3can20versionOfAPPLICATIONENS3_20versionOfCANPROTOCOLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = embot::app::theCANboardInfo::synch(embot::prot::can::versionOfAPPLICATION, embot::prot::can::versionOfCANPROTOCOL) &rArr; embot::app::theCANboardInfo::set(embot::app::theCANboardInfo::StoredInfo const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::set(embot::app::theCANboardInfo::StoredInfo const&)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::get(embot::app::theCANboardInfo::StoredInfo&)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::synch(embot::app::theCANboardInfo::applicationInfo const&)
</UL>

<P><STRONG><a name="[3cb]"></a>embot::app::theCANboardInfo::synch(embot::app::theCANboardInfo::applicationInfo const&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, embot_app_thecanboardinfo.o(.text._ZN5embot3app15theCANboardInfo5synchERKNS1_15applicationInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = embot::app::theCANboardInfo::synch(embot::app::theCANboardInfo::applicationInfo const&) &rArr; embot::app::theCANboardInfo::synch(embot::prot::can::versionOfAPPLICATION, embot::prot::can::versionOfCANPROTOCOL) &rArr; embot::app::theCANboardInfo::set(embot::app::theCANboardInfo::StoredInfo const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::synch(embot::prot::can::versionOfAPPLICATION, embot::prot::can::versionOfCANPROTOCOL)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::can_init(embot::os::Thread*)
</UL>

<P><STRONG><a name="[3cc]"></a>embot::app::theCANboardInfo::theCANboardInfo()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, embot_app_thecanboardinfo.o(.text._ZN5embot3app15theCANboardInfoC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[3c8]"></a>embot::app::theCANboardInfo::theCANboardInfo__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, embot_app_thecanboardinfo.o(.text._ZN5embot3app15theCANboardInfoC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::app::theCANboardInfo::theCANboardInfo__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
</UL>

<P><STRONG><a name="[9a]"></a>embot::app::aSlimPulsableLED::onexpirywave(void*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED12onexpirywaveEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::aSlimPulsableLED::onexpirywave(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED4waveEPKNS0_7LEDwaveEj)
</UL>
<P><STRONG><a name="[9b]"></a>embot::app::aSlimPulsableLED::onexpirypulse(void*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED13onexpirypulseEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::aSlimPulsableLED::onexpirypulse(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED5pulseEjj)
</UL>
<P><STRONG><a name="[126]"></a>embot::app::aSlimPulsableLED::on()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED2onEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = embot::app::aSlimPulsableLED::on() &rArr; embot::hw::led::on(embot::hw::LED) &rArr; embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State) &rArr; embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const &rArr; embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::on(embot::hw::LED)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
</UL>
<P><STRONG><a name="[127]"></a>embot::app::aSlimPulsableLED::off()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED3offEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = embot::app::aSlimPulsableLED::off() &rArr; embot::hw::led::off(embot::hw::LED) &rArr; embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State) &rArr; embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const &rArr; embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::off(embot::hw::LED)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::init(embot::hw::LED)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
</UL>
<P><STRONG><a name="[12a]"></a>embot::app::aSlimPulsableLED::stop()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = embot::app::aSlimPulsableLED::stop() &rArr; embot::os::Timer::stop() &rArr; embot::os::timertools::TMR::stop() &rArr; embot::os::rtos::timer_stop(void*) &rArr; osal_timer_stop &rArr; oosiit_advtmr_stop &rArr; isr_iit_advtmr_stop &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::stop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
</UL>
<P><STRONG><a name="[12b]"></a>embot::app::aSlimPulsableLED::wave(embot::app::LEDwave const*, unsigned int)</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED4waveEPKNS0_7LEDwaveEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = embot::app::aSlimPulsableLED::wave(embot::app::LEDwave const*, unsigned int) &rArr; embot::os::Timer::start(embot::os::Timer::Config const&, bool) &rArr; embot::os::timertools::TMR::start(embot::os::Timer::Config const&, bool) &rArr; embot::os::rtos::timer_start(void*, embot::os::rtos::timerMode, unsigned int, void (*)(void*, void*), void*) &rArr; osal_timer_start &rArr; oosiit_advtmr_start &rArr; isr_iit_advtmr_start &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Timer()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Config::Config__sub_object(unsigned int, embot::os::Action const&, embot::os::Timer::Mode, unsigned int)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::start(embot::os::Timer::Config const&, bool)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::thread() const
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::getInstance()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::Action__sub_object(embot::os::CallbackToThread const&)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackToThread::CallbackToThread__sub_object(void (*)(void*), void*, embot::os::Thread*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
</UL>
<P><STRONG><a name="[129]"></a>embot::app::aSlimPulsableLED::pulse(unsigned int, unsigned int)</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED5pulseEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = embot::app::aSlimPulsableLED::pulse(unsigned int, unsigned int) &rArr; embot::os::Timer::start(embot::os::Timer::Config const&, bool) &rArr; embot::os::timertools::TMR::start(embot::os::Timer::Config const&, bool) &rArr; embot::os::rtos::timer_start(void*, embot::os::rtos::timerMode, unsigned int, void (*)(void*, void*), void*) &rArr; osal_timer_start &rArr; oosiit_advtmr_start &rArr; isr_iit_advtmr_start &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Timer()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Config::Config__sub_object(unsigned int, embot::os::Action const&, embot::os::Timer::Mode, unsigned int)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::start(embot::os::Timer::Config const&, bool)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::stop()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::thread() const
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::getInstance()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::Action__sub_object(embot::os::CallbackToThread const&)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackToThread::CallbackToThread__sub_object(void (*)(void*), void*, embot::os::Thread*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
</UL>
<P><STRONG><a name="[128]"></a>embot::app::aSlimPulsableLED::toggle()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLED6toggleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = embot::app::aSlimPulsableLED::toggle() &rArr; embot::hw::led::toggle(embot::hw::LED) &rArr; embot::hw::gpio::toggle(embot::hw::GPIO const&) &rArr; embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const &rArr; embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::toggle(embot::hw::LED)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
</UL>
<P><STRONG><a name="[3b3]"></a>embot::app::aSlimPulsableLED::aSlimPulsableLED__sub_object(embot::hw::LED)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLEDC2ENS_2hw3LEDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::app::aSlimPulsableLED::aSlimPulsableLED__sub_object(embot::hw::LED)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDhandle::LEDhandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::init(embot::hw::LED)
</UL>

<P><STRONG><a name="[3b4]"></a>embot::app::aSlimPulsableLED::aSlimPulsableLED__sub_object(embot::app::aSlimPulsableLED const&)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLEDC2ERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::app::aSlimPulsableLED::aSlimPulsableLED__sub_object(embot::app::aSlimPulsableLED const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDhandle::LEDhandle__sub_object(embot::app::LEDhandle const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::init(embot::hw::LED)
</UL>

<P><STRONG><a name="[12d]"></a>embot::app::aSlimPulsableLED::~aSlimPulsableLED__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZN5embot3app16aSlimPulsableLEDD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::app::aSlimPulsableLED::~aSlimPulsableLED__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDhandle::~LEDhandle__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
</UL>
<P><STRONG><a name="[3d1]"></a>embot::app::LEDwave::LEDwave__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZN5embot3app7LEDwaveC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDwaveT&lang;(unsigned short)64&rang;::LEDwaveT__sub_object(unsigned int, unsigned short, std::__2::bitset&lang;64u&rang;, unsigned short)
</UL>

<P><STRONG><a name="[12f]"></a>embot::app::LEDwave::~LEDwave__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZN5embot3app7LEDwaveD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app7LEDwaveE)
</UL>
<P><STRONG><a name="[12e]"></a>embot::app::LEDwave::~LEDwave__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZN5embot3app7LEDwaveD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDwaveT&lang;(unsigned short)64&rang;::~LEDwaveT__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app7LEDwaveE)
</UL>
<P><STRONG><a name="[132]"></a>embot::app::LEDwaveT&lang;(unsigned short)64&rang;::tick()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5embot3app8LEDwaveTILt64EE4tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::LEDwaveT&lang;(unsigned short)64&rang;::tick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8LEDwaveTILt64EEE)
</UL>
<P><STRONG><a name="[3d0]"></a>embot::app::LEDwaveT&lang;(unsigned short)64&rang;::LEDwaveT__sub_object(unsigned int, unsigned short, std::__2::bitset&lang;64u&rang;, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, amcbldc-main.o(.text._ZN5embot3app8LEDwaveTILt64EEC2EjtNSt3__26bitsetILj64EEEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::app::LEDwaveT&lang;(unsigned short)64&rang;::LEDwaveT__sub_object(unsigned int, unsigned short, std::__2::bitset&lang;64u&rang;, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDwave::LEDwave__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDwaveT&lang;(unsigned short)64&rang;::duplicate(void*, unsigned int) const
</UL>

<P><STRONG><a name="[135]"></a>embot::app::LEDwaveT&lang;(unsigned short)64&rang;::~LEDwaveT__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5embot3app8LEDwaveTILt64EED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = embot::app::LEDwaveT&lang;(unsigned short)64&rang;::~LEDwaveT__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDwaveT&lang;(unsigned short)64&rang;::~LEDwaveT__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8LEDwaveTILt64EEE)
</UL>
<P><STRONG><a name="[134]"></a>embot::app::LEDwaveT&lang;(unsigned short)64&rang;::~LEDwaveT__sub_object()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, amcbldc-main.o(.text._ZN5embot3app8LEDwaveTILt64EED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = embot::app::LEDwaveT&lang;(unsigned short)64&rang;::~LEDwaveT__sub_object() &rArr; void std::__2::__fill_n_false&lang;std::__2::__bitset&lang;2u, 64u&rang; &rang;(std::__2::__bit_iterator&lang;std::__2::__bitset&lang;2u, 64u&rang;, false, 0&rang;, std::__2::__bitset&lang;2u, 64u&rang;::size_type)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__fill_n_false&lang;std::__2::__bitset&lang;2u, 64u&rang; &rang;(std::__2::__bit_iterator&lang;std::__2::__bitset&lang;2u, 64u&rang;, false, 0&rang;, std::__2::__bitset&lang;2u, 64u&rang;::size_type)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDwave::~LEDwave__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDwaveT&lang;(unsigned short)64&rang;::~LEDwaveT__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8LEDwaveTILt64EEE)
</UL>
<P><STRONG><a name="[3d3]"></a>embot::app::skeleton::os::evthreadcan::can_enable(embot::os::Thread*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan10can_enableEPNS_2os6ThreadE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = embot::app::skeleton::os::evthreadcan::can_enable(embot::os::Thread*) &rArr; embot::hw::can::enable(embot::hw::CAN) &rArr; embot::hw::can::tx_IRQdisable(embot::hw::CAN) &rArr; HAL_FDCAN_DeactivateNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::enable(embot::hw::CAN)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::eventbasedthread_startup(embot::os::Thread*, void*)
</UL>

<P><STRONG><a name="[404]"></a>embot::app::skeleton::os::evthreadcan::evThreadCAN::evThreadCAN__sub_object(embot::app::skeleton::os::evthreadcan::evtConfig const&, embot::app::skeleton::os::evthreadcan::canConfig const&, embot::app::theCANboardInfo::applicationInfo const&)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5embot3app8skeleton2os11evthreadcan11evThreadCANC2ERKNS3_9evtConfigERKNS3_9canConfigERKNS0_15theCANboardInfo15applicationInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::skeleton::os::evthreadcan::evThreadCAN::evThreadCAN__sub_object(embot::app::skeleton::os::evthreadcan::evtConfig const&, embot::app::skeleton::os::evthreadcan::canConfig const&, embot::app::theCANboardInfo::applicationInfo const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::myEVT__sub_object(embot::app::skeleton::os::evthreadcan::evtConfig const&, embot::app::skeleton::os::evthreadcan::canConfig const&, embot::app::theCANboardInfo::applicationInfo const&)
</UL>

<P><STRONG><a name="[136]"></a>embot::app::skeleton::os::evthreadcan::evThreadCAN::~evThreadCAN__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5embot3app8skeleton2os11evthreadcan11evThreadCAND0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::app::skeleton::os::evthreadcan::evThreadCAN::~evThreadCAN__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::evThreadCAN::~evThreadCAN__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan11evThreadCANE)
</UL>
<P><STRONG><a name="[c7]"></a>embot::app::skeleton::os::evthreadcan::evThreadCAN::~evThreadCAN__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZN5embot3app8skeleton2os11evthreadcan11evThreadCAND2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::~myEVT__deallocating()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::evThreadCAN::~evThreadCAN__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> amcbldc-main.o(.rodata._ZTV5myEVT)
<LI> amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan11evThreadCANE)
</UL>
<P><STRONG><a name="[3d4]"></a>embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::SYSTEMevtcan__sub_object(embot::app::skeleton::os::basic::sysConfig const&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanC2ERKNS2_5basic9sysConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::SYSTEMevtcan__sub_object(embot::app::skeleton::os::basic::sysConfig const&) &rArr; embot::app::skeleton::os::basic::SYSTEM::SYSTEM__sub_object(embot::app::skeleton::os::basic::sysConfig const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::SYSTEM::SYSTEM__sub_object(embot::app::skeleton::os::basic::sysConfig const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::mySYS__sub_object(embot::app::skeleton::os::basic::sysConfig const&)
</UL>

<P><STRONG><a name="[13b]"></a>embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::~SYSTEMevtcan__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::~SYSTEMevtcan__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::SYSTEM::~SYSTEM__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_skeleton_os_evthreadcan.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanE)
</UL>
<P><STRONG><a name="[3d6]"></a>embot::app::skeleton::os::evthreadcan::start_evt_based()</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan15start_evt_basedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = embot::app::skeleton::os::evthreadcan::start_evt_based() &rArr; embot::os::EventThread::start(embot::os::EventThread::Config const&, void (*)(void*)) &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::EventThread()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Config::Config__sub_object(unsigned short, embot::os::Priority, void (*)(embot::os::Thread*, void*), void*, unsigned int, void (*)(embot::os::Thread*, unsigned int, void*), char const*)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::start(embot::os::EventThread::Config const&, void (*)(void*))
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::userdefInit(void*) const
</UL>

<P><STRONG><a name="[41a]"></a>embot::app::skeleton::os::evthreadcan::start_usr_services(embot::os::EventThread*, void*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan18start_usr_servicesEPNS_2os11EventThreadEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::skeleton::os::evthreadcan::start_usr_services(embot::os::EventThread*, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::userdefInit(void*) const
</UL>

<P><STRONG><a name="[9f]"></a>embot::app::skeleton::os::evthreadcan::alerteventbasedthread(void*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan21alerteventbasedthreadEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::skeleton::os::evthreadcan::alerteventbasedthread(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan8can_initEPNS_2os6ThreadE)
</UL>
<P><STRONG><a name="[9c]"></a>embot::app::skeleton::os::evthreadcan::eventbasedthread_onevent(embot::os::Thread*, unsigned int, void*)</STRONG> (Thumb, 258 bytes, Stack size 80 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan24eventbasedthread_oneventEPNS_2os6ThreadEjPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = embot::app::skeleton::os::evthreadcan::eventbasedthread_onevent(embot::os::Thread*, unsigned int, void*) &rArr; embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&) &rArr; std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::transmit(embot::hw::CAN)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::Frame::Frame__sub_object()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::get(embot::hw::CAN, embot::hw::can::Frame&, unsigned char&)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::core::binary::mask::check&lang;unsigned int&rang;(unsigned int, unsigned int, unsigned char)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Frame::Frame__sub_object(unsigned int, unsigned char, unsigned char*)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::Frame::Frame__sub_object(unsigned int, unsigned char, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan15start_evt_basedEv)
</UL>
<P><STRONG><a name="[9d]"></a>embot::app::skeleton::os::evthreadcan::eventbasedthread_startup(embot::os::Thread*, void*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan24eventbasedthread_startupEPNS_2os6ThreadEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::app::skeleton::os::evthreadcan::eventbasedthread_startup(embot::os::Thread*, void*) &rArr; embot::app::skeleton::os::evthreadcan::can_enable(embot::os::Thread*) &rArr; embot::hw::can::enable(embot::hw::CAN) &rArr; embot::hw::can::tx_IRQdisable(embot::hw::CAN) &rArr; HAL_FDCAN_DeactivateNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::can_enable(embot::os::Thread*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan15start_evt_basedEv)
</UL>
<P><STRONG><a name="[3d8]"></a>embot::app::skeleton::os::evthreadcan::run(embot::app::skeleton::os::evthreadcan::CFG const&)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan3runERKNS3_3CFGE))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = embot::app::skeleton::os::evthreadcan::run(embot::app::skeleton::os::evthreadcan::CFG const&) &rArr; embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&) &rArr; embot::app::theApplication::execute(embot::app::theApplication::Config const&) &rArr; embot::os::theScheduler::start(embot::os::theScheduler::Config const&) &rArr; embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&) &rArr; embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&) &rArr; osal_base_initialise &rArr; oosiit_memory_load &rArr; rt_iit_params_init &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::CFG::isvalid() const
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::CFG::CFG__sub_object(embot::app::skeleton::os::basic::SYSTEM const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3dc]"></a>embot::app::skeleton::os::evthreadcan::can_init(embot::os::Thread*)</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os11evthreadcan8can_initEPNS_2os6ThreadE))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = embot::app::skeleton::os::evthreadcan::can_init(embot::os::Thread*) &rArr; embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&) &rArr; std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::reserve(unsigned int) &rArr; std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::setfilters(embot::hw::CAN, unsigned char)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::reserve(unsigned int)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::Callback__sub_object(void (*)(void*), void*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::synch(embot::app::theCANboardInfo::applicationInfo const&)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::Config::Config__sub_object()
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getCANaddress()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::userdefInit(void*) const
</UL>

<P><STRONG><a name="[440]"></a>embot::app::skeleton::os::evthreadcan::evtConfig::evtConfig__sub_object(unsigned short, void*, unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZN5embot3app8skeleton2os11evthreadcan9evtConfigC2EtPvj))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[3dd]"></a>embot::app::skeleton::os::basic::start_sys_services()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic18start_sys_servicesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = embot::app::skeleton::os::basic::start_sys_services() &rArr; embot::os::theCallbackManager::start(embot::os::theCallbackManager::Config const&) &rArr; embot::os::CallbackThread::start(embot::os::CallbackThread::Config const&, void (*)(void*)) &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::start(embot::os::theTimerManager::Config const&)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::getInstance()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::start(embot::os::theCallbackManager::Config const&)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::getInstance()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::Config::isvalid() const
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::Config::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::init(embot::os::Thread*, void*)
</UL>

<P><STRONG><a name="[3da]"></a>embot::app::skeleton::os::basic::CFG::CFG__sub_object(embot::app::skeleton::os::basic::SYSTEM const*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot3app8skeleton2os5basic3CFGC2EPKNS3_6SYSTEME))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::run(embot::app::skeleton::os::evthreadcan::CFG const&)
</UL>

<P><STRONG><a name="[3db]"></a>embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&)</STRONG> (Thumb, 156 bytes, Stack size 152 bytes, embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic3runERKNS3_3CFGE))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&) &rArr; embot::app::theApplication::execute(embot::app::theApplication::Config const&) &rArr; embot::os::theScheduler::start(embot::os::theScheduler::Config const&) &rArr; embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&) &rArr; embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&) &rArr; osal_base_initialise &rArr; oosiit_memory_load &rArr; rt_iit_params_init &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Behaviour::Behaviour__sub_object(embot::os::InitThread::Config const&, embot::os::IdleThread::Config const&, embot::core::Callback const&)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::CFG::isvalid() const
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::execute(embot::app::theApplication::Config const&)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::Config::Config__sub_object(unsigned int, bool, unsigned int, embot::os::theScheduler::Behaviour const&)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::getInstance()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::Config::Config__sub_object(unsigned short, void (*)(embot::os::Thread*, void*), void*)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::Config::Config__sub_object(unsigned short, void (*)(embot::os::Thread*, void*), void*, void (*)(embot::os::Thread*, void*))
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::Callback__sub_object(void (*)(void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::run(embot::app::skeleton::os::evthreadcan::CFG const&)
</UL>

<P><STRONG><a name="[a0]"></a>embot::app::skeleton::os::basic::init(embot::os::Thread*, void*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic4initEPNS_2os6ThreadEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = embot::app::skeleton::os::basic::init(embot::os::Thread*, void*) &rArr; embot::app::skeleton::os::basic::start_sys_services() &rArr; embot::os::theCallbackManager::start(embot::os::theCallbackManager::Config const&) &rArr; embot::os::CallbackThread::start(embot::os::CallbackThread::Config const&, void (*)(void*)) &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::start_sys_services()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic3runERKNS3_3CFGE)
</UL>
<P><STRONG><a name="[3d5]"></a>embot::app::skeleton::os::basic::SYSTEM::SYSTEM__sub_object(embot::app::skeleton::os::basic::sysConfig const&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, amcbldc-main.o(.text._ZN5embot3app8skeleton2os5basic6SYSTEMC2ERKNS3_9sysConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::app::skeleton::os::basic::SYSTEM::SYSTEM__sub_object(embot::app::skeleton::os::basic::sysConfig const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::SYSTEMevtcan__sub_object(embot::app::skeleton::os::basic::sysConfig const&)
</UL>

<P><STRONG><a name="[13f]"></a>embot::app::skeleton::os::basic::SYSTEM::~SYSTEM__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5embot3app8skeleton2os5basic6SYSTEMD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::app::skeleton::os::basic::SYSTEM::~SYSTEM__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::SYSTEM::~SYSTEM__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os5basic6SYSTEME)
</UL>
<P><STRONG><a name="[cd]"></a>embot::app::skeleton::os::basic::SYSTEM::~SYSTEM__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZN5embot3app8skeleton2os5basic6SYSTEMD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::~mySYS__deallocating()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::SYSTEM::~SYSTEM__deallocating()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::~SYSTEMevtcan__deallocating()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> amcbldc-main.o(.rodata._ZTV5mySYS)
<LI> amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os5basic6SYSTEME)
<LI> embot_app_skeleton_os_evthreadcan.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanE)
</UL>
<P><STRONG><a name="[a1]"></a>embot::app::skeleton::os::basic::onidle(embot::os::Thread*, void*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic6onidleEPNS_2os6ThreadEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::skeleton::os::basic::onidle(embot::os::Thread*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic3runERKNS3_3CFGE)
</UL>
<P><STRONG><a name="[a2]"></a>embot::app::skeleton::os::basic::onerror(void*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic7onerrorEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::skeleton::os::basic::onerror(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_skeleton_os_basic.o(.text._ZN5embot3app8skeleton2os5basic3runERKNS3_3CFGE)
</UL>
<P><STRONG><a name="[43e]"></a>embot::app::skeleton::os::basic::sysConfig::sysConfig__sub_object(unsigned short, void*, unsigned short, void*, void*, embot::os::theTimerManager::Config const&, embot::os::theCallbackManager::Config const&, unsigned int)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5embot3app8skeleton2os5basic9sysConfigC2EtPvtS5_S5_RKNS_2os15theTimerManager6ConfigERKNS6_18theCallbackManager6ConfigEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::skeleton::os::basic::sysConfig::sysConfig__sub_object(unsigned short, void*, unsigned short, void*, void*, embot::os::theTimerManager::Config const&, embot::os::theCallbackManager::Config const&, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[3cf]"></a>embot::app::LEDhandle::LEDhandle__sub_object(embot::app::LEDhandle const&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZN5embot3app9LEDhandleC2ERKS1_))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::aSlimPulsableLED__sub_object(embot::app::aSlimPulsableLED const&)
</UL>

<P><STRONG><a name="[3ce]"></a>embot::app::LEDhandle::LEDhandle__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZN5embot3app9LEDhandleC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aDummyLED::aDummyLED__sub_object(embot::hw::LED)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::aSlimPulsableLED__sub_object(embot::hw::LED)
</UL>

<P><STRONG><a name="[143]"></a>embot::app::LEDhandle::~LEDhandle__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZN5embot3app9LEDhandleD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app9LEDhandleE)
</UL>
<P><STRONG><a name="[12c]"></a>embot::app::LEDhandle::~LEDhandle__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZN5embot3app9LEDhandleD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;::~pair__sub_object()
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang;::~pair__sub_object()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aDummyLED::~aDummyLED__deallocating()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::~aSlimPulsableLED__deallocating()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::~Impl__sub_object()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::init(embot::hw::LED)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
<LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app9LEDhandleE)
<LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
</UL>
<P><STRONG><a name="[146]"></a>embot::app::aDummyLED::on()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLED2onEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
</UL>
<P><STRONG><a name="[147]"></a>embot::app::aDummyLED::off()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLED3offEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
</UL>
<P><STRONG><a name="[14a]"></a>embot::app::aDummyLED::stop()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLED4stopEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
</UL>
<P><STRONG><a name="[14b]"></a>embot::app::aDummyLED::wave(embot::app::LEDwave const*, unsigned int)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLED4waveEPKNS0_7LEDwaveEj))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
</UL>
<P><STRONG><a name="[149]"></a>embot::app::aDummyLED::pulse(unsigned int, unsigned int)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLED5pulseEjj))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
</UL>
<P><STRONG><a name="[148]"></a>embot::app::aDummyLED::toggle()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLED6toggleEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
</UL>
<P><STRONG><a name="[3b9]"></a>embot::app::aDummyLED::aDummyLED__sub_object(embot::hw::LED)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLEDC2ENS_2hw3LEDE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDhandle::LEDhandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[14c]"></a>embot::app::aDummyLED::~aDummyLED__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZN5embot3app9aDummyLEDD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::app::aDummyLED::~aDummyLED__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDhandle::~LEDhandle__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
</UL>
<P><STRONG><a name="[3ae]"></a>embot::app::theJumper::getInstance()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, embot_app_thejumper.o(.text._ZN5embot3app9theJumper11getInstanceEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theJumper::theJumper__sub_object()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::theCANparserBasic()
</UL>

<P><STRONG><a name="[3e5]"></a>embot::app::theJumper::Impl::reset()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_app_thejumper.o(.text._ZN5embot3app9theJumper4Impl5resetEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theJumper::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[3e4]"></a>embot::app::theJumper::Impl::Impl__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_app_thejumper.o(.text._ZN5embot3app9theJumper4ImplC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theJumper::Impl::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theJumper::theJumper()
</UL>

<P><STRONG><a name="[3e6]"></a>embot::app::theJumper::theJumper()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, embot_app_thejumper.o(.text._ZN5embot3app9theJumperC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theJumper::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[3e3]"></a>embot::app::theJumper::theJumper__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, embot_app_thejumper.o(.text._ZN5embot3app9theJumperC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theJumper::getInstance()
</UL>

<P><STRONG><a name="[292]"></a>embot::core::TimeConfig::TimeConfig__sub_object(void (*)(), unsigned long long (*)())</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_hw.o(.text._ZN5embot4core10TimeConfigC2EPFvvEPFyvE))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Config::Config__sub_object(embot::core::TimeConfig const&, embot::core::PrintConfig const&)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::init(embot::hw::Config const&)
</UL>

<P><STRONG><a name="[237]"></a>auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_hw_can.o(.text._ZN5embot4core10tointegralINS_2hw3CANEEEDaT_))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::BSP::getPROP(embot::hw::CAN) const
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::hw::bsp::SUPP::supported&lang;embot::hw::CAN&rang;(embot::hw::CAN) const
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::get(embot::hw::CAN, embot::hw::can::Frame&, unsigned char&)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::initialised(embot::hw::CAN)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::setfilters(embot::hw::CAN, unsigned char)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_oneframehasgone(embot::hw::CAN, __FDCAN_HandleTypeDef*)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQdisable(embot::hw::CAN)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::RX_IRQdisable(embot::hw::CAN)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQresume(embot::hw::CAN, bool)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQenable(embot::hw::CAN)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::RX_IRQenable(embot::hw::CAN)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_start(embot::hw::CAN)
</UL>

<P><STRONG><a name="[26b]"></a>auto embot::core::tointegral&lang;embot::hw::LED&rang;(embot::hw::LED)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_hw_led.o(.text._ZN5embot4core10tointegralINS_2hw3LEDEEEDaT_))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::BSP::getPROP(embot::hw::LED) const
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::hw::bsp::SUPP::supported&lang;embot::hw::LED&rang;(embot::hw::LED) const
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::init(embot::hw::LED)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::initialised(embot::hw::LED)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::initialised(embot::hw::LED) const
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::init(embot::hw::LED)
</UL>

<P><STRONG><a name="[40d]"></a>auto embot::core::tointegral&lang;embot::hw::GPIO::PIN&rang;(embot::hw::GPIO::PIN)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_hw_gpio.o(.text._ZN5embot4core10tointegralINS_2hw4GPIO3PINEEEDaT_))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const
</UL>

<P><STRONG><a name="[40c]"></a>auto embot::core::tointegral&lang;embot::hw::GPIO::PORT&rang;(embot::hw::GPIO::PORT)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_hw_gpio.o(.text._ZN5embot4core10tointegralINS_2hw4GPIO4PORTEEEDaT_))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const
</UL>

<P><STRONG><a name="[280]"></a>auto embot::core::tointegral&lang;embot::hw::gpio::Mode&rang;(embot::hw::gpio::Mode)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_hw_gpio.o(.text._ZN5embot4core10tointegralINS_2hw4gpio4ModeEEEDaT_))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_convert_to_stm32mode(embot::hw::gpio::Mode)
</UL>

<P><STRONG><a name="[281]"></a>auto embot::core::tointegral&lang;embot::hw::gpio::Pull&rang;(embot::hw::gpio::Pull)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_hw_gpio.o(.text._ZN5embot4core10tointegralINS_2hw4gpio4PullEEEDaT_))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_convert_to_stm32pull(embot::hw::gpio::Pull)
</UL>

<P><STRONG><a name="[282]"></a>auto embot::core::tointegral&lang;embot::hw::gpio::Speed&rang;(embot::hw::gpio::Speed)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_hw_gpio.o(.text._ZN5embot4core10tointegralINS_2hw4gpio5SpeedEEEDaT_))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_convert_to_stm32speed(embot::hw::gpio::Speed)
</UL>

<P><STRONG><a name="[409]"></a>auto embot::core::tointegral&lang;embot::hw::FLASH&rang;(embot::hw::FLASH)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_hw_flashburner.o(.text._ZN5embot4core10tointegralINS_2hw5FLASHEEEDaT_))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::flash::BSP::getPROP(embot::hw::FLASH) const
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::hw::bsp::SUPP::supported&lang;embot::hw::FLASH&rang;(embot::hw::FLASH) const
</UL>

<P><STRONG><a name="[2c7]"></a>auto embot::core::tointegral&lang;embot::os::Priority&rang;(embot::os::Priority)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZN5embot4core10tointegralINS_2os8PriorityEEEDaT_))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::start(embot::os::EventThread::Config const&, void (*)(void*))
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_setpriority(void*, embot::os::Priority)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::start(embot::os::CallbackThread::Config const&, void (*)(void*))
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::setPriority(embot::os::Priority)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::start(embot::os::MessageThread::Config const&, void (*)(void*))
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::setPriority(embot::os::Priority)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::setPriority(embot::os::Priority)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::priority::isSystem(embot::os::Priority)
</UL>

<P><STRONG><a name="[3ff]"></a>auto embot::core::tointegral&lang;embot::prot::can::motor::polling::ControlMode&rang;(embot::prot::can::motor::polling::ControlMode)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_prot_can_motor_polling.o(.text._ZN5embot4core10tointegralINS_4prot3can5motor7polling11ControlModeEEEDaT_))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::convert(embot::prot::can::motor::polling::ControlMode)
</UL>

<P><STRONG><a name="[400]"></a>auto embot::core::tointegral&lang;embot::prot::can::motor::polling::MotIndex&rang;(embot::prot::can::motor::polling::MotIndex)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_prot_can_motor_polling.o(.text._ZN5embot4core10tointegralINS_4prot3can5motor7polling8MotIndexEEEDaT_))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::convert(embot::prot::can::motor::polling::MotIndex)
</UL>

<P><STRONG><a name="[293]"></a>embot::core::PrintConfig::PrintConfig__sub_object(int (*)(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&))</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_hw.o(.text._ZN5embot4core11PrintConfigC2EPFiRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::init(embot::hw::Config const&)
</UL>

<P><STRONG><a name="[3e7]"></a>embot::core::initialised()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, embot_core.o(.text._ZN5embot4core11initialisedEv))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::init(embot::core::Config const&)
</UL>

<P><STRONG><a name="[233]"></a>embot::core::now()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_core.o(.text._ZN5embot4core3nowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::core::now()
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::bsp::_get1millitick()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[295]"></a>embot::core::init(embot::core::Config const&)</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, embot_core.o(.text._ZN5embot4core4initERKNS0_6ConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::core::init(embot::core::Config const&) &rArr; embot::core::Config::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Config::isvalid() const
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::initialised()
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::init(embot::hw::Config const&)
</UL>

<P><STRONG><a name="[21c]"></a>embot::core::print(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, embot_core.o(.text._ZN5embot4core5printERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::core::print(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_pre_main_t::on_fatal(void*, osal_fatalerror_t, char const*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::osOnError(void*, int, char const*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Info const&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Info const&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::Info const&, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo&)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::onrecognisedframe(void*)
</UL>

<P><STRONG><a name="[22b]"></a>embot::core::utils::Storage::Storage__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_hw_flashstorage.o(.text._ZN5embot4core5utils7StorageC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::FlashStorage(unsigned int, unsigned int, unsigned long long*)
</UL>

<P><STRONG><a name="[14e]"></a>embot::core::utils::Storage::~Storage__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_hw_flashstorage.o(.text._ZN5embot4core5utils7StorageD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_flashstorage.o(.rodata._ZTVN5embot4core5utils7StorageE)
</UL>
<P><STRONG><a name="[14d]"></a>embot::core::utils::Storage::~Storage__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_hw_flashstorage.o(.text._ZN5embot4core5utils7StorageD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::~FlashStorage()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_flashstorage.o(.rodata._ZTVN5embot4core5utils7StorageE)
</UL>
<P><STRONG><a name="[294]"></a>embot::core::Config::Config__sub_object(embot::core::TimeConfig const&, embot::core::PrintConfig const&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_hw.o(.text._ZN5embot4core6ConfigC2ERKNS0_10TimeConfigERKNS0_11PrintConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::core::Config::Config__sub_object(embot::core::TimeConfig const&, embot::core::PrintConfig const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::TimeConfig::TimeConfig__sub_object(void (*)(), unsigned long long (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::init(embot::hw::Config const&)
</UL>

<P><STRONG><a name="[3f3]"></a>void embot::core::binary::bit::set&lang;unsigned char&rang;(unsigned char&, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_prot_can_skin_periodic.o(.text._ZN5embot4core6binary3bit3setIhEEvRT_h))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::load(embot::prot::can::Frame const&)
</UL>

<P><STRONG><a name="[25b]"></a>void embot::core::binary::bit::set&lang;unsigned int&rang;(unsigned int&, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_hw_can.o(.text._ZN5embot4core6binary3bit3setIjEEvRT_h))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::init(embot::hw::LED)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::init(embot::hw::LED)
</UL>

<P><STRONG><a name="[23a]"></a>bool embot::core::binary::bit::check&lang;unsigned int&rang;(unsigned int, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_hw_flashburner.o(.text._ZN5embot4core6binary3bit5checkIjEEbT_h))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::hw::bsp::SUPP::supported&lang;embot::hw::LED&rang;(embot::hw::LED) const
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::initialised(embot::hw::LED)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::hw::bsp::SUPP::supported&lang;embot::hw::CAN&rang;(embot::hw::CAN) const
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::initialised(embot::hw::CAN)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::hw::bsp::SUPP::supported&lang;embot::hw::FLASH&rang;(embot::hw::FLASH) const
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::initialised(embot::hw::LED) const
</UL>

<P><STRONG><a name="[386]"></a>bool embot::core::binary::bit::check&lang;unsigned short&rang;(unsigned short, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_hw_gpio.o(.text._ZN5embot4core6binary3bit5checkItEEbT_h))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::setcanaddress(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[1e3]"></a>bool embot::core::binary::mask::check&lang;unsigned int&rang;(unsigned int, unsigned int, unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZN5embot4core6binary4mask5checkIjEEbT_S4_h))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_onevent(embot::os::Thread*, unsigned int, void*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::eventbasedthread_onevent(embot::os::Thread*, unsigned int, void*)
</UL>

<P><STRONG><a name="[25e]"></a>embot::core::Callback::Callback__sub_object(void (*)(void*), void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot4core8CallbackC2EPFvPvES2_))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::can_init(embot::os::Thread*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::Config::Config__sub_object()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackToThread::CallbackToThread__sub_object(void (*)(void*), void*, embot::os::Thread*)
</UL>

<P><STRONG><a name="[29c]"></a>embot::core::Callback::Callback__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_hw_motor.o(.text._ZN5embot4core8CallbackC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Behaviour::Behaviour__sub_object()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::os_callbackdriven_loop(void*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::motor::TBDef::TBDef__sub_object()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Config::Config__sub_object()
</UL>

<P><STRONG><a name="[3eb]"></a>embot::prot::can::bootloader::Message_BOARD::Info::Info__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader13Message_BOARD4InfoC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BOARD::Message_BOARD__sub_object()
</UL>

<P><STRONG><a name="[38a]"></a>embot::prot::can::bootloader::Message_BOARD::load(embot::prot::can::Frame const&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, embot_prot_can_bootloader.o(.text._ZN5embot4prot3can10bootloader13Message_BOARD4loadERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::prot::can::bootloader::Message_BOARD::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_board_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[389]"></a>embot::prot::can::bootloader::Message_BOARD::Message_BOARD__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader13Message_BOARDC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::bootloader::Message_BOARD::Message_BOARD__sub_object() &rArr; embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::Message__sub_object()
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BOARD::Info::Info__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_board_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3ef]"></a>embot::prot::can::bootloader::Message_BROADCAST::Info::Info__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader17Message_BROADCAST4InfoC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BROADCAST::Message_BROADCAST__sub_object()
</UL>

<P><STRONG><a name="[396]"></a>embot::prot::can::bootloader::Message_BROADCAST::load(embot::prot::can::Frame const&)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, embot_prot_can_bootloader.o(.text._ZN5embot4prot3can10bootloader17Message_BROADCAST4loadERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = embot::prot::can::bootloader::Message_BROADCAST::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[398]"></a>embot::prot::can::bootloader::Message_BROADCAST::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_BROADCAST::ReplyInfo const&)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, embot_prot_can_bootloader.o(.text._ZN5embot4prot3can10bootloader17Message_BROADCAST5replyERNS1_5FrameEhRKNS3_9ReplyInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = embot::prot::can::bootloader::Message_BROADCAST::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_BROADCAST::ReplyInfo const&) &rArr; embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_sender(embot::prot::can::Frame&, unsigned char, bool)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_size(embot::prot::can::Frame&, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[397]"></a>embot::prot::can::bootloader::Message_BROADCAST::ReplyInfo::ReplyInfo__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader17Message_BROADCAST9ReplyInfoC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::prot::can::bootloader::Message_BROADCAST::ReplyInfo::ReplyInfo__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::versionOfFIRMWARE::versionOfFIRMWARE__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[395]"></a>embot::prot::can::bootloader::Message_BROADCAST::Message_BROADCAST__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader17Message_BROADCASTC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::bootloader::Message_BROADCAST::Message_BROADCAST__sub_object() &rArr; embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::Message__sub_object()
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BROADCAST::Info::Info__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3f0]"></a>embot::prot::can::bootloader::Message_SETCANADDRESS::Info::Info__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader21Message_SETCANADDRESS4InfoC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SETCANADDRESS::Message_SETCANADDRESS__sub_object()
</UL>

<P><STRONG><a name="[392]"></a>embot::prot::can::bootloader::Message_SETCANADDRESS::load(embot::prot::can::Frame const&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, embot_prot_can_bootloader.o(.text._ZN5embot4prot3can10bootloader21Message_SETCANADDRESS4loadERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::prot::can::bootloader::Message_SETCANADDRESS::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_setcanaddress(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[393]"></a>embot::prot::can::bootloader::Message_SETCANADDRESS::reply()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_prot_can_bootloader.o(.text._ZN5embot4prot3can10bootloader21Message_SETCANADDRESS5replyEv))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_setcanaddress(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[391]"></a>embot::prot::can::bootloader::Message_SETCANADDRESS::Message_SETCANADDRESS__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader21Message_SETCANADDRESSC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::bootloader::Message_SETCANADDRESS::Message_SETCANADDRESS__sub_object() &rArr; embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::Message__sub_object()
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SETCANADDRESS::Info::Info__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_setcanaddress(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3f1]"></a>embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::Info::Info__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader22Message_GET_TIMEOFLIFE4InfoC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::Message_GET_TIMEOFLIFE__sub_object()
</UL>

<P><STRONG><a name="[38d]"></a>embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::load(embot::prot::can::Frame const&)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, embot_prot_can_bootloader.o(.text._ZN5embot4prot3can10bootloader22Message_GET_TIMEOFLIFE4loadERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[38f]"></a>embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::ReplyInfo const&)</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, embot_prot_can_bootloader.o(.text._ZN5embot4prot3can10bootloader22Message_GET_TIMEOFLIFE5replyERNS1_5FrameEhRKNS3_9ReplyInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::ReplyInfo const&) &rArr; embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_sender(embot::prot::can::Frame&, unsigned char, bool)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_size(embot::prot::can::Frame&, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[38e]"></a>embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::ReplyInfo::ReplyInfo__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader22Message_GET_TIMEOFLIFE9ReplyInfoC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[38c]"></a>embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::Message_GET_TIMEOFLIFE__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader22Message_GET_TIMEOFLIFEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::Message_GET_TIMEOFLIFE__sub_object() &rArr; embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::Message__sub_object()
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::Info::Info__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3a1]"></a>embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::numberofreplies()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_prot_can_bootloader.o(.text._ZN5embot4prot3can10bootloader27Message_GET_ADDITIONAL_INFO15numberofrepliesEv))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3f2]"></a>embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::Info::Info__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader27Message_GET_ADDITIONAL_INFO4InfoC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::Message_GET_ADDITIONAL_INFO__sub_object()
</UL>

<P><STRONG><a name="[3a0]"></a>embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::load(embot::prot::can::Frame const&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, embot_prot_can_bootloader.o(.text._ZN5embot4prot3can10bootloader27Message_GET_ADDITIONAL_INFO4loadERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3a2]"></a>embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::ReplyInfo const&)</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, embot_prot_can_bootloader.o(.text._ZN5embot4prot3can10bootloader27Message_GET_ADDITIONAL_INFO5replyERNS1_5FrameEhRKNS3_9ReplyInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::ReplyInfo const&) &rArr; embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_sender(embot::prot::can::Frame&, unsigned char, bool)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_size(embot::prot::can::Frame&, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[39f]"></a>embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::Message_GET_ADDITIONAL_INFO__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader27Message_GET_ADDITIONAL_INFOC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::Message_GET_ADDITIONAL_INFO__sub_object() &rArr; embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::Message__sub_object()
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::Info::Info__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3f4]"></a>embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::Info::Info__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader28Message_SET_ADDITIONAL_INFO24InfoC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::Message_SET_ADDITIONAL_INFO2__sub_object()
</UL>

<P><STRONG><a name="[3a5]"></a>embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::load(embot::prot::can::Frame const&)</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, embot_prot_can_bootloader.o(.text._ZN5embot4prot3can10bootloader28Message_SET_ADDITIONAL_INFO24loadERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void embot::core::binary::bit::set&lang;unsigned char&rang;(unsigned char&, unsigned char)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_setadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3a4]"></a>embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::Message_SET_ADDITIONAL_INFO2__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can10bootloader28Message_SET_ADDITIONAL_INFO2C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::Message_SET_ADDITIONAL_INFO2__sub_object() &rArr; embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::Message__sub_object()
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::Info::Info__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_setadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[35e]"></a>embot::prot::can::frame2clas(embot::prot::can::Frame const&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_prot_can.o(.text._ZN5embot4prot3can10frame2clasERKNS1_5FrameE))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frameisbootloader(embot::prot::can::Frame const&)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3f8]"></a>embot::prot::can::frame2sender(embot::prot::can::Frame const&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_prot_can.o(.text._ZN5embot4prot3can12frame2senderERKNS1_5FrameE))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_sender(embot::prot::can::Frame&, unsigned char, bool)
</UL>

<P><STRONG><a name="[35d]"></a>embot::prot::can::frameis4board(embot::prot::can::Frame const&, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, embot_prot_can.o(.text._ZN5embot4prot3can13frameis4boardERKNS1_5FrameEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::prot::can::frameis4board(embot::prot::can::Frame const&, unsigned char) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3f6]"></a>embot::prot::can::frame2datasize(embot::prot::can::Frame const&)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, embot_prot_can.o(.text._ZN5embot4prot3can14frame2datasizeERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::frame2datasize(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
</UL>

<P><STRONG><a name="[3ee]"></a>embot::prot::can::frame_set_size(embot::prot::can::Frame&, unsigned char, bool)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, embot_prot_can.o(.text._ZN5embot4prot3can14frame_set_sizeERNS1_5FrameEhb))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo const&)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::shared::Message_GET_VERSION::ReplyInfo const&)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::ReplyInfo const&)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::ReplyInfo const&)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BROADCAST::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_BROADCAST::ReplyInfo const&)
</UL>

<P><STRONG><a name="[3f5]"></a>embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, embot_prot_can.o(.text._ZN5embot4prot3can15frameisperiodicERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2clas(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2destination(embot::prot::can::Frame const&)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2databuffer(embot::prot::can::Frame&)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2datasize(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frameis4board(embot::prot::can::Frame const&, unsigned char)
</UL>

<P><STRONG><a name="[3f7]"></a>embot::prot::can::frame2databuffer(embot::prot::can::Frame&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, embot_prot_can.o(.text._ZN5embot4prot3can16frame2databufferERNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::frame2databuffer(embot::prot::can::Frame&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
</UL>

<P><STRONG><a name="[3ec]"></a>embot::prot::can::frame_set_sender(embot::prot::can::Frame&, unsigned char, bool)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, embot_prot_can.o(.text._ZN5embot4prot3can16frame_set_senderERNS1_5FrameEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::prot::can::frame_set_sender(embot::prot::can::Frame&, unsigned char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2sender(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo const&)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::shared::Message_GET_VERSION::ReplyInfo const&)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::ReplyInfo const&)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::ReplyInfo const&)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BROADCAST::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_BROADCAST::ReplyInfo const&)
</UL>

<P><STRONG><a name="[3f9]"></a>embot::prot::can::frame2destination(embot::prot::can::Frame const&)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, embot_prot_can.o(.text._ZN5embot4prot3can17frame2destinationERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[3fa]"></a>embot::prot::can::frameisbootloader(embot::prot::can::Frame const&)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_prot_can.o(.text._ZN5embot4prot3can17frameisbootloaderERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::prot::can::frameisbootloader(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2clas(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
</UL>

<P><STRONG><a name="[3ab]"></a>embot::prot::can::versionOfFIRMWARE::versionOfFIRMWARE__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can17versionOfFIRMWAREC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::ReplyInfo::ReplyInfo__sub_object()
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BROADCAST::ReplyInfo::ReplyInfo__sub_object()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[3aa]"></a>embot::prot::can::versionOfCANPROTOCOL::versionOfCANPROTOCOL__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can20versionOfCANPROTOCOLC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::ReplyInfo::ReplyInfo__sub_object()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::Info::Info__sub_object()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[3ed]"></a>embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool)</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, embot_prot_can.o(.text._ZN5embot4prot3can32frame_set_clascmddestinationdataERNS1_5FrameENS1_4ClasEhhPKvhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2destination(embot::prot::can::Frame const&)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2clas(embot::prot::can::Frame const&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo const&)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::shared::Message_GET_VERSION::ReplyInfo const&)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::ReplyInfo const&)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::ReplyInfo const&)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BROADCAST::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::bootloader::Message_BROADCAST::ReplyInfo const&)
</UL>

<P><STRONG><a name="[3d7]"></a>embot::prot::can::Frame::Frame__sub_object(unsigned int, unsigned char, unsigned char*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZN5embot4prot3can5FrameC2EjhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::prot::can::Frame::Frame__sub_object(unsigned int, unsigned char, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::eventbasedthread_onevent(embot::os::Thread*, unsigned int, void*)
</UL>

<P><STRONG><a name="[1e4]"></a>embot::prot::can::Frame::Frame__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZN5embot4prot3can5FrameC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::gettx(embot::prot::can::Frame&, unsigned int&)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::getrx(embot::prot::can::Frame&, unsigned int&)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_onevent(embot::os::Thread*, unsigned int, void*)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::Message__sub_object()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::Impl__sub_object()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::Impl__sub_object()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3fe]"></a>embot::prot::can::motor::polling::toControlMode(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, embot_prot_can_motor_polling.o(.text._ZN5embot4prot3can5motor7polling13toControlModeEh))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::load(embot::prot::can::Frame const&)
</UL>

<P><STRONG><a name="[365]"></a>embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::load(embot::prot::can::Frame const&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, embot_prot_can_motor_polling.o(.text._ZN5embot4prot3can5motor7polling24Message_GET_CONTROL_MODE4loadERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::motorpollingframe2motindex(embot::prot::can::Frame const&)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[367]"></a>embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo const&)</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, embot_prot_can_motor_polling.o(.text._ZN5embot4prot3can5motor7polling24Message_GET_CONTROL_MODE5replyERNS1_5FrameEhRKNS4_9ReplyInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo const&) &rArr; embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::convert(embot::prot::can::motor::polling::MotIndex)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::convert(embot::prot::can::motor::polling::ControlMode)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_sender(embot::prot::can::Frame&, unsigned char, bool)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_size(embot::prot::can::Frame&, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[366]"></a>embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo::ReplyInfo__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot4prot3can5motor7polling24Message_GET_CONTROL_MODE9ReplyInfoC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[364]"></a>embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::Message_GET_CONTROL_MODE__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot4prot3can5motor7polling24Message_GET_CONTROL_MODEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::Message_GET_CONTROL_MODE__sub_object() &rArr; embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[36f]"></a>embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::load(embot::prot::can::Frame const&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, embot_prot_can_motor_polling.o(.text._ZN5embot4prot3can5motor7polling24Message_SET_CONTROL_MODE4loadERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::motorpollingframe2motindex(embot::prot::can::Frame const&)
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::toControlMode(unsigned char)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_set_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[36e]"></a>embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Message_SET_CONTROL_MODE__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot4prot3can5motor7polling24Message_SET_CONTROL_MODEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Message_SET_CONTROL_MODE__sub_object() &rArr; embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_set_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3fb]"></a>embot::prot::can::motor::polling::motorpollingframe2motindex(embot::prot::can::Frame const&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_prot_can_motor_polling.o(.text._ZN5embot4prot3can5motor7polling26motorpollingframe2motindexERKNS1_5FrameE))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::load(embot::prot::can::Frame const&)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::load(embot::prot::can::Frame const&)
</UL>

<P><STRONG><a name="[3fc]"></a>embot::prot::can::motor::polling::convert(embot::prot::can::motor::polling::ControlMode)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_prot_can_motor_polling.o(.text._ZN5embot4prot3can5motor7polling7convertENS3_11ControlModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::prot::can::motor::polling::convert(embot::prot::can::motor::polling::ControlMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::prot::can::motor::polling::ControlMode&rang;(embot::prot::can::motor::polling::ControlMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo const&)
</UL>

<P><STRONG><a name="[3fd]"></a>embot::prot::can::motor::polling::convert(embot::prot::can::motor::polling::MotIndex)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_prot_can_motor_polling.o(.text._ZN5embot4prot3can5motor7polling7convertENS3_8MotIndexE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::prot::can::motor::polling::convert(embot::prot::can::motor::polling::MotIndex)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::prot::can::motor::polling::MotIndex&rang;(embot::prot::can::motor::polling::MotIndex)
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo const&)
</UL>

<P><STRONG><a name="[34f]"></a>embot::prot::can::motor::polling::tostring(embot::prot::can::motor::polling::ControlMode)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, embot_prot_can_motor_polling.o(.text._ZN5embot4prot3can5motor7polling8tostringENS3_11ControlModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = embot::prot::can::motor::polling::tostring(embot::prot::can::motor::polling::ControlMode) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::char_traits&lang;char&rang;::length(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Info const&)
</UL>

<P><STRONG><a name="[34e]"></a>embot::prot::can::motor::polling::tostring(embot::prot::can::motor::polling::MotIndex)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, embot_prot_can_motor_polling.o(.text._ZN5embot4prot3can5motor7polling8tostringENS3_8MotIndexE))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = embot::prot::can::motor::polling::tostring(embot::prot::can::motor::polling::MotIndex) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::char_traits&lang;char&rang;::length(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Info const&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::Info const&, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo&)
</UL>

<P><STRONG><a name="[371]"></a>embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::load(embot::prot::can::Frame const&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, embot_prot_can_motor_periodic.o(.text._ZN5embot4prot3can5motor8periodic33Message_EMSTO2FOC_DESIRED_CURRENT4loadERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_ems2foc_desired_current(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[370]"></a>embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Message_EMSTO2FOC_DESIRED_CURRENT__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, embot_app_application_thecanparsermbd.o(.text._ZN5embot4prot3can5motor8periodic33Message_EMSTO2FOC_DESIRED_CURRENTC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Message_EMSTO2FOC_DESIRED_CURRENT__sub_object() &rArr; embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_ems2foc_desired_current(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[401]"></a>embot::prot::can::shared::Message_SET_ID::Info::Info__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can6shared14Message_SET_ID4InfoC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_SET_ID::Message_SET_ID__sub_object(embot::prot::can::Clas, unsigned char)
</UL>

<P><STRONG><a name="[381]"></a>embot::prot::can::shared::Message_SET_ID::load(embot::prot::can::Frame const&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, embot_prot_can.o(.text._ZN5embot4prot3can6shared14Message_SET_ID4loadERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::prot::can::shared::Message_SET_ID::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_setid(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[383]"></a>embot::prot::can::shared::Message_SET_ID::reply()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_prot_can.o(.text._ZN5embot4prot3can6shared14Message_SET_ID5replyEv))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_setid(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[380]"></a>embot::prot::can::shared::Message_SET_ID::Message_SET_ID__sub_object(embot::prot::can::Clas, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can6shared14Message_SET_IDC2ENS1_4ClasEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::prot::can::shared::Message_SET_ID::Message_SET_ID__sub_object(embot::prot::can::Clas, unsigned char) &rArr; embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::Message__sub_object()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_SET_ID::Info::Info__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_setid(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[402]"></a>embot::prot::can::shared::Message_GET_VERSION::Info::Info__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can6shared19Message_GET_VERSION4InfoC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::prot::can::shared::Message_GET_VERSION::Info::Info__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::versionOfCANPROTOCOL::versionOfCANPROTOCOL__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::Message_GET_VERSION__sub_object(embot::prot::can::Clas, unsigned char)
</UL>

<P><STRONG><a name="[39b]"></a>embot::prot::can::shared::Message_GET_VERSION::load(embot::prot::can::Frame const&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, embot_prot_can.o(.text._ZN5embot4prot3can6shared19Message_GET_VERSION4loadERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::prot::can::shared::Message_GET_VERSION::load(embot::prot::can::Frame const&) &rArr; embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[39d]"></a>embot::prot::can::shared::Message_GET_VERSION::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::shared::Message_GET_VERSION::ReplyInfo const&)</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, embot_prot_can.o(.text._ZN5embot4prot3can6shared19Message_GET_VERSION5replyERNS1_5FrameEhRKNS3_9ReplyInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = embot::prot::can::shared::Message_GET_VERSION::reply(embot::prot::can::Frame&, unsigned char, embot::prot::can::shared::Message_GET_VERSION::ReplyInfo const&) &rArr; embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_sender(embot::prot::can::Frame&, unsigned char, bool)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_size(embot::prot::can::Frame&, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[39c]"></a>embot::prot::can::shared::Message_GET_VERSION::ReplyInfo::ReplyInfo__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can6shared19Message_GET_VERSION9ReplyInfoC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::shared::Message_GET_VERSION::ReplyInfo::ReplyInfo__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::versionOfCANPROTOCOL::versionOfCANPROTOCOL__sub_object()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::versionOfFIRMWARE::versionOfFIRMWARE__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[39a]"></a>embot::prot::can::shared::Message_GET_VERSION::Message_GET_VERSION__sub_object(embot::prot::can::Clas, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can6shared19Message_GET_VERSIONC2ENS1_4ClasEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::prot::can::shared::Message_GET_VERSION::Message_GET_VERSION__sub_object(embot::prot::can::Clas, unsigned char) &rArr; embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::Message__sub_object()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::Info::Info__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[3e9]"></a>embot::prot::can::Message::set(embot::prot::can::Frame const&)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, embot_prot_can.o(.text._ZN5embot4prot3can7Message3setERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = embot::prot::can::Message::set(embot::prot::can::Frame const&) &rArr; embot::prot::can::frame2destination(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2destination(embot::prot::can::Frame const&)
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2databuffer(embot::prot::can::Frame&)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2datasize(embot::prot::can::Frame const&)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2sender(embot::prot::can::Frame const&)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2cmd(embot::prot::can::Frame const&)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame2clas(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::load(embot::prot::can::Frame const&)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::load(embot::prot::can::Frame const&)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::load(embot::prot::can::Frame const&)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::load(embot::prot::can::Frame const&)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_SET_ID::load(embot::prot::can::Frame const&)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::load(embot::prot::can::Frame const&)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::load(embot::prot::can::Frame const&)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::load(embot::prot::can::Frame const&)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SETCANADDRESS::load(embot::prot::can::Frame const&)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BROADCAST::load(embot::prot::can::Frame const&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BOARD::load(embot::prot::can::Frame const&)
</UL>

<P><STRONG><a name="[3ea]"></a>embot::prot::can::Message::Message__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, embot_app_application_thecanparserbasic.o(.text._ZN5embot4prot3can7MessageC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::prot::can::Message::Message__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Frame::Frame__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::Message_GET_VERSION__sub_object(embot::prot::can::Clas, unsigned char)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_SET_ID::Message_SET_ID__sub_object(embot::prot::can::Clas, unsigned char)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::Message_SET_ADDITIONAL_INFO2__sub_object()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::Message_GET_ADDITIONAL_INFO__sub_object()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::Message_GET_TIMEOFLIFE__sub_object()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SETCANADDRESS::Message_SETCANADDRESS__sub_object()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BROADCAST::Message_BROADCAST__sub_object()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BOARD::Message_BOARD__sub_object()
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Message_EMSTO2FOC_DESIRED_CURRENT__sub_object()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Message_SET_CONTROL_MODE__sub_object()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::Message_GET_CONTROL_MODE__sub_object()
</UL>

<P><STRONG><a name="[35f]"></a>embot::prot::can::frame2cmd(embot::prot::can::Frame const&)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, embot_prot_can.o(.text._ZN5embot4prot3can9frame2cmdERKNS1_5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::prot::can::frame2cmd(embot::prot::can::Frame const&) &rArr; embot::prot::can::frameisbootloader(embot::prot::can::Frame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frameisbootloader(embot::prot::can::Frame const&)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frameisperiodic(embot::prot::can::Frame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::load(embot::prot::can::Frame const&)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::load(embot::prot::can::Frame const&)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::load(embot::prot::can::Frame const&)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Message::set(embot::prot::can::Frame const&)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::frame_set_clascmddestinationdata(embot::prot::can::Frame&, embot::prot::can::Clas, unsigned char, unsigned char, void const*, unsigned char, unsigned char, bool)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_GET_VERSION::load(embot::prot::can::Frame const&)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::shared::Message_SET_ID::load(embot::prot::can::Frame const&)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SET_ADDITIONAL_INFO2::load(embot::prot::can::Frame const&)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_ADDITIONAL_INFO::load(embot::prot::can::Frame const&)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_GET_TIMEOFLIFE::load(embot::prot::can::Frame const&)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_SETCANADDRESS::load(embot::prot::can::Frame const&)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BROADCAST::load(embot::prot::can::Frame const&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::bootloader::Message_BOARD::load(embot::prot::can::Frame const&)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[403]"></a>myEVT::myEVT__sub_object(embot::app::skeleton::os::evthreadcan::evtConfig const&, embot::app::skeleton::os::evthreadcan::canConfig const&, embot::app::theCANboardInfo::applicationInfo const&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5myEVTC2ERKN5embot3app8skeleton2os11evthreadcan9evtConfigERKNS4_9canConfigERKNS1_15theCANboardInfo15applicationInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = myEVT::myEVT__sub_object(embot::app::skeleton::os::evthreadcan::evtConfig const&, embot::app::skeleton::os::evthreadcan::canConfig const&, embot::app::theCANboardInfo::applicationInfo const&) &rArr; embot::app::skeleton::os::evthreadcan::evThreadCAN::evThreadCAN__sub_object(embot::app::skeleton::os::evthreadcan::evtConfig const&, embot::app::skeleton::os::evthreadcan::canConfig const&, embot::app::theCANboardInfo::applicationInfo const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::evThreadCAN::evThreadCAN__sub_object(embot::app::skeleton::os::evthreadcan::evtConfig const&, embot::app::skeleton::os::evthreadcan::canConfig const&, embot::app::theCANboardInfo::applicationInfo const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
</UL>

<P><STRONG><a name="[c8]"></a>myEVT::~myEVT__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5myEVTD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = myEVT::~myEVT__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::evThreadCAN::~evThreadCAN__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTV5myEVT)
</UL>
<P><STRONG><a name="[405]"></a>mySYS::mySYS__sub_object(embot::app::skeleton::os::basic::sysConfig const&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5mySYSC2ERKN5embot3app8skeleton2os5basic9sysConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mySYS::mySYS__sub_object(embot::app::skeleton::os::basic::sysConfig const&) &rArr; embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::SYSTEMevtcan__sub_object(embot::app::skeleton::os::basic::sysConfig const&) &rArr; embot::app::skeleton::os::basic::SYSTEM::SYSTEM__sub_object(embot::app::skeleton::os::basic::sysConfig const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::SYSTEMevtcan__sub_object(embot::app::skeleton::os::basic::sysConfig const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
</UL>

<P><STRONG><a name="[ce]"></a>mySYS::~mySYS__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN5mySYSD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mySYS::~mySYS__deallocating() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::SYSTEM::~SYSTEM__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTV5mySYS)
</UL>
<P><STRONG><a name="[406]"></a>shared_t::addrx(embot::prot::can::Frame const&)</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, amcbldc-main.o(.text._ZN8shared_t5addrxERKN5embot4prot3can5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = shared_t::addrx(embot::prot::can::Frame const&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&, unsigned int)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::max_size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__vector_base_common&lang;true&rang;::__throw_length_error() const
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_release(void*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_take(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefOnEventRXcanframe(embot::os::Thread*, unsigned int, void*, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const
</UL>

<P><STRONG><a name="[1e7]"></a>shared_t::addtx(embot::prot::can::Frame const&)</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, amcbldc-main.o(.text._ZN8shared_t5addtxERKN5embot4prot3can5FrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = shared_t::addtx(embot::prot::can::Frame const&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&, unsigned int)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::max_size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__vector_base_common&lang;true&rang;::__throw_length_error() const
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_release(void*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_take(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_onevent(embot::os::Thread*, unsigned int, void*)
</UL>

<P><STRONG><a name="[1e5]"></a>shared_t::getrx(embot::prot::can::Frame&, unsigned int&)</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, amcbldc-main.o(.text._ZN8shared_t5getrxERN5embot4prot3can5FrameERj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = shared_t::getrx(embot::prot::can::Frame&, unsigned int&) &rArr; embot::os::rtos::mutex_release(void*) &rArr; osal_mutex_release &rArr; oosiit_mut_release &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Frame::Frame__sub_object()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_release(void*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_take(void*, unsigned int)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_onevent(embot::os::Thread*, unsigned int, void*)
</UL>

<P><STRONG><a name="[407]"></a>shared_t::gettx(embot::prot::can::Frame&, unsigned int&)</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, amcbldc-main.o(.text._ZN8shared_t5gettxERN5embot4prot3can5FrameERj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = shared_t::gettx(embot::prot::can::Frame&, unsigned int&) &rArr; embot::os::rtos::mutex_release(void*) &rArr; osal_mutex_release &rArr; oosiit_mut_release &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Frame::Frame__sub_object()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_release(void*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_take(void*, unsigned int)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const
</UL>

<P><STRONG><a name="[1e8]"></a>shared_t::sizeoftx()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZN8shared_t8sizeoftxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = shared_t::sizeoftx() &rArr; embot::os::rtos::mutex_release(void*) &rArr; osal_mutex_release &rArr; oosiit_mut_release &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_release(void*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_take(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_onevent(embot::os::Thread*, unsigned int, void*)
</UL>

<P><STRONG><a name="[1f6]"></a>shared_t::shared_t__sub_object()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, amcbldc-main.o(.text._ZN8shared_tC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = shared_t::shared_t__sub_object() &rArr; std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::reserve(unsigned int) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::reserve(unsigned int)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_new()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_shared_start()
</UL>

<P><STRONG><a name="[262]"></a>bool embot::hw::bsp::SUPP::supported&lang;embot::hw::CAN&rang;(embot::hw::CAN) const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_hw_can.o(.text._ZNK5embot2hw3bsp4SUPP9supportedINS0_3CANEEEbT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bool embot::hw::bsp::SUPP::supported&lang;embot::hw::CAN&rang;(embot::hw::CAN) const
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::core::binary::bit::check&lang;unsigned int&rang;(unsigned int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::BSP::getPROP(embot::hw::CAN) const
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::supported(embot::hw::CAN)
</UL>

<P><STRONG><a name="[275]"></a>bool embot::hw::bsp::SUPP::supported&lang;embot::hw::LED&rang;(embot::hw::LED) const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_hw_led.o(.text._ZNK5embot2hw3bsp4SUPP9supportedINS0_3LEDEEEbT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bool embot::hw::bsp::SUPP::supported&lang;embot::hw::LED&rang;(embot::hw::LED) const
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::LED&rang;(embot::hw::LED)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::core::binary::bit::check&lang;unsigned int&rang;(unsigned int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::BSP::getPROP(embot::hw::LED) const
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::supported(embot::hw::LED)
</UL>

<P><STRONG><a name="[408]"></a>bool embot::hw::bsp::SUPP::supported&lang;embot::hw::FLASH&rang;(embot::hw::FLASH) const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_hw_flashburner.o(.text._ZNK5embot2hw3bsp4SUPP9supportedINS0_5FLASHEEEbT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bool embot::hw::bsp::SUPP::supported&lang;embot::hw::FLASH&rang;(embot::hw::FLASH) const
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::core::binary::bit::check&lang;unsigned int&rang;(unsigned int, unsigned char)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::FLASH&rang;(embot::hw::FLASH)
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::flash::BSP::getPROP(embot::hw::FLASH) const
</UL>

<P><STRONG><a name="[255]"></a>embot::hw::can::BSP::init(embot::hw::CAN) const</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, embot_hw_bsp_amcbldc.o(.text._ZNK5embot2hw3can3BSP4initENS0_3CANE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = embot::hw::can::BSP::init(embot::hw::CAN) const &rArr; MX_FDCAN2_Init &rArr; HAL_FDCAN_Init &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)
</UL>

<P><STRONG><a name="[256]"></a>embot::hw::can::BSP::getPROP(embot::hw::CAN) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, embot_hw_can.o(.text._ZNK5embot2hw3can3BSP7getPROPENS0_3CANE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::hw::can::BSP::getPROP(embot::hw::CAN) const &rArr; bool embot::hw::bsp::SUPP::supported&lang;embot::hw::CAN&rang;(embot::hw::CAN) const
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::hw::bsp::SUPP::supported&lang;embot::hw::CAN&rang;(embot::hw::CAN) const
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)
</UL>

<P><STRONG><a name="[272]"></a>embot::hw::led::BSP::init(embot::hw::LED) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_hw_bsp_amcbldc.o(.text._ZNK5embot2hw3led3BSP4initENS0_3LEDE))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::init(embot::hw::LED)
</UL>

<P><STRONG><a name="[209]"></a>embot::hw::led::BSP::getPROP(embot::hw::LED) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, embot_hw_led.o(.text._ZNK5embot2hw3led3BSP7getPROPENS0_3LEDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::hw::led::BSP::getPROP(embot::hw::LED) const &rArr; bool embot::hw::bsp::SUPP::supported&lang;embot::hw::LED&rang;(embot::hw::LED) const
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::hw::bsp::SUPP::supported&lang;embot::hw::LED&rang;(embot::hw::LED) const
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::LED&rang;(embot::hw::LED)
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::toggle(embot::hw::LED)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::off(embot::hw::LED)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::on(embot::hw::LED)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off()
</UL>

<P><STRONG><a name="[28b]"></a>embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, embot_hw_gpio.o(.text._ZNK5embot2hw4gpio3BSP7getPROPENS0_4GPIOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const &rArr; embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::GPIO::PORT&rang;(embot::hw::GPIO::PORT)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::GPIO::PIN&rang;(embot::hw::GPIO::PIN)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::PROP::PROP__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::configure(embot::hw::GPIO const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::toggle(embot::hw::GPIO const&)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State)
</UL>

<P><STRONG><a name="[40b]"></a>embot::hw::gpio::BSP::supported(embot::hw::GPIO) const</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, embot_hw_gpio.o(.text._ZNK5embot2hw4gpio3BSP9supportedENS0_4GPIOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::hw::gpio::BSP::supported(embot::hw::GPIO) const
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::core::binary::bit::check&lang;unsigned short&rang;(unsigned short, unsigned char)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::GPIO::PORT&rang;(embot::hw::GPIO::PORT)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::GPIO::PIN&rang;(embot::hw::GPIO::PIN)
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::BSP::getPROP(embot::hw::GPIO) const
</UL>

<P><STRONG><a name="[27a]"></a>embot::hw::gpio::PROP::clockenable() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_hw_gpio.o(.text._ZNK5embot2hw4gpio4PROP11clockenableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::hw::gpio::PROP::clockenable() const
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
</UL>

<P><STRONG><a name="[28c]"></a>embot::hw::gpio::PROP::isvalid() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, embot_hw_gpio.o(.text._ZNK5embot2hw4gpio4PROP7isvalidEv))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::configure(embot::hw::GPIO const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::toggle(embot::hw::GPIO const&)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::set(embot::hw::GPIO const&, embot::hw::gpio::State)
</UL>

<P><STRONG><a name="[297]"></a>embot::hw::flash::BSP::getPROP(embot::hw::FLASH) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, embot_hw_flashburner.o(.text._ZNK5embot2hw5flash3BSP7getPROPENS0_5FLASHE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::hw::flash::BSP::getPROP(embot::hw::FLASH) const &rArr; bool embot::hw::bsp::SUPP::supported&lang;embot::hw::FLASH&rang;(embot::hw::FLASH) const
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::hw::bsp::SUPP::supported&lang;embot::hw::FLASH&rang;(embot::hw::FLASH) const
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::FLASH&rang;(embot::hw::FLASH)
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::flash::getpartition(embot::hw::FLASH)
</UL>

<P><STRONG><a name="[de]"></a>embot::os::IdleThread::getPriority() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os10IdleThread11getPriorityEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
</UL>
<P><STRONG><a name="[40e]"></a>embot::os::IdleThread::Config::isvalid() const</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os.o(.text._ZNK5embot2os10IdleThread6Config7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::IdleThread::Config::isvalid() const &rArr; embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Behaviour::isvalid() const
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Config::isvalid() const
</UL>

<P><STRONG><a name="[e0]"></a>embot::os::IdleThread::getName() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os10IdleThread7getNameEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
</UL>
<P><STRONG><a name="[dd]"></a>embot::os::IdleThread::getType() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os10IdleThread7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10IdleThreadE)
</UL>
<P><STRONG><a name="[e9]"></a>embot::os::InitThread::getPriority() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os10InitThread11getPriorityEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
</UL>
<P><STRONG><a name="[410]"></a>embot::os::InitThread::Config::isvalid() const</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os.o(.text._ZNK5embot2os10InitThread6Config7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::InitThread::Config::isvalid() const &rArr; embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Behaviour::isvalid() const
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Config::isvalid() const
</UL>

<P><STRONG><a name="[eb]"></a>embot::os::InitThread::getName() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os10InitThread7getNameEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
</UL>
<P><STRONG><a name="[e8]"></a>embot::os::InitThread::getType() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os10InitThread7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os10InitThreadE)
</UL>
<P><STRONG><a name="[f4]"></a>embot::os::EventThread::getPriority() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os11EventThread11getPriorityEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
</UL>
<P><STRONG><a name="[2d1]"></a>embot::os::EventThread::Config::isvalid() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZNK5embot2os11EventThread6Config7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::EventThread::Config::isvalid() const &rArr; embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::start(embot::os::EventThread::Config const&, void (*)(void*))
</UL>

<P><STRONG><a name="[f6]"></a>embot::os::EventThread::getName() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os11EventThread7getNameEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
</UL>
<P><STRONG><a name="[f3]"></a>embot::os::EventThread::getType() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os11EventThread7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os11EventThreadE)
</UL>
<P><STRONG><a name="[41e]"></a>embot::os::theScheduler::getOSerror(int&) const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, embot_os_thescheduler.o(.text._ZNK5embot2os12theScheduler10getOSerrorERi))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefonOSerror(void*) const
</UL>

<P><STRONG><a name="[2d8]"></a>embot::os::theScheduler::Config::isvalid() const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, embot_os_thescheduler.o(.text._ZNK5embot2os12theScheduler6Config7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = embot::os::theScheduler::Config::isvalid() const &rArr; embot::os::theScheduler::Behaviour::isvalid() const &rArr; embot::os::InitThread::Config::isvalid() const &rArr; embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Behaviour::isvalid() const
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Timing::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&)
</UL>

<P><STRONG><a name="[411]"></a>embot::os::theScheduler::Timing::isvalid() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, embot_os_thescheduler.o(.text._ZNK5embot2os12theScheduler6Timing7isvalidEv))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Config::isvalid() const
</UL>

<P><STRONG><a name="[2e5]"></a>embot::os::theScheduler::started() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_os_thescheduler.o(.text._ZNK5embot2os12theScheduler7startedEv))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::start(embot::os::theScheduler::Config const&)
</UL>

<P><STRONG><a name="[412]"></a>embot::os::theScheduler::Behaviour::isvalid() const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, embot_os_thescheduler.o(.text._ZNK5embot2os12theScheduler9Behaviour7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::theScheduler::Behaviour::isvalid() const &rArr; embot::os::InitThread::Config::isvalid() const &rArr; embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::Config::isvalid() const
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::Config::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Config::isvalid() const
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::Config::isvalid() const
</UL>

<P><STRONG><a name="[2ea]"></a>embot::os::EventToThread::isvalid() const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, embot_os_action.o(.text._ZNK5embot2os13EventToThread7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::EventToThread::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventToThread::execute()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::isvalid() const
</UL>

<P><STRONG><a name="[ff]"></a>embot::os::MessageThread::getPriority() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os13MessageThread11getPriorityEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
</UL>
<P><STRONG><a name="[2f2]"></a>embot::os::MessageThread::Config::isvalid() const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZNK5embot2os13MessageThread6Config7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::MessageThread::Config::isvalid() const &rArr; embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::start(embot::os::MessageThread::Config const&, void (*)(void*))
</UL>

<P><STRONG><a name="[101]"></a>embot::os::MessageThread::getName() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os13MessageThread7getNameEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
</UL>
<P><STRONG><a name="[fe]"></a>embot::os::MessageThread::getType() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os13MessageThread7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os13MessageThreadE)
</UL>
<P><STRONG><a name="[2f8]"></a>embot::os::ValueToThread::isvalid() const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, embot_os_action.o(.text._ZNK5embot2os13ValueToThread7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::ValueToThread::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::ValueToThread::execute(unsigned int)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::isvalid() const
</UL>

<P><STRONG><a name="[10a]"></a>embot::os::CallbackThread::getPriority() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os14CallbackThread11getPriorityEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
</UL>
<P><STRONG><a name="[300]"></a>embot::os::CallbackThread::Config::isvalid() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_os_thread.o(.text._ZNK5embot2os14CallbackThread6Config7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::CallbackThread::Config::isvalid() const &rArr; embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::start(embot::os::CallbackThread::Config const&, void (*)(void*))
</UL>

<P><STRONG><a name="[10c]"></a>embot::os::CallbackThread::getName() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os14CallbackThread7getNameEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
</UL>
<P><STRONG><a name="[109]"></a>embot::os::CallbackThread::getType() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_thread.o(.text._ZNK5embot2os14CallbackThread7getTypeEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_os_thread.o(.rodata._ZTVN5embot2os14CallbackThreadE)
</UL>
<P><STRONG><a name="[305]"></a>embot::os::MessageToThread::isvalid() const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, embot_os_action.o(.text._ZNK5embot2os15MessageToThread7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::MessageToThread::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageToThread::execute(unsigned int)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::isvalid() const
</UL>

<P><STRONG><a name="[3de]"></a>embot::os::theTimerManager::Config::isvalid() const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, embot_app_skeleton_os_basic.o(.text._ZNK5embot2os15theTimerManager6Config7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::theTimerManager::Config::isvalid() const &rArr; embot::os::priority::isSystem(embot::os::Priority)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::priority::isSystem(embot::os::Priority)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::start_sys_services()
</UL>

<P><STRONG><a name="[2b8]"></a>embot::os::theTimerManager::started() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, embot_os_thetimermanager.o(.text._ZNK5embot2os15theTimerManager7startedEv))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::OnExpiryCbk(void*, void*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::start(embot::os::theTimerManager::Config const&)
</UL>

<P><STRONG><a name="[30c]"></a>embot::os::CallbackToThread::isvalid() const</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_action.o(.text._ZNK5embot2os16CallbackToThread7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::CallbackToThread::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackToThread::execute(unsigned int)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::isvalid() const
</UL>

<P><STRONG><a name="[3df]"></a>embot::os::theCallbackManager::Config::isvalid() const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, embot_app_skeleton_os_basic.o(.text._ZNK5embot2os18theCallbackManager6Config7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::theCallbackManager::Config::isvalid() const &rArr; embot::os::priority::isSystem(embot::os::Priority)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::priority::isSystem(embot::os::Priority)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::start_sys_services()
</UL>

<P><STRONG><a name="[3cd]"></a>embot::os::theCallbackManager::thread() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_os_thecallbackmanager.o(.text._ZNK5embot2os18theCallbackManager6threadEv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::pulse(unsigned int, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::wave(embot::app::LEDwave const*, unsigned int)
</UL>

<P><STRONG><a name="[313]"></a>embot::os::theCallbackManager::started() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, embot_os_thecallbackmanager.o(.text._ZNK5embot2os18theCallbackManager7startedEv))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::start(embot::os::theCallbackManager::Config const&)
</UL>

<P><STRONG><a name="[2c2]"></a>embot::os::Timer::Config::isvalid() const</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, embot_os_timer.o(.text._ZNK5embot2os5Timer6Config7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::Timer::Config::isvalid() const &rArr; embot::os::Action::isvalid() const &rArr; embot::os::CallbackToThread::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::timertools::TMR::start(embot::os::Timer::Config const&, bool)
</UL>

<P><STRONG><a name="[346]"></a>embot::os::Action::isvalid() const</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, embot_os_action.o(.text._ZNK5embot2os6Action7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::os::Action::isvalid() const &rArr; embot::os::CallbackToThread::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackToThread::isvalid() const
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageToThread::isvalid() const
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::ValueToThread::isvalid() const
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventToThread::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Config::isvalid() const
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::execute(unsigned int)
</UL>

<P><STRONG><a name="[317]"></a>embot::os::Config::isvalid() const</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, embot_os.o(.text._ZNK5embot2os6Config7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::os::Config::isvalid() const &rArr; embot::os::InitThread::Config::isvalid() const &rArr; embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::Config::isvalid() const
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::Config::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::init(embot::os::Config const&)
</UL>

<P><STRONG><a name="[40f]"></a>embot::os::Thread::BaseConfig::isvalid() const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_os.o(.text._ZNK5embot2os6Thread10BaseConfig7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::priority::isvalid(embot::os::Priority)
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Config::isvalid() const
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::Config::isvalid() const
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::Config::isvalid() const
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::Config::isvalid() const
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::Config::isvalid() const
</UL>

<P><STRONG><a name="[358]"></a>embot::app::application::theCANparserMBD::Config::isvalid() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, embot_app_application_thecanparsermbd.o(.text._ZNK5embot3app11application15theCANparserMBD6Config7isvalidEv))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::initialise(embot::app::application::theCANparserMBD::Config const&)
</UL>

<P><STRONG><a name="[414]"></a>embot::app::theLEDmanager::get(embot::hw::LED) const</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, embot_app_theledmanager.o(.text._ZNK5embot3app13theLEDmanager3getENS_2hw3LEDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = embot::app::theLEDmanager::get(embot::hw::LED) const &rArr; std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::find&lang;embot::hw::LED&rang;(embot::hw::LED const&) &rArr; std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__lower_bound&lang;embot::hw::LED&rang;(embot::hw::LED const&, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang;* std::__2::__launder&lang;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang;*)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::find&lang;embot::hw::LED&rang;(embot::hw::LED const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const
</UL>

<P><STRONG><a name="[3b2]"></a>embot::app::theLEDmanager::Impl::initialised(embot::hw::LED) const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZNK5embot3app13theLEDmanager4Impl11initialisedENS_2hw3LEDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::theLEDmanager::Impl::initialised(embot::hw::LED) const
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::LED&rang;(embot::hw::LED)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::core::binary::bit::check&lang;unsigned int&rang;(unsigned int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::init(embot::hw::LED)
</UL>

<P><STRONG><a name="[3c3]"></a>embot::app::theApplication::Config::isvalid() const</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, embot_app_theapplication.o(.text._ZNK5embot3app14theApplication6Config7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = embot::app::theApplication::Config::isvalid() const &rArr; embot::os::theScheduler::Behaviour::isvalid() const &rArr; embot::os::InitThread::Config::isvalid() const &rArr; embot::os::Thread::BaseConfig::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Behaviour::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::execute(embot::app::theApplication::Config const&)
</UL>

<P><STRONG><a name="[125]"></a>embot::app::aSlimPulsableLED::id() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZNK5embot3app16aSlimPulsableLED2idEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
</UL>
<P><STRONG><a name="[124]"></a>embot::app::aSlimPulsableLED::supported() const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZNK5embot3app16aSlimPulsableLED9supportedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::app::aSlimPulsableLED::supported() const &rArr; embot::hw::led::supported(embot::hw::LED) &rArr; bool embot::hw::bsp::SUPP::supported&lang;embot::hw::LED&rang;(embot::hw::LED) const
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::led::supported(embot::hw::LED)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app16aSlimPulsableLEDE)
</UL>
<P><STRONG><a name="[130]"></a>embot::app::LEDwaveT&lang;(unsigned short)64&rang;::length() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNK5embot3app8LEDwaveTILt64EE6lengthEv))
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8LEDwaveTILt64EEE)
</UL>
<P><STRONG><a name="[133]"></a>embot::app::LEDwaveT&lang;(unsigned short)64&rang;::duplicate(void*, unsigned int) const</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, amcbldc-main.o(.text._ZNK5embot3app8LEDwaveTILt64EE9duplicateEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = embot::app::LEDwaveT&lang;(unsigned short)64&rang;::duplicate(void*, unsigned int) const &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDwaveT&lang;(unsigned short)64&rang;::LEDwaveT__sub_object(unsigned int, unsigned short, std::__2::bitset&lang;64u&rang;, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8LEDwaveTILt64EEE)
</UL>
<P><STRONG><a name="[131]"></a>embot::app::LEDwaveT&lang;(unsigned short)64&rang;::frequency() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNK5embot3app8LEDwaveTILt64EE9frequencyEv))
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8LEDwaveTILt64EEE)
</UL>
<P><STRONG><a name="[137]"></a>embot::app::skeleton::os::evthreadcan::evThreadCAN::userdefStartup(embot::os::Thread*, void*) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNK5embot3app8skeleton2os11evthreadcan11evThreadCAN14userdefStartupEPNS_2os6ThreadEPv))
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan11evThreadCANE)
</UL>
<P><STRONG><a name="[138]"></a>embot::app::skeleton::os::evthreadcan::evThreadCAN::userdefOnTimeout(embot::os::Thread*, unsigned int, void*) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNK5embot3app8skeleton2os11evthreadcan11evThreadCAN16userdefOnTimeoutEPNS_2os6ThreadEjPv))
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan11evThreadCANE)
</UL>
<P><STRONG><a name="[13a]"></a>embot::app::skeleton::os::evthreadcan::evThreadCAN::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNK5embot3app8skeleton2os11evthreadcan11evThreadCAN22userdefOnEventANYotherEPNS_2os6ThreadEjPvRNSt3__26vectorINS_4prot3can5FrameENS9_9allocatorISD_EEEE))
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan11evThreadCANE)
</UL>
<P><STRONG><a name="[139]"></a>embot::app::skeleton::os::evthreadcan::evThreadCAN::userdefOnEventRXcanframe(embot::os::Thread*, unsigned int, void*, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNK5embot3app8skeleton2os11evthreadcan11evThreadCAN24userdefOnEventRXcanframeEPNS_2os6ThreadEjPvRKNS_4prot3can5FrameERNSt3__26vectorISB_NSE_9allocatorISB_EEEE))
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan11evThreadCANE)
</UL>
<P><STRONG><a name="[417]"></a>embot::app::skeleton::os::evthreadcan::evThreadCAN::isvalid() const</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os11evthreadcan11evThreadCAN7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::skeleton::os::evthreadcan::evThreadCAN::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::evtConfig::isvalid() const
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::canConfig::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::CFG::isvalid() const
</UL>

<P><STRONG><a name="[cf]"></a>embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::userdefInit(void*) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os11evthreadcan12SYSTEMevtcan11userdefInitEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::userdefInit(void*) const &rArr; embot::app::skeleton::os::evthreadcan::start_evt_based() &rArr; embot::os::EventThread::start(embot::os::EventThread::Config const&, void (*)(void*)) &rArr; embot::os::rtos::scheduler_associate(void*, embot::os::Thread*) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::can_init(embot::os::Thread*)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::start_usr_services(embot::os::EventThread*, void*)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::start_evt_based()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> amcbldc-main.o(.rodata._ZTV5mySYS)
<LI> embot_app_skeleton_os_evthreadcan.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanE)
</UL>
<P><STRONG><a name="[13c]"></a>embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::userdefOnIdle(embot::os::Thread*, void*) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os11evthreadcan12SYSTEMevtcan13userdefOnIdleEPNS_2os6ThreadEPv))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_skeleton_os_evthreadcan.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanE)
</UL>
<P><STRONG><a name="[13d]"></a>embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::userdefonOSerror(void*) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os11evthreadcan12SYSTEMevtcan16userdefonOSerrorEPv))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_skeleton_os_evthreadcan.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanE)
</UL>
<P><STRONG><a name="[13e]"></a>embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::userdefInit_Extra(embot::os::EventThread*, void*) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os11evthreadcan12SYSTEMevtcan17userdefInit_ExtraEPNS_2os11EventThreadEPv))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_skeleton_os_evthreadcan.o(.rodata._ZTVN5embot3app8skeleton2os11evthreadcan12SYSTEMevtcanE)
</UL>
<P><STRONG><a name="[3d9]"></a>embot::app::skeleton::os::evthreadcan::CFG::isvalid() const</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os11evthreadcan3CFG7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::app::skeleton::os::evthreadcan::CFG::isvalid() const &rArr; embot::app::skeleton::os::basic::SYSTEM::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::SYSTEM::isvalid() const
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::evThreadCAN::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::run(embot::app::skeleton::os::evthreadcan::CFG const&)
</UL>

<P><STRONG><a name="[419]"></a>embot::app::skeleton::os::evthreadcan::canConfig::isvalid() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os11evthreadcan9canConfig7isvalidEv))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::evThreadCAN::isvalid() const
</UL>

<P><STRONG><a name="[418]"></a>embot::app::skeleton::os::evthreadcan::evtConfig::isvalid() const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os11evthreadcan9evtConfig7isvalidEv))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::evThreadCAN::isvalid() const
</UL>

<P><STRONG><a name="[3e0]"></a>embot::app::skeleton::os::basic::CFG::isvalid() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_app_skeleton_os_basic.o(.text._ZNK5embot3app8skeleton2os5basic3CFG7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::app::skeleton::os::basic::CFG::isvalid() const &rArr; embot::app::skeleton::os::basic::SYSTEM::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::SYSTEM::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&)
</UL>

<P><STRONG><a name="[140]"></a>embot::app::skeleton::os::basic::SYSTEM::userdefInit(void*) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNK5embot3app8skeleton2os5basic6SYSTEM11userdefInitEPv))
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os5basic6SYSTEME)
</UL>
<P><STRONG><a name="[141]"></a>embot::app::skeleton::os::basic::SYSTEM::userdefOnIdle(embot::os::Thread*, void*) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNK5embot3app8skeleton2os5basic6SYSTEM13userdefOnIdleEPNS_2os6ThreadEPv))
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os5basic6SYSTEME)
</UL>
<P><STRONG><a name="[142]"></a>embot::app::skeleton::os::basic::SYSTEM::userdefonOSerror(void*) const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNK5embot3app8skeleton2os5basic6SYSTEM16userdefonOSerrorEPv))
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app8skeleton2os5basic6SYSTEME)
</UL>
<P><STRONG><a name="[41b]"></a>embot::app::skeleton::os::basic::SYSTEM::isvalid() const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os5basic6SYSTEM7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::app::skeleton::os::basic::SYSTEM::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::sysConfig::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::CFG::isvalid() const
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::CFG::isvalid() const
</UL>

<P><STRONG><a name="[41c]"></a>embot::app::skeleton::os::basic::sysConfig::isvalid() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, embot_app_skeleton_os_evthreadcan.o(.text._ZNK5embot3app8skeleton2os5basic9sysConfig7isvalidEv))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::SYSTEM::isvalid() const
</UL>

<P><STRONG><a name="[145]"></a>embot::app::aDummyLED::id() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZNK5embot3app9aDummyLED2idEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
</UL>
<P><STRONG><a name="[144]"></a>embot::app::aDummyLED::supported() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZNK5embot3app9aDummyLED9supportedEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app9aDummyLEDE)
</UL>
<P><STRONG><a name="[41d]"></a>embot::core::TimeConfig::isvalid() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, embot_core.o(.text._ZNK5embot4core10TimeConfig7isvalidEv))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Config::isvalid() const
</UL>

<P><STRONG><a name="[3e8]"></a>embot::core::Config::isvalid() const</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_core.o(.text._ZNK5embot4core6Config7isvalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::core::Config::isvalid() const
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::TimeConfig::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::init(embot::core::Config const&)
</UL>

<P><STRONG><a name="[269]"></a>embot::core::Callback::execute() const</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, embot_hw_can.o(.text._ZNK5embot4core8Callback7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::core::Callback::execute() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::isvalid() const
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_oneframehasgone(embot::hw::CAN, __FDCAN_HandleTypeDef*)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackToThread::execute(unsigned int)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::osOnError(void*, int, char const*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::Impl::os_callbackdriven_loop(void*)
</UL>

<P><STRONG><a name="[2f9]"></a>embot::core::Callback::isvalid() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, embot_hw_can.o(.text._ZNK5embot4core8Callback7isvalidEv))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::execute() const
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackToThread::isvalid() const
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::setCallback(embot::core::Callback const&, unsigned int)
</UL>

<P><STRONG><a name="[373]"></a>embot::prot::can::Frame::copyto(unsigned int&, unsigned char&, unsigned char*) const</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, embot_app_application_thecanparsermbd.o(.text._ZNK5embot4prot3can5Frame6copytoERjRhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::prot::can::Frame::copyto(unsigned int&, unsigned char&, unsigned char*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[c9]"></a>myEVT::userdefStartup(embot::os::Thread*, void*) const</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, amcbldc-main.o(.text._ZNK5myEVT14userdefStartupEPN5embot2os6ThreadEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = myEVT::userdefStartup(embot::os::Thread*, void*) const &rArr; embot::os::Timer::start(embot::os::Timer::Config const&, bool) &rArr; embot::os::timertools::TMR::start(embot::os::Timer::Config const&, bool) &rArr; embot::os::rtos::timer_start(void*, embot::os::rtos::timerMode, unsigned int, void (*)(void*, void*), void*) &rArr; osal_timer_start &rArr; oosiit_advtmr_start &rArr; isr_iit_advtmr_start &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Action::Action__sub_object(embot::os::EventToThread const&)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Timer()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Config::Config__sub_object(unsigned int, embot::os::Action const&, embot::os::Timer::Mode, unsigned int)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::start(embot::os::Timer::Config const&, bool)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventToThread::EventToThread__sub_object(unsigned int, embot::os::Thread*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTV5myEVT)
</UL>
<P><STRONG><a name="[ca]"></a>myEVT::userdefOnTimeout(embot::os::Thread*, unsigned int, void*) const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNK5myEVT16userdefOnTimeoutEPN5embot2os6ThreadEjPv))
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTV5myEVT)
</UL>
<P><STRONG><a name="[cc]"></a>myEVT::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, amcbldc-main.o(.text._ZNK5myEVT22userdefOnEventANYotherEPN5embot2os6ThreadEjPvRNSt3__26vectorINS0_4prot3can5FrameENS5_9allocatorIS9_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = myEVT::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const &rArr; shared_t::gettx(embot::prot::can::Frame&, unsigned int&) &rArr; embot::os::rtos::mutex_release(void*) &rArr; osal_mutex_release &rArr; oosiit_mut_release &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&, unsigned int)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::max_size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__vector_base_common&lang;true&rang;::__throw_length_error() const
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::gettx(embot::prot::can::Frame&, unsigned int&)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::Frame::Frame__sub_object()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool embot::core::binary::mask::check&lang;unsigned int&rang;(unsigned int, unsigned int, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTV5myEVT)
</UL>
<P><STRONG><a name="[cb]"></a>myEVT::userdefOnEventRXcanframe(embot::os::Thread*, unsigned int, void*, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, amcbldc-main.o(.text._ZNK5myEVT24userdefOnEventRXcanframeEPN5embot2os6ThreadEjPvRKNS0_4prot3can5FrameERNSt3__26vectorIS7_NSA_9allocatorIS7_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = myEVT::userdefOnEventRXcanframe(embot::os::Thread*, unsigned int, void*, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const &rArr; embot::app::application::theCANparserBasic::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserBasic::Impl::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addrx(embot::prot::can::Frame const&)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::process(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::getInstance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTV5myEVT)
</UL>
<P><STRONG><a name="[d0]"></a>mySYS::userdefOnIdle(embot::os::Thread*, void*) const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNK5mySYS13userdefOnIdleEPN5embot2os6ThreadEPv))
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTV5mySYS)
</UL>
<P><STRONG><a name="[d1]"></a>mySYS::userdefonOSerror(void*) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNK5mySYS16userdefonOSerrorEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = mySYS::userdefonOSerror(void*) const &rArr; embot::os::theScheduler::getInstance() &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::getOSerror(int&) const
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::getInstance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTV5mySYS)
</UL>
<P><STRONG><a name="[d2]"></a>mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, amcbldc-main.o(.text._ZNK5mySYS17userdefInit_ExtraEPN5embot2os11EventThreadEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const &rArr; embot::app::theLEDmanager::init(std::initializer_list&lang;embot::hw::LED&rang; const&) &rArr; embot::app::theLEDmanager::Impl::init(embot::hw::LED) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__emplace_unique_key_args&lang;embot::hw::LED, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(embot::hw::LED const&, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::~basic_string__sub_object()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::char_traits&lang;char&rang;::length(char const*)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::get(embot::hw::LED) const
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::print(std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang; const&)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDwaveT&lang;(unsigned short)64&rang;::~LEDwaveT__sub_object()
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDwaveT&lang;(unsigned short)64&rang;::LEDwaveT__sub_object(unsigned int, unsigned short, std::__2::bitset&lang;64u&rang;, unsigned short)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::init(std::initializer_list&lang;embot::hw::LED&rang; const&)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::getInstance()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::getInstance()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::initialise(embot::app::application::theCANparserBasic::Config const&)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_start_CTRL_thread()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_shared_start()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.rodata._ZTV5mySYS)
</UL>
<P><STRONG><a name="[252]"></a>std::__2::__vector_base_common&lang;true&rang;::__throw_length_error() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vector.cpp.o(.text._ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = std::__2::__vector_base_common&lang;true&rang;::__throw_length_error() const &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addtx(embot::prot::can::Frame const&)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addrx(embot::prot::can::Frame const&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[42d]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__root_ptr() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZNKSt3__26__treeINS_12__value_typeIN5embot2hw3LEDENS2_3app16aSlimPulsableLEDEEENS_19__map_value_compareIS4_S7_NS_4lessIS4_EELb1EEENS_9allocatorIS7_EEE10__root_ptrEv))
<BR><BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_node_base&lang;void*&rang;*& std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__find_equal&lang;embot::hw::LED&rang;(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*&, embot::hw::LED const&)
</UL>

<P><STRONG><a name="[434]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__root_ptr() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZNKSt3__26__treeINS_12__value_typeIPvPN5embot2os6ThreadEEENS_19__map_value_compareIS2_S7_NS_4lessIS2_EELb1EEENS_9allocatorIS7_EEE10__root_ptrEv))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_node_base&lang;void*&rang;*& std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__find_equal&lang;void*&rang;(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*&, void* const&)
</UL>

<P><STRONG><a name="[24d]"></a>std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::max_size() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, embot_hw_can.o(.text._ZNKSt3__26vectorIN5embot2hw3can5FrameENS_9allocatorIS4_EEE8max_sizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[36a]"></a>std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::max_size() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNKSt3__26vectorIN5embot4prot3can5FrameENS_9allocatorIS4_EEE8max_sizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addtx(embot::prot::can::Frame const&)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addrx(embot::prot::can::Frame const&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[424]"></a>std::__2::__tree_node_base&lang;void*&rang;* std::__2::__tree_next&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZNSt3__211__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_remove&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>

<P><STRONG><a name="[219]"></a>std::__2::char_traits&lang;char&rang;::length(char const*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZNSt3__211char_traitsIcE6lengthEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::__2::char_traits&lang;char&rang;::length(char const*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_pre_main_t::on_fatal(void*, osal_fatalerror_t, char const*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::osOnError(void*, int, char const*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::tostring(embot::prot::can::motor::polling::MotIndex)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::tostring(embot::prot::can::motor::polling::ControlMode)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::onrecognisedframe(void*)
</UL>

<P><STRONG><a name="[420]"></a>std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__grow_by_and_replace(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char const*)</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, string.cpp.o(.text._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__grow_by_and_replace(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char const*) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::insert(unsigned int, char const*, unsigned int)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*, unsigned int)
</UL>

<P><STRONG><a name="[21a]"></a>std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, string.cpp.o(.text._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_pre_main_t::on_fatal(void*, osal_fatalerror_t, char const*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::osOnError(void*, int, char const*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::tostring(embot::prot::can::motor::polling::MotIndex)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::prot::can::motor::polling::tostring(embot::prot::can::motor::polling::ControlMode)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::onrecognisedframe(void*)
</UL>

<P><STRONG><a name="[2de]"></a>std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, string.cpp.o(.text._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::osOnError(void*, int, char const*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Info const&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Info const&)
</UL>

<P><STRONG><a name="[350]"></a>std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*, unsigned int)</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, string.cpp.o(.text._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::append(char const*, unsigned int) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__grow_by_and_replace(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char const*) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__grow_by_and_replace(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char const*)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Info const&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Info const&)
</UL>

<P><STRONG><a name="[21b]"></a>std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::insert(unsigned int, char const*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, string.cpp.o(.text._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::insert(unsigned int, char const*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_pre_main_t::on_fatal(void*, osal_fatalerror_t, char const*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Info const&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Info const&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::Info const&, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo&)
</UL>

<P><STRONG><a name="[421]"></a>std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::insert(unsigned int, char const*, unsigned int)</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, string.cpp.o(.text._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__grow_by_and_replace(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char const*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[422]"></a>std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::~basic_string()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, string.cpp.o(.text._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>

<P><STRONG><a name="[21d]"></a>std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::~basic_string__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, string.cpp.o(.text._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::~basic_string__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::userdefInit_Extra(embot::os::EventThread*, void*) const
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_pre_main_t::on_fatal(void*, osal_fatalerror_t, char const*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::Impl::osOnError(void*, int, char const*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Info const&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_SET_CONTROL_MODE::Info const&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::Info const&, embot::prot::can::motor::polling::Message_GET_CONTROL_MODE::ReplyInfo&)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::onrecognisedframe(void*)
</UL>

<P><STRONG><a name="[423]"></a>void std::__2::__tree_remove&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, embot_os_rtos.o(.text._ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_right_rotate&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_left_rotate&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_node_base&lang;void*&rang;* std::__2::__tree_next&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::erase(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;)
</UL>

<P><STRONG><a name="[427]"></a>std::__2::__vector_base&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::~__vector_base__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZNSt3__213__vector_baseIN5embot4prot3can5FrameENS_9allocatorIS4_EEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__2::__vector_base&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::~__vector_base__sub_object() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::~vector__sub_object()
</UL>

<P><STRONG><a name="[3d2]"></a>void std::__2::__fill_n_false&lang;std::__2::__bitset&lang;2u, 64u&rang; &rang;(std::__2::__bit_iterator&lang;std::__2::__bitset&lang;2u, 64u&rang;, false, 0&rang;, std::__2::__bitset&lang;2u, 64u&rang;::size_type)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, amcbldc-main.o(.text._ZNSt3__214__fill_n_falseINS_8__bitsetILj2ELj64EEEEEvNS_14__bit_iteratorIT_Lb0ELi0EEENS4_9size_typeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = void std::__2::__fill_n_false&lang;std::__2::__bitset&lang;2u, 64u&rang; &rang;(std::__2::__bit_iterator&lang;std::__2::__bitset&lang;2u, 64u&rang;, false, 0&rang;, std::__2::__bitset&lang;2u, 64u&rang;::size_type)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDwaveT&lang;(unsigned short)64&rang;::~LEDwaveT__sub_object()
</UL>

<P><STRONG><a name="[24e]"></a>std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, embot_hw_can.o(.text._ZNSt3__214__split_bufferIN5embot2hw3can5FrameERNS_9allocatorIS4_EEEC2EjjS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::reserve(unsigned int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[250]"></a>std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::~__split_buffer__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, embot_hw_can.o(.text._ZNSt3__214__split_bufferIN5embot2hw3can5FrameERNS_9allocatorIS4_EEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::~__split_buffer__sub_object() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::reserve(unsigned int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[36b]"></a>std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, amcbldc-main.o(.text._ZNSt3__214__split_bufferIN5embot4prot3can5FrameERNS_9allocatorIS4_EEEC2EjjS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::reserve(unsigned int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addtx(embot::prot::can::Frame const&)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addrx(embot::prot::can::Frame const&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[36d]"></a>std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::~__split_buffer__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZNSt3__214__split_bufferIN5embot4prot3can5FrameERNS_9allocatorIS4_EEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::~__split_buffer__sub_object() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::reserve(unsigned int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addtx(embot::prot::can::Frame const&)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addrx(embot::prot::can::Frame const&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[425]"></a>void std::__2::__tree_left_rotate&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_balance_after_insert&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_remove&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>

<P><STRONG><a name="[426]"></a>void std::__2::__tree_right_rotate&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_balance_after_insert&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_remove&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>

<P><STRONG><a name="[428]"></a>void std::__2::__tree_balance_after_insert&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, embot_os_rtos.o(.text._ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = void std::__2::__tree_balance_after_insert&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_right_rotate&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_left_rotate&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__insert_node_at(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*&, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__insert_node_at(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*&, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>

<P><STRONG><a name="[a3]"></a>std::__2::map&lang;void*, embot::os::Thread*, std::__2::less&lang;void*&rang;, std::__2::allocator&lang;std::__2::pair&lang;void* const, embot::os::Thread*&rang; &rang; &rang;::~map__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZNSt3__23mapIPvPN5embot2os6ThreadENS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S5_EEEEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::__2::map&lang;void*, embot::os::Thread*, std::__2::less&lang;void*&rang;, std::__2::allocator&lang;std::__2::pair&lang;void* const, embot::os::Thread*&rang; &rang; &rang;::~map__sub_object() &rArr; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::~__tree__sub_object() &rArr; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::~__tree__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_rtos.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[42a]"></a>std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang;::~pair__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZNSt3__24pairIKN5embot2hw3LEDENS1_3app16aSlimPulsableLEDEED2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDhandle::~LEDhandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*)
</UL>

<P><STRONG><a name="[3b6]"></a>std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;::~pair__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZNSt3__24pairIN5embot2hw3LEDENS1_3app16aSlimPulsableLEDEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;::~pair__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDhandle::~LEDhandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::init(embot::hw::LED)
</UL>

<P><STRONG><a name="[29a]"></a>std::__2::array&lang;embot::hw::motor::TBDef, 4u&rang;::array__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, embot_hw_motor.o(.text._ZNSt3__25arrayIN5embot2hw5motor5TBDefELj4EEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::array&lang;embot::hw::motor::TBDef, 4u&rang;::array__sub_object() &rArr; embot::hw::motor::TBDef::TBDef__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::motor::TBDef::TBDef__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::motor::PrivateData::PrivateData__sub_object()
</UL>

<P><STRONG><a name="[299]"></a>std::__2::array&lang;embot::hw::motor::Config, 4u&rang;::array__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, embot_hw_motor.o(.text._ZNSt3__25arrayIN5embot2hw5motor6ConfigELj4EEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::__2::array&lang;embot::hw::motor::Config, 4u&rang;::array__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::motor::Config::Config__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::motor::PrivateData::PrivateData__sub_object()
</UL>

<P><STRONG><a name="[43b]"></a>std::__2::__itoa::__u32toa(unsigned int, char*)</STRONG> (Thumb, 728 bytes, Stack size 28 bytes, charconv.cpp.o(.text._ZNSt3__26__itoa8__u32toaEjPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = std::__2::__itoa::__u32toa(unsigned int, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::to_string(int)
</UL>

<P><STRONG><a name="[42c]"></a>std::__2::__tree_node_base&lang;void*&rang;*& std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__find_equal&lang;embot::hw::LED&rang;(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*&, embot::hw::LED const&)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, embot_app_theledmanager.o(.text._ZNSt3__26__treeINS_12__value_typeIN5embot2hw3LEDENS2_3app16aSlimPulsableLEDEEENS_19__map_value_compareIS4_S7_NS_4lessIS4_EELb1EEENS_9allocatorIS7_EEE12__find_equalIS4_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISJ_EERKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::__tree_node_base&lang;void*&rang;*& std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__find_equal&lang;embot::hw::LED&rang;(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*&, embot::hw::LED const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; const* std::__2::__launder&lang;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; const&rang;(std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; const*)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__root_ptr() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__emplace_unique_key_args&lang;embot::hw::LED, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(embot::hw::LED const&, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&)
</UL>

<P><STRONG><a name="[42f]"></a>std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__lower_bound&lang;embot::hw::LED&rang;(embot::hw::LED const&, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, embot_app_theledmanager.o(.text._ZNSt3__26__treeINS_12__value_typeIN5embot2hw3LEDENS2_3app16aSlimPulsableLEDEEENS_19__map_value_compareIS4_S7_NS_4lessIS4_EELb1EEENS_9allocatorIS7_EEE13__lower_boundIS4_EENS_15__tree_iteratorIS7_PNS_11__tree_nodeIS7_PvEEiEERKT_SK_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISI_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__lower_bound&lang;embot::hw::LED&rang;(embot::hw::LED const&, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; const* std::__2::__launder&lang;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; const&rang;(std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::find&lang;embot::hw::LED&rang;(embot::hw::LED const&)
</UL>

<P><STRONG><a name="[430]"></a>std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, embot_app_theledmanager.o(.text._ZNSt3__26__treeINS_12__value_typeIN5embot2hw3LEDENS2_3app16aSlimPulsableLEDEEENS_19__map_value_compareIS4_S7_NS_4lessIS4_EELb1EEENS_9allocatorIS7_EEE16__construct_nodeIJNS_4pairIS4_S6_EEEEENS_10unique_ptrINS_11__tree_nodeIS7_PvEENS_22__tree_node_destructorINSC_ISL_EEEEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang;* std::__2::__launder&lang;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang;*)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::aSlimPulsableLED__sub_object(embot::app::aSlimPulsableLED const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__emplace_unique_key_args&lang;embot::hw::LED, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(embot::hw::LED const&, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&)
</UL>

<P><STRONG><a name="[431]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__insert_node_at(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*&, std::__2::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZNSt3__26__treeINS_12__value_typeIN5embot2hw3LEDENS2_3app16aSlimPulsableLEDEEENS_19__map_value_compareIS4_S7_NS_4lessIS4_EELb1EEENS_9allocatorIS7_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSJ_SJ_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__insert_node_at(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*&, std::__2::__tree_node_base&lang;void*&rang;*) &rArr; void std::__2::__tree_balance_after_insert&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_balance_after_insert&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__emplace_unique_key_args&lang;embot::hw::LED, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(embot::hw::LED const&, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&)
</UL>

<P><STRONG><a name="[3b5]"></a>std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__emplace_unique_key_args&lang;embot::hw::LED, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(embot::hw::LED const&, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, embot_app_theledmanager.o(.text._ZNSt3__26__treeINS_12__value_typeIN5embot2hw3LEDENS2_3app16aSlimPulsableLEDEEENS_19__map_value_compareIS4_S7_NS_4lessIS4_EELb1EEENS_9allocatorIS7_EEE25__emplace_unique_key_argsIS4_JNS_4pairIS4_S6_EEEEENSG_INS_15__tree_iteratorIS7_PNS_11__tree_nodeIS7_PvEEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__emplace_unique_key_args&lang;embot::hw::LED, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(embot::hw::LED const&, std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__insert_node_at(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*&, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_node_base&lang;void*&rang;*& std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__find_equal&lang;embot::hw::LED&rang;(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*&, embot::hw::LED const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::init(embot::hw::LED)
</UL>

<P><STRONG><a name="[415]"></a>std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::find&lang;embot::hw::LED&rang;(embot::hw::LED const&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, embot_app_theledmanager.o(.text._ZNSt3__26__treeINS_12__value_typeIN5embot2hw3LEDENS2_3app16aSlimPulsableLEDEEENS_19__map_value_compareIS4_S7_NS_4lessIS4_EELb1EEENS_9allocatorIS7_EEE4findIS4_EENS_15__tree_iteratorIS7_PNS_11__tree_nodeIS7_PvEEiEERKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::find&lang;embot::hw::LED&rang;(embot::hw::LED const&) &rArr; std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__lower_bound&lang;embot::hw::LED&rang;(embot::hw::LED const&, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; const* std::__2::__launder&lang;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; const&rang;(std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; const*)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__lower_bound&lang;embot::hw::LED&rang;(embot::hw::LED const&, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::get(embot::hw::LED) const
</UL>

<P><STRONG><a name="[432]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, embot_app_theledmanager.o(.text._ZNSt3__26__treeINS_12__value_typeIN5embot2hw3LEDENS2_3app16aSlimPulsableLEDEEENS_19__map_value_compareIS4_S7_NS_4lessIS4_EELb1EEENS_9allocatorIS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang;* std::__2::__launder&lang;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang;*)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang;::~pair__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::~__tree__sub_object()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*)
</UL>

<P><STRONG><a name="[3b8]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__tree__sub_object(std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang; const&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZNSt3__26__treeINS_12__value_typeIN5embot2hw3LEDENS2_3app16aSlimPulsableLEDEEENS_19__map_value_compareIS4_S7_NS_4lessIS4_EELb1EEENS_9allocatorIS7_EEEC2ERKSB_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::Impl__sub_object()
</UL>

<P><STRONG><a name="[3bb]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::~__tree__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, embot_app_theledmanager.o(.text._ZNSt3__26__treeINS_12__value_typeIN5embot2hw3LEDENS2_3app16aSlimPulsableLEDEEENS_19__map_value_compareIS4_S7_NS_4lessIS4_EELb1EEENS_9allocatorIS7_EEED2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[433]"></a>std::__2::__tree_node_base&lang;void*&rang;*& std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__find_equal&lang;void*&rang;(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*&, void* const&)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, embot_os_rtos.o(.text._ZNSt3__26__treeINS_12__value_typeIPvPN5embot2os6ThreadEEENS_19__map_value_compareIS2_S7_NS_4lessIS2_EELb1EEENS_9allocatorIS7_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIS2_EERPNS_15__tree_end_nodeISI_EERKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::__tree_node_base&lang;void*&rang;*& std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__find_equal&lang;void*&rang;(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*&, void* const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__root_ptr() const
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;void* const, embot::os::Thread*&rang; const* std::__2::__launder&lang;std::__2::pair&lang;void* const, embot::os::Thread*&rang; const&rang;(std::__2::pair&lang;void* const, embot::os::Thread*&rang; const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&)
</UL>

<P><STRONG><a name="[436]"></a>std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__lower_bound&lang;void*&rang;(void* const&, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, embot_os_rtos.o(.text._ZNSt3__26__treeINS_12__value_typeIPvPN5embot2os6ThreadEEENS_19__map_value_compareIS2_S7_NS_4lessIS2_EELb1EEENS_9allocatorIS7_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS7_PNS_11__tree_nodeIS7_S2_EEiEERKT_SJ_PNS_15__tree_end_nodeIPNS_16__tree_node_baseIS2_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__lower_bound&lang;void*&rang;(void* const&, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*)
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;void* const, embot::os::Thread*&rang; const* std::__2::__launder&lang;std::__2::pair&lang;void* const, embot::os::Thread*&rang; const&rang;(std::__2::pair&lang;void* const, embot::os::Thread*&rang; const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::find&lang;void*&rang;(void* const&)
</UL>

<P><STRONG><a name="[339]"></a>unsigned int std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__erase_unique&lang;void*&rang;(void* const&)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZNSt3__26__treeINS_12__value_typeIPvPN5embot2os6ThreadEEENS_19__map_value_compareIS2_S7_NS_4lessIS2_EELb1EEENS_9allocatorIS7_EEE14__erase_uniqueIS2_EEjRKT_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::erase(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::find&lang;void*&rang;(void* const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_deassociate(void*, embot::os::Thread*)
</UL>

<P><STRONG><a name="[438]"></a>std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, embot_os_rtos.o(.text._ZNSt3__26__treeINS_12__value_typeIPvPN5embot2os6ThreadEEENS_19__map_value_compareIS2_S7_NS_4lessIS2_EELb1EEENS_9allocatorIS7_EEE16__construct_nodeIJNS_4pairIS2_S6_EEEEENS_10unique_ptrINS_11__tree_nodeIS7_S2_EENS_22__tree_node_destructorINSC_ISK_EEEEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;void* const, embot::os::Thread*&rang;* std::__2::__launder&lang;std::__2::pair&lang;void* const, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void* const, embot::os::Thread*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&)
</UL>

<P><STRONG><a name="[439]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__insert_node_at(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*&, std::__2::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZNSt3__26__treeINS_12__value_typeIPvPN5embot2os6ThreadEEENS_19__map_value_compareIS2_S7_NS_4lessIS2_EELb1EEENS_9allocatorIS7_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIS2_EEEERSI_SI_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__insert_node_at(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*&, std::__2::__tree_node_base&lang;void*&rang;*) &rArr; void std::__2::__tree_balance_after_insert&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_balance_after_insert&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&)
</UL>

<P><STRONG><a name="[337]"></a>std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, embot_os_rtos.o(.text._ZNSt3__26__treeINS_12__value_typeIPvPN5embot2os6ThreadEEENS_19__map_value_compareIS2_S7_NS_4lessIS2_EELb1EEENS_9allocatorIS7_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_S6_EEEEENSG_INS_15__tree_iteratorIS7_PNS_11__tree_nodeIS7_S2_EEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__emplace_unique_key_args&lang;void*, std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(void* const&, std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_node_base&lang;void*&rang;*& std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__find_equal&lang;void*&rang;(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*&, void* const&)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__insert_node_at(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*&, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_associate(void*, embot::os::Thread*)
</UL>

<P><STRONG><a name="[33a]"></a>std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::find&lang;void*&rang;(void* const&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, embot_os_rtos.o(.text._ZNSt3__26__treeINS_12__value_typeIPvPN5embot2os6ThreadEEENS_19__map_value_compareIS2_S7_NS_4lessIS2_EELb1EEENS_9allocatorIS7_EEE4findIS2_EENS_15__tree_iteratorIS7_PNS_11__tree_nodeIS7_S2_EEiEERKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::find&lang;void*&rang;(void* const&) &rArr; std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__lower_bound&lang;void*&rang;(void* const&, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*)
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__lower_bound&lang;void*&rang;(void* const&, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;void* const, embot::os::Thread*&rang; const* std::__2::__launder&lang;std::__2::pair&lang;void* const, embot::os::Thread*&rang; const&rang;(std::__2::pair&lang;void* const, embot::os::Thread*&rang; const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_getassociated(void*)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned int std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__erase_unique&lang;void*&rang;(void* const&)
</UL>

<P><STRONG><a name="[437]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::erase(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, embot_os_rtos.o(.text._ZNSt3__26__treeINS_12__value_typeIPvPN5embot2os6ThreadEEENS_19__map_value_compareIS2_S7_NS_4lessIS2_EELb1EEENS_9allocatorIS7_EEE5eraseENS_21__tree_const_iteratorIS7_PNS_11__tree_nodeIS7_S2_EEiEE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_remove&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;void* const, embot::os::Thread*&rang;* std::__2::__launder&lang;std::__2::pair&lang;void* const, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void* const, embot::os::Thread*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned int std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__erase_unique&lang;void*&rang;(void* const&)
</UL>

<P><STRONG><a name="[43a]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, embot_os_rtos.o(.text._ZNSt3__26__treeINS_12__value_typeIPvPN5embot2os6ThreadEEENS_19__map_value_compareIS2_S7_NS_4lessIS2_EELb1EEENS_9allocatorIS7_EEE7destroyEPNS_11__tree_nodeIS7_S2_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;void* const, embot::os::Thread*&rang;* std::__2::__launder&lang;std::__2::pair&lang;void* const, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void* const, embot::os::Thread*&rang;*)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::~__tree__sub_object()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*)
</UL>

<P><STRONG><a name="[43f]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__tree__sub_object(std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang; const&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZNSt3__26__treeINS_12__value_typeIPvPN5embot2os6ThreadEEENS_19__map_value_compareIS2_S7_NS_4lessIS2_EELb1EEENS_9allocatorIS7_EEEC2ERKSB_))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[429]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::~__tree__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZNSt3__26__treeINS_12__value_typeIPvPN5embot2os6ThreadEEENS_19__map_value_compareIS2_S7_NS_4lessIS2_EELb1EEENS_9allocatorIS7_EEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::~__tree__sub_object() &rArr; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::map&lang;void*, embot::os::Thread*, std::__2::less&lang;void*&rang;, std::__2::allocator&lang;std::__2::pair&lang;void* const, embot::os::Thread*&rang; &rang; &rang;::~map__sub_object()
</UL>

<P><STRONG><a name="[24b]"></a>std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;&, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, embot_hw_can.o(.text._ZNSt3__26vectorIN5embot2hw3can5FrameENS_9allocatorIS4_EEE21_ConstructTransactionC2ERS7_j))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[24c]"></a>std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, embot_hw_can.o(.text._ZNSt3__26vectorIN5embot2hw3can5FrameENS_9allocatorIS4_EEE21_ConstructTransactionD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[24f]"></a>std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, embot_hw_can.o(.text._ZNSt3__26vectorIN5embot2hw3can5FrameENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;&) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::reserve(unsigned int)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[257]"></a>std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::reserve(unsigned int)</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, embot_hw_can.o(.text._ZNSt3__26vectorIN5embot2hw3can5FrameENS_9allocatorIS4_EEE7reserveEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::reserve(unsigned int) &rArr; std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;&)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)
</UL>

<P><STRONG><a name="[368]"></a>std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&, unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNSt3__26vectorIN5embot4prot3can5FrameENS_9allocatorIS4_EEE21_ConstructTransactionC2ERS7_j))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addtx(embot::prot::can::Frame const&)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addrx(embot::prot::can::Frame const&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[369]"></a>std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, amcbldc-main.o(.text._ZNSt3__26vectorIN5embot4prot3can5FrameENS_9allocatorIS4_EEE21_ConstructTransactionD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addtx(embot::prot::can::Frame const&)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addrx(embot::prot::can::Frame const&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[36c]"></a>std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, amcbldc-main.o(.text._ZNSt3__26vectorIN5embot4prot3can5FrameENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;&) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::reserve(unsigned int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefOnEventANYother(embot::os::Thread*, unsigned int, void*, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&) const
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addtx(embot::prot::can::Frame const&)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::addrx(embot::prot::can::Frame const&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_getadditionalinfo(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_getfirmwareversion(embot::prot::can::Clas, unsigned char, embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_broadcast_appl(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::Impl::process_bl_gettimeoflife(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::legacy_process_get_controlmode(embot::prot::can::Frame const&, std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;&)
</UL>

<P><STRONG><a name="[1e9]"></a>std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::reserve(unsigned int)</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, amcbldc-main.o(.text._ZNSt3__26vectorIN5embot4prot3can5FrameENS_9allocatorIS4_EEE7reserveEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::reserve(unsigned int) &rArr; std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;&)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shared_t::shared_t__sub_object()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_startup(embot::os::Thread*, void*)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::can_init(embot::os::Thread*)
</UL>

<P><STRONG><a name="[a4]"></a>std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::~vector__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, amcbldc-main.o(.text._ZNSt3__26vectorIN5embot4prot3can5FrameENS_9allocatorIS4_EEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::__2::vector&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::~vector__sub_object() &rArr; std::__2::__vector_base&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::~__vector_base__sub_object() &rArr; operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__vector_base&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::~__vector_base__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> amcbldc-main.o(.text.__cxx_global_var_init.6)
<LI> embot_app_skeleton_os_evthreadcan.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[42e]"></a>std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; const* std::__2::__launder&lang;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; const&rang;(std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; const*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZNSt3__29__launderIKNS_4pairIKN5embot2hw3LEDENS2_3app16aSlimPulsableLEDEEEEEPT_SB_))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::find&lang;embot::hw::LED&rang;(embot::hw::LED const&)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__lower_bound&lang;embot::hw::LED&rang;(embot::hw::LED const&, std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_node_base&lang;void*&rang;*& std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__find_equal&lang;embot::hw::LED&rang;(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*&, embot::hw::LED const&)
</UL>

<P><STRONG><a name="[435]"></a>std::__2::pair&lang;void* const, embot::os::Thread*&rang; const* std::__2::__launder&lang;std::__2::pair&lang;void* const, embot::os::Thread*&rang; const&rang;(std::__2::pair&lang;void* const, embot::os::Thread*&rang; const*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZNSt3__29__launderIKNS_4pairIKPvPN5embot2os6ThreadEEEEEPT_SB_))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__lower_bound&lang;void*&rang;(void* const&, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_node_base&lang;void*&rang;*& std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__find_equal&lang;void*&rang;(std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*&, void* const&)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::find&lang;void*&rang;(void* const&)
</UL>

<P><STRONG><a name="[416]"></a>std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang;* std::__2::__launder&lang;std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED const, embot::app::aSlimPulsableLED&rang;*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_app_theledmanager.o(.text._ZNSt3__29__launderINS_4pairIKN5embot2hw3LEDENS2_3app16aSlimPulsableLEDEEEEEPT_SA_))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::get(embot::hw::LED) const
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&)
</UL>

<P><STRONG><a name="[33b]"></a>std::__2::pair&lang;void* const, embot::os::Thread*&rang;* std::__2::__launder&lang;std::__2::pair&lang;void* const, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void* const, embot::os::Thread*&rang;*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, embot_os_rtos.o(.text._ZNSt3__29__launderINS_4pairIKPvPN5embot2os6ThreadEEEEEPT_SA_))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_getassociated(void*)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::erase(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&)
</UL>

<P><STRONG><a name="[351]"></a>std::__2::to_string(int)</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, string.cpp.o(.text._ZNSt3__29to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = std::__2::to_string(int) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__itoa::__u32toa(unsigned int, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::get(embot::prot::can::motor::periodic::Message_EMSTO2FOC_DESIRED_CURRENT::Info const&)
</UL>

<P><STRONG><a name="[226]"></a>operator delete[](void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdaPv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::Impl::~Impl__sub_object()
</UL>

<P><STRONG><a name="[22c]"></a>operator delete(void*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = operator delete(void*) &rArr; osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_base_memory_del
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::~FlashStorage()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::~FlashStorage__deallocating()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__vector_base&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang; &rang;::~__vector_base__sub_object()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::~mySYS__deallocating()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::~myEVT__deallocating()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::SYSTEM::~SYSTEM__deallocating()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::evThreadCAN::~evThreadCAN__deallocating()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDwaveT&lang;(unsigned short)64&rang;::~LEDwaveT__deallocating()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::theTimerManager()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::~scheduler_props_t()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::theScheduler()
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theJumper::theJumper()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::theCallbackManager()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::~thread_props_t()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::~CallbackThread()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::~CallbackThread__deallocating()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::~MessageThread()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::~MessageThread__deallocating()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::~EventThread()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::~EventThread__deallocating()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::~InitThread()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::~InitThread__deallocating()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::InitThread()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::~IdleThread()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::~IdleThread__deallocating()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::IdleThread()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::theCANboardInfo()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::theApplication()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::~SYSTEMevtcan__deallocating()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::theCANparserBasic()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::erase(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;*, int&rang;)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::~theMBDagent()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::~theMBDagent__deallocating()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::theMBDagent()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::theCANparserMBD()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::Impl::dummyCANagentMBD::~dummyCANagentMBD__deallocating()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aDummyLED::~aDummyLED__deallocating()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::~aSlimPulsableLED__deallocating()
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::theLEDmanager()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::~basic_string()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__grow_by_and_replace(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char const*)
</UL>

<P><STRONG><a name="[223]"></a>operator new[](unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._Znaj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::Impl::Impl__sub_object(unsigned int, unsigned int, unsigned long long*)
</UL>

<P><STRONG><a name="[1ed]"></a>operator new(unsigned int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_base_memory_new
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::FlashStorage::FlashStorage(unsigned int, unsigned int, unsigned long long*)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::prot::can::Frame, std::__2::allocator&lang;embot::prot::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::prot::can::Frame&rang;&)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__init(char const*, unsigned int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::userdefStartup(embot::os::Thread*, void*) const
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::LEDwaveT&lang;(unsigned short)64&rang;::duplicate(void*, unsigned int) const
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::getInstance()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::getInstance()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::getInstance()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::getInstance()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Timer()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::getInstance()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::EventThread::EventThread()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_start_CTRL_thread()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_shared_start()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tCTRL_startup(embot::os::Thread*, void*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::Timer::Impl::Impl__sub_object(embot::os::Timer*)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::theTimerManager()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::start(embot::os::theTimerManager::Config const&)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::getInstance()
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_props_t::scheduler_props_t()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::theScheduler()
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theJumper::theJumper()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theJumper::getInstance()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::theCallbackManager()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::start(embot::os::theCallbackManager::Config const&)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::getInstance()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_props_t::thread_props_t()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::CallbackThread::CallbackThread()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::MessageThread::MessageThread()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::InitThread()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::getInstance()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::IdleThread()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::getInstance()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::theCANboardInfo()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::Impl::Impl__sub_object()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::theApplication()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::getInstance()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::start_evt_based()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::theCANparserBasic()
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;void*, embot::os::Thread*&rang; &rang;(std::__2::pair&lang;void*, embot::os::Thread*&rang;&&)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::theMBDagent()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::theCANparserMBD()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang;, std::__2::__tree_node_destructor&lang;std::__2::allocator&lang;std::__2::__tree_node&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, void*&rang; &rang; &rang; &rang; std::__2::__tree&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::__map_value_compare&lang;embot::hw::LED, std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;, std::__2::less&lang;embot::hw::LED&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang; &rang;::__construct_node&lang;std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang; &rang;(std::__2::pair&lang;embot::hw::LED, embot::app::aSlimPulsableLED&rang;&&)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::pulse(unsigned int, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::aSlimPulsableLED::wave(embot::app::LEDwave const*, unsigned int)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::theLEDmanager()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::to_string(int)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang; &rang;::__grow_by_and_replace(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, char const*)
</UL>

<P><STRONG><a name="[114]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 5]<UL><LI> amcbldc-main.o(.rodata._ZTVN5embot3app7LEDwaveE)
<LI> embot_hw_flashstorage.o(.rodata._ZTVN5embot4core5utils7StorageE)
<LI> embot_os_thread.o(.rodata._ZTVN5embot2os6ThreadE)
<LI> embot_app_application_thecanparsermbd.o(.rodata._ZTVN5embot3app11application11CANagentMBDE)
<LI> embot_app_theledmanager.o(.rodata._ZTVN5embot3app9LEDhandleE)
</UL>
<P><STRONG><a name="[43d]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[a5]"></a>evIDLE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eventviewer.o(.text.evIDLE))
<BR>[Address Reference Count : 1]<UL><LI> eventviewer.o(.text.eventviewer_init)
</UL>
<P><STRONG><a name="[441]"></a>eventviewer_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, eventviewer.o(.text.eventviewer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = eventviewer_init &rArr;  eventviewer_load (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventviewer_switch_to
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventviewer_load
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventviewer_unload
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventviewer_load
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_global_init
</UL>

<P><STRONG><a name="[442]"></a>eventviewer_load</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, eventviewer.o(.text.eventviewer_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eventviewer_load &rArr; eventviewer_init &rArr;  eventviewer_load (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventviewer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventviewer_init
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_create
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_sys_start
</UL>

<P><STRONG><a name="[443]"></a>eventviewer_switch_to</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, eventviewer.o(.text.eventviewer_switch_to))
<BR><BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventviewer_init
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_task_switch
</UL>

<P><STRONG><a name="[444]"></a>eventviewer_unload</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, eventviewer.o(.text.eventviewer_unload))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eventviewer_unload &rArr; eventviewer_init &rArr;  eventviewer_load (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventviewer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_delete
</UL>

<P><STRONG><a name="[16e]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, amcbldc-main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = main &rArr; embot::app::skeleton::os::evthreadcan::run(embot::app::skeleton::os::evthreadcan::CFG const&) &rArr; embot::app::skeleton::os::basic::run(embot::app::skeleton::os::basic::CFG const&) &rArr; embot::app::theApplication::execute(embot::app::theApplication::Config const&) &rArr; embot::os::theScheduler::start(embot::os::theScheduler::Config const&) &rArr; embot::os::theScheduler::Impl::start(embot::os::theScheduler::Config const&) &rArr; embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&) &rArr; osal_base_initialise &rArr; oosiit_memory_load &rArr; rt_iit_params_init &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::run(embot::app::skeleton::os::evthreadcan::CFG const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[445]"></a>osal_ext_calloc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_rtos.o(.text.osal_ext_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = osal_ext_calloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_ext_calloc
</UL>

<P><STRONG><a name="[446]"></a>osal_ext_free</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os_rtos.o(.text.osal_ext_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_ext_free
</UL>

<P><STRONG><a name="[447]"></a>stm32hal_board_init</STRONG> (Thumb, 172 bytes, Stack size 184 bytes, board_amcbldc_v120.o(.text.stm32hal_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = stm32hal_board_init &rArr; MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32hal_init
</UL>

<P><STRONG><a name="[230]"></a>stm32hal_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32hal.o(.text.stm32hal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = stm32hal_init &rArr; stm32hal_board_init &rArr; MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32hal_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::bsp::init(embot::hw::Config const&)
</UL>

<P><STRONG><a name="[29e]"></a>__cxa_guard_acquire</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::getInstance()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::getInstance()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::getInstance()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::getInstance()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::getInstance()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::getInstance()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theJumper::getInstance()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::getInstance()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::getInstance()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::getInstance()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::getInstance()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
</UL>

<P><STRONG><a name="[2a0]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theLEDmanager::getInstance()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserBasic::getInstance()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theCANparserMBD::getInstance()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::application::theMBDagent::getInstance()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theScheduler::getInstance()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theTimerManager::getInstance()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theJumper::getInstance()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::theCallbackManager::getInstance()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::InitThread::getInstance()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::IdleThread::getInstance()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theApplication::getInstance()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::theCANboardInfo::getInstance()
</UL>

<P><STRONG><a name="[1a1]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[44a]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[449]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[44b]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[44c]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1a2]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a3]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[44d]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1a6]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1fd]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __hardfp_floor &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double2MultiWord(double, unsigned int*, int)
</UL>

<P><STRONG><a name="[1f9]"></a>__hardfp_frexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, frexp.o(i.__hardfp_frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __hardfp_frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double2MultiWord(double, unsigned int*, int)
</UL>

<P><STRONG><a name="[1fc]"></a>__hardfp_ldexp</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMultiWord2Double(unsigned int const*, int, int)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double2MultiWord(double, unsigned int*, int)
</UL>

<P><STRONG><a name="[454]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[453]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[4a1]"></a>_init_box</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, rt_membox.o(i._init_box))
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_advtmr_init
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_sys_start
</UL>

<P><STRONG><a name="[455]"></a>iitchanged_isr_evt_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_iit_changes.o(i.iitchanged_isr_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = iitchanged_isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_evt_set
</UL>

<P><STRONG><a name="[458]"></a>iitchanged_rt_block</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, rt_iit_changes.o(i.iitchanged_rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = iitchanged_rt_block &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mut_wait
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_wait
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_send
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_evt_wait
</UL>

<P><STRONG><a name="[45c]"></a>iitchanged_rt_dec_dly</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rt_iit_changes.o(i.iitchanged_rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = iitchanged_rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[4ba]"></a>iitchanged_rt_evt_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_iit_changes.o(i.iitchanged_rt_evt_get))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_evt_get
</UL>

<P><STRONG><a name="[45e]"></a>iitchanged_rt_evt_set</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rt_iit_changes.o(i.iitchanged_rt_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = iitchanged_rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_evt_set
</UL>

<P><STRONG><a name="[462]"></a>iitchanged_rt_evt_wait</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_iit_changes.o(i.iitchanged_rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = iitchanged_rt_evt_wait &rArr; iitchanged_rt_block &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_evt_wait
</UL>

<P><STRONG><a name="[476]"></a>iitchanged_rt_mbx_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_iit_changes.o(i.iitchanged_rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_create
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_create
</UL>

<P><STRONG><a name="[463]"></a>iitchanged_rt_mbx_send</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, rt_iit_changes.o(i.iitchanged_rt_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = iitchanged_rt_mbx_send &rArr; iitchanged_rt_block &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_block
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_send
</UL>

<P><STRONG><a name="[464]"></a>iitchanged_rt_mbx_wait</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, rt_iit_changes.o(i.iitchanged_rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = iitchanged_rt_mbx_wait &rArr; iitchanged_rt_block &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_block
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_retrieve
</UL>

<P><STRONG><a name="[465]"></a>iitchanged_rt_mut_wait</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rt_iit_changes.o(i.iitchanged_rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = iitchanged_rt_mut_wait &rArr; iitchanged_rt_block &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_block
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mut_wait
</UL>

<P><STRONG><a name="[467]"></a>isr_iit_advtmr_start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rt_iit_advtimer.o(i.isr_iit_advtmr_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = isr_iit_advtmr_start &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_advtmr_start
</UL>

<P><STRONG><a name="[468]"></a>isr_iit_advtmr_stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_iit_advtimer.o(i.isr_iit_advtmr_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = isr_iit_advtmr_stop &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_advtmr_stop
</UL>

<P><STRONG><a name="[469]"></a>isr_mbx_receive</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_retrieve
</UL>

<P><STRONG><a name="[46a]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_send
</UL>

<P><STRONG><a name="[46b]"></a>oosiit_advtmr_new</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_advtmr_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = oosiit_advtmr_new &rArr; rt_iit_advtmr_new &rArr; rt_iit_memory_new &rArr; oosiit_ext_calloc &rArr; osal_ext_calloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_advtmr_new
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_new
</UL>

<P><STRONG><a name="[46f]"></a>oosiit_advtmr_start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_advtmr_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = oosiit_advtmr_start &rArr; isr_iit_advtmr_start &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_iit_advtmr_start
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
</UL>

<P><STRONG><a name="[470]"></a>oosiit_advtmr_stop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_advtmr_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = oosiit_advtmr_stop &rArr; isr_iit_advtmr_stop &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_iit_advtmr_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_stop
</UL>

<P><STRONG><a name="[498]"></a>oosiit_evt_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, oosiit.o(i.oosiit_evt_get))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_eventflag_getany
</UL>

<P><STRONG><a name="[471]"></a>oosiit_evt_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = oosiit_evt_set &rArr; iitchanged_isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_isr_evt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_eventflag_set
</UL>

<P><STRONG><a name="[497]"></a>oosiit_evt_wait</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, oosiit.o(i.oosiit_evt_wait))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_eventflag_getany
</UL>

<P><STRONG><a name="[472]"></a>oosiit_ext_calloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal-oosiit.o(i.oosiit_ext_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = oosiit_ext_calloc &rArr; osal_ext_calloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_ext_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_create
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_sys_start
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_params_init
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_new
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dynamic_mode_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_memory_new
</UL>

<P><STRONG><a name="[473]"></a>oosiit_ext_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal-oosiit.o(i.oosiit_ext_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_ext_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_delete
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_del
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_memory_del
</UL>

<P><STRONG><a name="[4a6]"></a>oosiit_hid_params_get_ram32</STRONG> (Thumb, 152 bytes, Stack size 4 bytes, oosiit.o(i.oosiit_hid_params_get_ram32))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = oosiit_hid_params_get_ram32
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_params_init
</UL>

<P><STRONG><a name="[4a7]"></a>oosiit_hid_params_get_ram64</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, oosiit.o(i.oosiit_hid_params_get_ram64))
<BR><BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_params_init
</UL>

<P><STRONG><a name="[4a8]"></a>oosiit_hid_params_get_stdlib32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, oosiit.o(i.oosiit_hid_params_get_stdlib32))
<BR><BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_params_init
</UL>

<P><STRONG><a name="[474]"></a>oosiit_mbx_create</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, oosiit.o(i.oosiit_mbx_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = oosiit_mbx_create &rArr; rt_iit_memory_getmbx &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_getmbx
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_new
</UL>

<P><STRONG><a name="[477]"></a>oosiit_mbx_delete</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, oosiit.o(i.oosiit_mbx_delete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_relmbx
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_mbx_delete
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_delete
</UL>

<P><STRONG><a name="[47a]"></a>oosiit_mbx_retrieve</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_mbx_retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = oosiit_mbx_retrieve &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_getquick
</UL>

<P><STRONG><a name="[47b]"></a>oosiit_mbx_send</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = oosiit_mbx_send &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_put
</UL>

<P><STRONG><a name="[47c]"></a>oosiit_memory_del</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_memory_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_del
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_delete
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_delete
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_base_memory_del
</UL>

<P><STRONG><a name="[496]"></a>oosiit_memory_getsize</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, oosiit.o(i.oosiit_memory_getsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = oosiit_memory_getsize
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_base_memory_getsize
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_base_initialise
</UL>

<P><STRONG><a name="[47e]"></a>oosiit_memory_getstack</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, oosiit.o(i.oosiit_memory_getstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = oosiit_memory_getstack &rArr; rt_iit_memory_getstack &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_getstack
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_new
</UL>

<P><STRONG><a name="[480]"></a>oosiit_memory_load</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, oosiit.o(i.oosiit_memory_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = oosiit_memory_load &rArr; rt_iit_params_init &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_params_init
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_init
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dynamic_mode_init
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_base_initialise
</UL>

<P><STRONG><a name="[485]"></a>oosiit_memory_new</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_memory_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_new
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_new
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_new
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_new
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_base_memory_new
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_base_initialise
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_new
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_launcher
</UL>

<P><STRONG><a name="[487]"></a>oosiit_microtime_get</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, oosiit.o(i.oosiit_microtime_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = oosiit_microtime_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_system_abstime_get
</UL>

<P><STRONG><a name="[488]"></a>oosiit_mut_create</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_mut_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = oosiit_mut_create &rArr; rt_iit_memory_getmut &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_getmut
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_new
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_launcher
</UL>

<P><STRONG><a name="[48b]"></a>oosiit_mut_release</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = oosiit_mut_release &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_release
</UL>

<P><STRONG><a name="[48c]"></a>oosiit_mut_wait</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_take
</UL>

<P><STRONG><a name="[459]"></a>oosiit_sys_error</STRONG> (Thumb, 138 bytes, Stack size 104 bytes, osal-oosiit.o(i.oosiit_sys_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_osal_error
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_setprio
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_get_extdata
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_delete
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mut_wait
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mut_release
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_new
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_load
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_send
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_retrieve
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_delete
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_evt_set
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_advtmr_stop
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_advtmr_start
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_block
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_create
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_sys_start
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_params_init
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_getstack
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_getmut
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_getmbx
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dynamic_mode_init
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>

<P><STRONG><a name="[48e]"></a>oosiit_sys_start</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, oosiit.o(i.oosiit_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = oosiit_sys_start &rArr; rt_iit_dbg_global_init &rArr; eventviewer_init &rArr;  eventviewer_load (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_global_init
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_system_start
</UL>

<P><STRONG><a name="[4b9]"></a>oosiit_sys_suspend</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, oosiit.o(i.oosiit_sys_suspend))
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_osal_error
</UL>

<P><STRONG><a name="[49a]"></a>oosiit_tsk_create</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oosiit_tsk_create
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_new
</UL>

<P><STRONG><a name="[490]"></a>oosiit_tsk_delete</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = oosiit_tsk_delete &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_delete
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_launcher
</UL>

<P><STRONG><a name="[491]"></a>oosiit_tsk_get_extdata</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_tsk_get_extdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = oosiit_tsk_get_extdata &rArr;  oosiit_sys_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_get
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_osal_error
</UL>

<P><STRONG><a name="[492]"></a>oosiit_tsk_self</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, oosiit.o(i.oosiit_tsk_self))
<BR><BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_launcher
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_osal_on_idle
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_osal_error
</UL>

<P><STRONG><a name="[494]"></a>oosiit_tsk_setprio</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oosiit.o(i.oosiit_tsk_setprio))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = oosiit_tsk_setprio &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_priority_set
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_new
</UL>

<P><STRONG><a name="[495]"></a>os_error</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_iit_changes.o(i.os_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>

<P><STRONG><a name="[4ae]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_sys_start
</UL>

<P><STRONG><a name="[178]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[325]"></a>osal_base_initialise</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, osal-oosiit.o(i.osal_base_initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = osal_base_initialise &rArr; oosiit_memory_load &rArr; rt_iit_params_init &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_new
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_load
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_getsize
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_osal_error
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&)
</UL>

<P><STRONG><a name="[43c]"></a>osal_base_memory_del</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal-oosiit.o(i.osal_base_memory_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osal_base_memory_del &rArr; oosiit_memory_del &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_del
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>

<P><STRONG><a name="[323]"></a>osal_base_memory_getsize</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, osal-oosiit.o(i.osal_base_memory_getsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = osal_base_memory_getsize &rArr; oosiit_memory_getsize
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_getsize
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&)
</UL>

<P><STRONG><a name="[324]"></a>osal_base_memory_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal-oosiit.o(i.osal_base_memory_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_init(embot::os::rtos::scheduler_props_t&)
</UL>

<P><STRONG><a name="[33d]"></a>osal_eventflag_getany</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, osal-oosiit.o(i.osal_eventflag_getany))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osal_eventflag_getany
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_evt_wait
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_evt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::event_get(unsigned int)
</UL>

<P><STRONG><a name="[33e]"></a>osal_eventflag_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, osal-oosiit.o(i.osal_eventflag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = osal_eventflag_set &rArr; oosiit_evt_set &rArr; iitchanged_isr_evt_set &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_evt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::event_set(void*, unsigned int)
</UL>

<P><STRONG><a name="[338]"></a>osal_info_get_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal-oosiit.o(i.osal_info_get_status))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_isrunning()
</UL>

<P><STRONG><a name="[bf]"></a>osal_launcher</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, osal-oosiit.o(i.osal_launcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = osal_launcher &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_take
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_release
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_self
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_delete
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mut_create
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_new
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_osal_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal-oosiit.o(i.osal_system_start)
</UL>
<P><STRONG><a name="[336]"></a>osal_messagequeue_delete</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, osal-oosiit.o(i.osal_messagequeue_delete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_take
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_release
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_del
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::messagequeue_delete(void*)
</UL>

<P><STRONG><a name="[32a]"></a>osal_messagequeue_getquick</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, osal-oosiit.o(i.osal_messagequeue_getquick))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = osal_messagequeue_getquick &rArr; oosiit_mbx_retrieve &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_retrieve
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::messagequeue_get(void*, unsigned int)
</UL>

<P><STRONG><a name="[32b]"></a>osal_messagequeue_new</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, osal-oosiit.o(i.osal_messagequeue_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = osal_messagequeue_new &rArr; oosiit_mbx_create &rArr; rt_iit_memory_getmbx &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_take
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_release
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_new
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_create
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_osal_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::messagequeue_new(unsigned char)
</UL>

<P><STRONG><a name="[32c]"></a>osal_messagequeue_put</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, osal-oosiit.o(i.osal_messagequeue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = osal_messagequeue_put &rArr; oosiit_mbx_send &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::messagequeue_put(void*, void*, unsigned int)
</UL>

<P><STRONG><a name="[340]"></a>osal_mutex_new</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, osal-oosiit.o(i.osal_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = osal_mutex_new &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_take
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_release
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mut_create
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_new
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_osal_error
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_new()
</UL>

<P><STRONG><a name="[320]"></a>osal_mutex_release</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, osal-oosiit.o(i.osal_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = osal_mutex_release &rArr; oosiit_mut_release &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mut_release
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_release(void*)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_new
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_priority_set
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_delete
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_new
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_new
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_delete
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_new
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_launcher
</UL>

<P><STRONG><a name="[31a]"></a>osal_mutex_take</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, osal-oosiit.o(i.osal_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mut_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::mutex_take(void*, unsigned int)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_new
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_priority_set
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_delete
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_new
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_new
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_delete
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_new
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_launcher
</UL>

<P><STRONG><a name="[21f]"></a>osal_set_errorhandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal-oosiit.o(i.osal_set_errorhandler))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_pre_main_t::osal_init_pre_main_t__sub_object()
</UL>

<P><STRONG><a name="[334]"></a>osal_system_abstime_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal-oosiit.o(i.osal_system_abstime_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osal_system_abstime_get &rArr; oosiit_microtime_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_microtime_get
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_timeget()
</UL>

<P><STRONG><a name="[32d]"></a>osal_system_start</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, osal-oosiit.o(i.osal_system_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osal_system_start &rArr; oosiit_sys_start &rArr; rt_iit_dbg_global_init &rArr; eventviewer_init &rArr;  eventviewer_load (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_start
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_osal_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_start2()
</UL>

<P><STRONG><a name="[321]"></a>osal_task_delete</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, osal-oosiit.o(i.osal_task_delete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_take
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_release
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_delete
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_del
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_delete(void*)
</UL>

<P><STRONG><a name="[33c]"></a>osal_task_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osal-oosiit.o(i.osal_task_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_task_get &rArr; oosiit_tsk_get_extdata &rArr;  oosiit_sys_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_self
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_get_extdata
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_thread_running()
</UL>

<P><STRONG><a name="[499]"></a>osal_task_new</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, osal-oosiit.o(i.osal_task_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = osal_task_new &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_take
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_release
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_setprio
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_create
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_new
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_getstack
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_osal_error
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_new1
</UL>

<P><STRONG><a name="[31c]"></a>osal_task_new1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, osal-oosiit.o(i.osal_task_new1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = osal_task_new1 &rArr; osal_task_new &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_new(embot::os::rtos::thread_props_t&)
</UL>

<P><STRONG><a name="[335]"></a>osal_task_priority_set</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, osal-oosiit.o(i.osal_task_priority_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = osal_task_priority_set &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_take
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_release
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_setprio
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::thread_setpriority(void*, embot::os::Priority)
</UL>

<P><STRONG><a name="[341]"></a>osal_timer_new</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, osal-oosiit.o(i.osal_timer_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = osal_timer_new &rArr; osal_mutex_take &rArr; oosiit_mut_wait &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_take
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_release
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_new
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_advtmr_new
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_osal_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::timer_new()
</UL>

<P><STRONG><a name="[31e]"></a>osal_timer_start</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, osal-oosiit.o(i.osal_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = osal_timer_start &rArr; oosiit_advtmr_start &rArr; isr_iit_advtmr_start &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_advtmr_start
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::timer_start(void*, embot::os::rtos::timerMode, unsigned int, void (*)(void*, void*), void*)
</UL>

<P><STRONG><a name="[31d]"></a>osal_timer_stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, osal-oosiit.o(i.osal_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = osal_timer_stop &rArr; oosiit_advtmr_stop &rArr; isr_iit_advtmr_stop &rArr; rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_advtmr_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::timer_stop(void*)
</UL>

<P><STRONG><a name="[49b]"></a>rt_advtmr_psh</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, rt_iit_advtimer.o(i.rt_advtmr_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_advtmr_psh &rArr; s_rt_iit_advtmr_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_del
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_rt_iit_advtmr_stop
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_rt_iit_advtmr_start
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_pop_req_base
</UL>

<P><STRONG><a name="[72]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_create
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_sys_start
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_advtmr_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm4.o(.emb_text)
</UL>
<P><STRONG><a name="[461]"></a>rt_dispatch</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_task_switch
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_prio
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_delete
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_create
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_sys_start
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_mbx_delete
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_wait
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_send
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_evt_set
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
</UL>

<P><STRONG><a name="[73]"></a>rt_free_box</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_advtmr_psh
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm4.o(.emb_text)
</UL>
<P><STRONG><a name="[4af]"></a>rt_get_TID</STRONG> (Thumb, 136 bytes, Stack size 4 bytes, rt_iit_changes.o(i.rt_get_TID))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_get_TID
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_create
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_sys_start
</UL>

<P><STRONG><a name="[45a]"></a>rt_get_first</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_pop_req_base
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_block
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_prio
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_delete
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_mbx_delete
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_wait
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_send
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
</UL>

<P><STRONG><a name="[4a0]"></a>rt_iit_advtmr_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_iit_advtimer.o(i.rt_iit_advtmr_init))
<BR><BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_sys_start
</UL>

<P><STRONG><a name="[46d]"></a>rt_iit_advtmr_new</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_iit_advtimer.o(i.rt_iit_advtmr_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = rt_iit_advtmr_new &rArr; rt_iit_memory_new &rArr; oosiit_ext_calloc &rArr; osal_ext_calloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_new
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_advtmr_new
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_advtmr_new
</UL>

<P><STRONG><a name="[4b1]"></a>rt_iit_advtmr_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_iit_advtimer.o(i.rt_iit_advtmr_next))
<BR><BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_timeofnextevent
</UL>

<P><STRONG><a name="[4a2]"></a>rt_iit_advtmr_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_iit_advtimer.o(i.rt_iit_advtmr_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_iit_advtmr_start &rArr; s_rt_iit_advtmr_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_rt_iit_advtmr_start
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_advtmr_start
</UL>

<P><STRONG><a name="[4a3]"></a>rt_iit_advtmr_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_iit_advtimer.o(i.rt_iit_advtmr_stop))
<BR><BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_rt_iit_advtmr_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_advtmr_stop
</UL>

<P><STRONG><a name="[4b8]"></a>rt_iit_advtmr_tick</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, rt_iit_advtimer.o(i.rt_iit_advtmr_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_iit_advtmr_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[48f]"></a>rt_iit_dbg_global_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rt_iit_changes.o(i.rt_iit_dbg_global_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_iit_dbg_global_init &rArr; eventviewer_init &rArr;  eventviewer_load (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventviewer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_start
</UL>

<P><STRONG><a name="[46c]"></a>rt_iit_dbg_svc_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_iit_changes.o(i.rt_iit_dbg_svc_enter))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mut_create
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_delete
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_create
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_advtmr_new
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_setprio
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_self
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_get_extdata
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_delete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_create
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_sys_suspend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_sys_start
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mut_wait
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mut_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mut_create
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_microtime_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_memory_getstack
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_send
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_retrieve
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_delete
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_create
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_evt_wait
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_evt_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_evt_get
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_advtmr_stop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_advtmr_start
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_advtmr_new
</UL>

<P><STRONG><a name="[46e]"></a>rt_iit_dbg_svc_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_iit_changes.o(i.rt_iit_dbg_svc_exit))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mut_create
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_delete
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_create
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_advtmr_new
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_setprio
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_self
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_get_extdata
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_delete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_create
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_sys_suspend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_sys_start
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mut_wait
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mut_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mut_create
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_microtime_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_memory_getstack
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_send
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_retrieve
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_delete
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_create
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_evt_wait
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_evt_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_evt_get
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_advtmr_stop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_advtmr_start
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_advtmr_new
</UL>

<P><STRONG><a name="[49f]"></a>rt_iit_dbg_task_switch</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_iit_changes.o(i.rt_iit_dbg_task_switch))
<BR><BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventviewer_switch_to
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[484]"></a>rt_iit_dynamic_mode_init</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, rt_iit_changes.o(i.rt_iit_dynamic_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = rt_iit_dynamic_mode_init &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_ext_calloc
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_load
</UL>

<P><STRONG><a name="[478]"></a>rt_iit_mbx_delete</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, rt_iit_changes.o(i.rt_iit_mbx_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_iit_mbx_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_delete
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_delete
</UL>

<P><STRONG><a name="[47d]"></a>rt_iit_memory_del</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_iit_changes.o(i.rt_iit_memory_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_ext_free
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_del
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_relstack
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_advtmr_psh
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_relmbx
</UL>

<P><STRONG><a name="[475]"></a>rt_iit_memory_getmbx</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_iit_memory.o(i.rt_iit_memory_getmbx))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = rt_iit_memory_getmbx &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_new
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_create
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_create
</UL>

<P><STRONG><a name="[489]"></a>rt_iit_memory_getmut</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_iit_memory.o(i.rt_iit_memory_getmut))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = rt_iit_memory_getmut &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_new
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mut_create
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mut_create
</UL>

<P><STRONG><a name="[47f]"></a>rt_iit_memory_getstack</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_iit_memory.o(i.rt_iit_memory_getstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = rt_iit_memory_getstack &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_new
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_getstack
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_memory_getstack
</UL>

<P><STRONG><a name="[483]"></a>rt_iit_memory_init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, rt_iit_memory.o(i.rt_iit_memory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = rt_iit_memory_init &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_load
</UL>

<P><STRONG><a name="[486]"></a>rt_iit_memory_new</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_iit_changes.o(i.rt_iit_memory_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = rt_iit_memory_new &rArr; oosiit_ext_calloc &rArr; osal_ext_calloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_ext_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_new
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_getstack
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_getmut
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_getmbx
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_advtmr_new
</UL>

<P><STRONG><a name="[479]"></a>rt_iit_memory_relmbx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_iit_memory.o(i.rt_iit_memory_relmbx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_iit_memory_relmbx &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_del
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mbx_delete
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mbx_delete
</UL>

<P><STRONG><a name="[4a5]"></a>rt_iit_memory_relstack</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_iit_memory.o(i.rt_iit_memory_relstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_iit_memory_relstack &rArr; rt_iit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_del
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_delete
</UL>

<P><STRONG><a name="[482]"></a>rt_iit_params_init</STRONG> (Thumb, 740 bytes, Stack size 96 bytes, rt_iit_changes.o(i.rt_iit_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = rt_iit_params_init &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_ext_calloc
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_hid_params_get_stdlib32
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_hid_params_get_ram64
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_hid_params_get_ram32
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_memory_load
</UL>

<P><STRONG><a name="[4a9]"></a>rt_iit_pop_req_base</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, rt_iit_changes.o(i.rt_iit_pop_req_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = rt_iit_pop_req_base &rArr; rt_mbx_psh &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_advtmr_psh
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[4ab]"></a>rt_iit_sys_start</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, rt_iit_changes.o(i.rt_iit_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = rt_iit_sys_start &rArr; rt_init_context &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventviewer_load
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_ext_calloc
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_PSP
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_advtmr_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_TID
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_sys_start
</UL>

<P><STRONG><a name="[4b0]"></a>rt_iit_timeofnextevent</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, rt_iit_changes.o(i.rt_iit_timeofnextevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_iit_timeofnextevent
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_advtmr_next
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_sys_suspend
</UL>

<P><STRONG><a name="[4b2]"></a>rt_iit_tsk_create</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, rt_iit_changes.o(i.rt_iit_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = rt_iit_tsk_create &rArr; rt_init_context &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventviewer_load
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_ext_calloc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_TID
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_create
</UL>

<P><STRONG><a name="[4b3]"></a>rt_iit_tsk_delete</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, rt_iit_changes.o(i.rt_iit_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = rt_iit_tsk_delete &rArr; rt_stk_check &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventviewer_unload
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_ext_free
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_relstack
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_delete
</UL>

<P><STRONG><a name="[4b6]"></a>rt_iit_tsk_prio</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rt_iit_changes.o(i.rt_iit_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_iit_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_setprio
</UL>

<P><STRONG><a name="[493]"></a>rt_iit_tsk_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_iit_changes.o(i.rt_iit_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_self
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_tsk_self
</UL>

<P><STRONG><a name="[4ac]"></a>rt_init_context</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rt_iit_changes.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = rt_init_context &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_create
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_sys_start
</UL>

<P><STRONG><a name="[525]"></a>rt_init_stack</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, hal_cm.o(i.rt_init_stack), UNUSED)

<P><STRONG><a name="[4aa]"></a>rt_mbx_psh</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = rt_mbx_psh &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_pop_req_base
</UL>

<P><STRONG><a name="[48a]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_mut_create
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mut_create
</UL>

<P><STRONG><a name="[4b7]"></a>rt_mut_release</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_oosiit_mut_release
</UL>

<P><STRONG><a name="[175]"></a>rt_pop_req</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_iit_changes.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = rt_pop_req &rArr; rt_iit_pop_req_base &rArr; rt_mbx_psh &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_pop_req_base
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[457]"></a>rt_psh_req</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_sys_start
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_iit_advtmr_stop
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_iit_advtmr_start
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_isr_evt_set
</UL>

<P><STRONG><a name="[456]"></a>rt_psq_enq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = rt_psq_enq &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_iit_advtmr_stop
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_iit_advtmr_start
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_isr_evt_set
</UL>

<P><STRONG><a name="[45d]"></a>rt_put_prio</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_pop_req_base
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_dec_dly
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_prio
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_delete
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_mbx_delete
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mut_wait
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_wait
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_send
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
</UL>

<P><STRONG><a name="[49e]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[466]"></a>rt_resort_prio</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_resort_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_prio
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mut_wait
</UL>

<P><STRONG><a name="[460]"></a>rt_ret_val</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_pop_req_base
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_delete
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_mbx_delete
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_wait
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_send
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_evt_set
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
</UL>

<P><STRONG><a name="[45f]"></a>rt_rmv_dly</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_pop_req_base
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_delete
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_mbx_delete
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_wait
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_send
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_evt_set
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
</UL>

<P><STRONG><a name="[4b5]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_delete
</UL>

<P><STRONG><a name="[174]"></a>rt_stk_check</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, oosiit.o(i.rt_stk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = rt_stk_check &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_delete
</UL>

<P><STRONG><a name="[45b]"></a>rt_switch_req</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_block
</UL>

<P><STRONG><a name="[176]"></a>rt_systick</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, rt_iit_changes.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = rt_systick &rArr; rt_iit_pop_req_base &rArr; rt_mbx_psh &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_advtmr_tick
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_pop_req_base
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_dec_dly
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a6]"></a>svc_oosiit_advtmr_new</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, oosiit.o(i.svc_oosiit_advtmr_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = svc_oosiit_advtmr_new &rArr; rt_iit_advtmr_new &rArr; rt_iit_memory_new &rArr; oosiit_ext_calloc &rArr; osal_ext_calloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_advtmr_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_advtmr_new)
</UL>
<P><STRONG><a name="[a7]"></a>svc_oosiit_advtmr_start</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, oosiit.o(i.svc_oosiit_advtmr_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svc_oosiit_advtmr_start &rArr; rt_iit_advtmr_start &rArr; s_rt_iit_advtmr_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_advtmr_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_advtmr_start)
</UL>
<P><STRONG><a name="[a8]"></a>svc_oosiit_advtmr_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oosiit.o(i.svc_oosiit_advtmr_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svc_oosiit_advtmr_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_advtmr_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_advtmr_stop)
</UL>
<P><STRONG><a name="[a9]"></a>svc_oosiit_evt_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, oosiit.o(i.svc_oosiit_evt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svc_oosiit_evt_get
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_evt_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_evt_get)
</UL>
<P><STRONG><a name="[aa]"></a>svc_oosiit_evt_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, oosiit.o(i.svc_oosiit_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svc_oosiit_evt_set &rArr; iitchanged_rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_evt_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_evt_set)
</UL>
<P><STRONG><a name="[ab]"></a>svc_oosiit_evt_wait</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, oosiit.o(i.svc_oosiit_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = svc_oosiit_evt_wait &rArr; iitchanged_rt_evt_wait &rArr; iitchanged_rt_block &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_evt_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_evt_wait)
</UL>
<P><STRONG><a name="[ac]"></a>svc_oosiit_mbx_create</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, oosiit.o(i.svc_oosiit_mbx_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = svc_oosiit_mbx_create &rArr; rt_iit_memory_getmbx &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_getmbx
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_mbx_create)
</UL>
<P><STRONG><a name="[ad]"></a>svc_oosiit_mbx_delete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, oosiit.o(i.svc_oosiit_mbx_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svc_oosiit_mbx_delete &rArr; rt_iit_mbx_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_relmbx
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_mbx_delete
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_mbx_delete)
</UL>
<P><STRONG><a name="[ae]"></a>svc_oosiit_mbx_retrieve</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, oosiit.o(i.svc_oosiit_mbx_retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = svc_oosiit_mbx_retrieve &rArr; iitchanged_rt_mbx_wait &rArr; iitchanged_rt_block &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_mbx_retrieve)
</UL>
<P><STRONG><a name="[af]"></a>svc_oosiit_mbx_send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, oosiit.o(i.svc_oosiit_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = svc_oosiit_mbx_send &rArr; iitchanged_rt_mbx_send &rArr; iitchanged_rt_block &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mbx_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_mbx_send)
</UL>
<P><STRONG><a name="[b0]"></a>svc_oosiit_memory_del</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, oosiit.o(i.svc_oosiit_memory_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svc_oosiit_memory_del &rArr; oosiit_ext_free &rArr; osal_ext_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_ext_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_memory_del)
</UL>
<P><STRONG><a name="[b1]"></a>svc_oosiit_memory_getstack</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oosiit.o(i.svc_oosiit_memory_getstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = svc_oosiit_memory_getstack &rArr; rt_iit_memory_getstack &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_getstack
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_memory_getstack)
</UL>
<P><STRONG><a name="[b2]"></a>svc_oosiit_memory_new</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oosiit.o(i.svc_oosiit_memory_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = svc_oosiit_memory_new &rArr; oosiit_ext_calloc &rArr; osal_ext_calloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_ext_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_memory_new)
</UL>
<P><STRONG><a name="[b3]"></a>svc_oosiit_microtime_get</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, oosiit.o(i.svc_oosiit_microtime_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svc_oosiit_microtime_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_microtime_get)
</UL>
<P><STRONG><a name="[b4]"></a>svc_oosiit_mut_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, oosiit.o(i.svc_oosiit_mut_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = svc_oosiit_mut_create &rArr; rt_iit_memory_getmut &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_memory_getmut
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_mut_create)
</UL>
<P><STRONG><a name="[b5]"></a>svc_oosiit_mut_release</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oosiit.o(i.svc_oosiit_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svc_oosiit_mut_release &rArr; rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_mut_release)
</UL>
<P><STRONG><a name="[b6]"></a>svc_oosiit_mut_wait</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, oosiit.o(i.svc_oosiit_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = svc_oosiit_mut_wait &rArr; iitchanged_rt_mut_wait &rArr; iitchanged_rt_block &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iitchanged_rt_mut_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_mut_wait)
</UL>
<P><STRONG><a name="[b7]"></a>svc_oosiit_sys_start</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, oosiit.o(i.svc_oosiit_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = svc_oosiit_sys_start &rArr; rt_iit_sys_start &rArr; rt_init_context &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_sys_start
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_sys_start)
</UL>
<P><STRONG><a name="[b8]"></a>svc_oosiit_sys_suspend</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oosiit.o(i.svc_oosiit_sys_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svc_oosiit_sys_suspend &rArr; rt_iit_timeofnextevent
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_timeofnextevent
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_sys_suspend)
</UL>
<P><STRONG><a name="[b9]"></a>svc_oosiit_tsk_create</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, oosiit.o(i.svc_oosiit_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = svc_oosiit_tsk_create &rArr; rt_iit_tsk_create &rArr; rt_init_context &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_create
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_tsk_create)
</UL>
<P><STRONG><a name="[ba]"></a>svc_oosiit_tsk_delete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oosiit.o(i.svc_oosiit_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = svc_oosiit_tsk_delete &rArr; rt_iit_tsk_delete &rArr; rt_stk_check &rArr; os_error &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_delete
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_tsk_delete)
</UL>
<P><STRONG><a name="[bb]"></a>svc_oosiit_tsk_get_extdata</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, oosiit.o(i.svc_oosiit_tsk_get_extdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svc_oosiit_tsk_get_extdata
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_tsk_get_extdata)
</UL>
<P><STRONG><a name="[bc]"></a>svc_oosiit_tsk_self</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, oosiit.o(i.svc_oosiit_tsk_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svc_oosiit_tsk_self
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_self
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_tsk_self)
</UL>
<P><STRONG><a name="[bd]"></a>svc_oosiit_tsk_setprio</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, oosiit.o(i.svc_oosiit_tsk_setprio))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svc_oosiit_tsk_setprio &rArr; rt_iit_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_tsk_prio
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_exit
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dbg_svc_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oosiit.o(i.oosiit_tsk_setprio)
</UL>
<P><STRONG><a name="[165]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[203]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMultiWord2Double(unsigned int const*, int, int)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[4bc]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4c0]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[4c4]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[4a4]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_params_init
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dynamic_mode_init
</UL>

<P><STRONG><a name="[4c2]"></a>_ddiv</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[451]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[4c3]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::step(unsigned char const*, CANClassTypes const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
</UL>

<P><STRONG><a name="[4c5]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ff]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double2MultiWord(double, unsigned int*, int)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_params_init
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dynamic_mode_init
</UL>

<P><STRONG><a name="[4c6]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[202]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uMultiWord2Double(unsigned int const*, int, int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::step(unsigned char const*, CANClassTypes const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_params_init
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dynamic_mode_init
</UL>

<P><STRONG><a name="[526]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[527]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[4c7]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[528]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[4c8]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[4cb]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[450]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_params_init
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_dynamic_mode_init
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_frexp
</UL>

<P><STRONG><a name="[4c9]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4bf]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[4be]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[44e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[4ca]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[44f]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[4cc]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1fe]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double2MultiWord(double, unsigned int*, int)
</UL>

<P><STRONG><a name="[4ce]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[210]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::can_d_is_controlmode_recognized(double)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::step(unsigned char const*, CANClassTypes const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
</UL>

<P><STRONG><a name="[4cf]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[4d0]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[529]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[4d1]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[200]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double2MultiWord(double, unsigned int*, int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::step(unsigned char const*, CANClassTypes const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
</UL>

<P><STRONG><a name="[4d2]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[52a]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[4d3]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1fb]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Double2MultiWord(double, unsigned int*, int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_messaging::CAN_Decoder::step(unsigned char const*, CANClassTypes const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*, MCControlModes*, unsigned char*, short*, unsigned short*, unsigned short*, short*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, CANErrorTypes*)
</UL>

<P><STRONG><a name="[4d4]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[15f]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[52b]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[52c]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[159]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[4c1]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[452]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[4d5]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14f]"></a>_GLOBAL__sub_I_amcbldc_main.cpp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, amcbldc-main.o(.text._GLOBAL__sub_I_amcbldc_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _GLOBAL__sub_I_amcbldc_main.cpp &rArr; __cxx_global_var_init.6 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> amcbldc-main.o(.init_array)
</UL>
<P><STRONG><a name="[1d4]"></a>__cxx_global_var_init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, amcbldc-main.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init &rArr; embot::app::skeleton::os::basic::sysConfig::sysConfig__sub_object(unsigned short, void*, unsigned short, void*, void*, embot::os::theTimerManager::Config const&, embot::os::theCallbackManager::Config const&, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::basic::sysConfig::sysConfig__sub_object(unsigned short, void*, unsigned short, void*, void*, embot::os::theTimerManager::Config const&, embot::os::theCallbackManager::Config const&, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_amcbldc_main.cpp
</UL>

<P><STRONG><a name="[1d5]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, amcbldc-main.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxx_global_var_init.1
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::app::skeleton::os::evthreadcan::evtConfig::evtConfig__sub_object(unsigned short, void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_amcbldc_main.cpp
</UL>

<P><STRONG><a name="[1d6]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, amcbldc-main.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.2 &rArr; mySYS::mySYS__sub_object(embot::app::skeleton::os::basic::sysConfig const&) &rArr; embot::app::skeleton::os::evthreadcan::SYSTEMevtcan::SYSTEMevtcan__sub_object(embot::app::skeleton::os::basic::sysConfig const&) &rArr; embot::app::skeleton::os::basic::SYSTEM::SYSTEM__sub_object(embot::app::skeleton::os::basic::sysConfig const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySYS::mySYS__sub_object(embot::app::skeleton::os::basic::sysConfig const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_amcbldc_main.cpp
</UL>

<P><STRONG><a name="[1d7]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, amcbldc-main.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cxx_global_var_init.3 &rArr; myEVT::myEVT__sub_object(embot::app::skeleton::os::evthreadcan::evtConfig const&, embot::app::skeleton::os::evthreadcan::canConfig const&, embot::app::theCANboardInfo::applicationInfo const&) &rArr; embot::app::skeleton::os::evthreadcan::evThreadCAN::evThreadCAN__sub_object(embot::app::skeleton::os::evthreadcan::evtConfig const&, embot::app::skeleton::os::evthreadcan::canConfig const&, embot::app::theCANboardInfo::applicationInfo const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myEVT::myEVT__sub_object(embot::app::skeleton::os::evthreadcan::evtConfig const&, embot::app::skeleton::os::evthreadcan::canConfig const&, embot::app::theCANboardInfo::applicationInfo const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_amcbldc_main.cpp
</UL>

<P><STRONG><a name="[1d8]"></a>__cxx_global_var_init.6</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, amcbldc-main.o(.text.__cxx_global_var_init.6))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __cxx_global_var_init.6 &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_amcbldc_main.cpp
</UL>

<P><STRONG><a name="[0]"></a>embot::core::s_faketimenow()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, embot_core.o(.text._ZN5embot4coreL13s_faketimenowEv))
<BR>[Address Reference Count : 1]<UL><LI> embot_core.o(.data._ZN5embot4coreL9s_timenowE)
</UL>
<P><STRONG><a name="[232]"></a>ITM_SendChar(unsigned int)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, embot_hw_bsp.o(.text._ZL12ITM_SendCharj))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::bsp::puts(char const*)
</UL>

<P><STRONG><a name="[88]"></a>embot::hw::bsp::_get1millitick()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, embot_hw_bsp.o(.text._ZN5embot2hw3bspL14_get1millitickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = embot::hw::bsp::_get1millitick() &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::now()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_bsp.o(.text._ZN5embot2hw3bsp4initERKNS0_6ConfigE)
</UL>
<P><STRONG><a name="[277]"></a>__NVIC_SystemReset()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, embot_hw_sys.o(.text._ZL18__NVIC_SystemResetv))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::sys::reset()
</UL>

<P><STRONG><a name="[261]"></a>embot::hw::can::s_tx_start(embot::hw::CAN)</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, embot_hw_can.o(.text._ZN5embot2hw3canL10s_tx_startENS0_3CANE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = embot::hw::can::s_tx_start(embot::hw::CAN) &rArr; embot::hw::can::s_addtxmessagetoqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&) &rArr; HAL_FDCAN_AddMessageToTxFifoQ
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_addtxmessagetoqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQdisable(embot::hw::CAN)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQresume(embot::hw::CAN, bool)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQenable(embot::hw::CAN)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::transmit(embot::hw::CAN)
</UL>

<P><STRONG><a name="[248]"></a>embot::hw::can::RX_IRQenable(embot::hw::CAN)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, embot_hw_can.o(.text._ZN5embot2hw3canL12RX_IRQenableENS0_3CANE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::hw::can::RX_IRQenable(embot::hw::CAN) &rArr; HAL_FDCAN_ActivateNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::enable(embot::hw::CAN)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::get(embot::hw::CAN, embot::hw::can::Frame&, unsigned char&)
</UL>

<P><STRONG><a name="[263]"></a>embot::hw::can::tx_IRQenable(embot::hw::CAN)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, embot_hw_can.o(.text._ZN5embot2hw3canL12tx_IRQenableENS0_3CANE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::hw::can::tx_IRQenable(embot::hw::CAN) &rArr; HAL_FDCAN_ActivateNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_oneframehasgone(embot::hw::CAN, __FDCAN_HandleTypeDef*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_start(embot::hw::CAN)
</UL>

<P><STRONG><a name="[251]"></a>embot::hw::can::tx_IRQresume(embot::hw::CAN, bool)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, embot_hw_can.o(.text._ZN5embot2hw3canL12tx_IRQresumeENS0_3CANEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::hw::can::tx_IRQresume(embot::hw::CAN, bool) &rArr; HAL_FDCAN_ActivateNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_start(embot::hw::CAN)
</UL>

<P><STRONG><a name="[246]"></a>embot::hw::can::RX_IRQdisable(embot::hw::CAN)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, embot_hw_can.o(.text._ZN5embot2hw3canL13RX_IRQdisableENS0_3CANE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = embot::hw::can::RX_IRQdisable(embot::hw::CAN) &rArr; HAL_FDCAN_DeactivateNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_DeactivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::get(embot::hw::CAN, embot::hw::can::Frame&, unsigned char&)
</UL>

<P><STRONG><a name="[238]"></a>embot::hw::can::s_filters_set(__FDCAN_HandleTypeDef*, unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, embot_hw_can.o(.text._ZN5embot2hw3canL13s_filters_setEP21__FDCAN_HandleTypeDefh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = embot::hw::can::s_filters_set(__FDCAN_HandleTypeDef*, unsigned char) &rArr; embot::hw::can::s_filters_set_by_class(__FDCAN_HandleTypeDef*, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; HAL_FDCAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_filters_set_by_class(__FDCAN_HandleTypeDef*, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::setfilters(embot::hw::CAN, unsigned char)
</UL>

<P><STRONG><a name="[25a]"></a>embot::hw::can::s_startdriver(__FDCAN_HandleTypeDef*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, embot_hw_can.o(.text._ZN5embot2hw3canL13s_startdriverEP21__FDCAN_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::hw::can::s_startdriver(__FDCAN_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)
</UL>

<P><STRONG><a name="[24a]"></a>embot::hw::can::tx_IRQdisable(embot::hw::CAN)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, embot_hw_can.o(.text._ZN5embot2hw3canL13tx_IRQdisableENS0_3CANE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = embot::hw::can::tx_IRQdisable(embot::hw::CAN) &rArr; HAL_FDCAN_DeactivateNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_DeactivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::enable(embot::hw::CAN)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::put(embot::hw::CAN, embot::hw::can::Frame const&)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_oneframehasgone(embot::hw::CAN, __FDCAN_HandleTypeDef*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_tx_start(embot::hw::CAN)
</UL>

<P><STRONG><a name="[258]"></a>embot::hw::can::s_filters_init(__FDCAN_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, embot_hw_can.o(.text._ZN5embot2hw3canL14s_filters_initEP21__FDCAN_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = embot::hw::can::s_filters_init(__FDCAN_HandleTypeDef*) &rArr; HAL_FDCAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)
</UL>

<P><STRONG><a name="[259]"></a>embot::hw::can::s_registercallbacks(__FDCAN_HandleTypeDef*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, embot_hw_can.o(.text._ZN5embot2hw3canL19s_registercallbacksEP21__FDCAN_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = embot::hw::can::s_registercallbacks(__FDCAN_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RegisterRxFifo0Callback
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::init(embot::hw::CAN, embot::hw::can::Config const&)
</UL>

<P><STRONG><a name="[23e]"></a>embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*)</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, embot_hw_can.o(.text._ZN5embot2hw3canL20s_rx_oneframehascomeENS0_3CANEP21__FDCAN_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = embot::hw::can::s_rx_oneframehascome(embot::hw::CAN, __FDCAN_HandleTypeDef*) &rArr; std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&) &rArr; operator new(unsigned int) &rArr; osal_base_memory_new &rArr; oosiit_memory_new &rArr; oosiit_sys_error &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::__swap_out_circular_buffer(std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;&)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::_ConstructTransaction::~_ConstructTransaction__sub_object()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::_ConstructTransaction::_ConstructTransaction__sub_object(std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;&, unsigned int)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::~__split_buffer__sub_object()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__split_buffer&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang;&&rang;::__split_buffer__sub_object(unsigned int, unsigned int, std::__2::allocator&lang;embot::hw::can::Frame&rang;&)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;embot::hw::can::Frame, std::__2::allocator&lang;embot::hw::can::Frame&rang; &rang;::max_size() const
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::execute() const
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::Frame::Frame__sub_object()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_getrxmessagefromqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__vector_base_common&lang;true&rang;::__throw_length_error() const
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::callbackOnRXcompletion(__FDCAN_HandleTypeDef*, unsigned int)
</UL>

<P><STRONG><a name="[23f]"></a>embot::hw::can::s_tx_oneframehasgone(embot::hw::CAN, __FDCAN_HandleTypeDef*)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, embot_hw_can.o(.text._ZN5embot2hw3canL20s_tx_oneframehasgoneENS0_3CANEP21__FDCAN_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = embot::hw::can::s_tx_oneframehasgone(embot::hw::CAN, __FDCAN_HandleTypeDef*) &rArr; embot::hw::can::s_addtxmessagetoqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&) &rArr; HAL_FDCAN_AddMessageToTxFifoQ
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::core::Callback::execute() const
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto embot::core::tointegral&lang;embot::hw::CAN&rang;(embot::hw::CAN)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::s_addtxmessagetoqueue(__FDCAN_HandleTypeDef*, embot::hw::can::Frame&)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQdisable(embot::hw::CAN)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::tx_IRQenable(embot::hw::CAN)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::callbackOnTXcompletion(__FDCAN_HandleTypeDef*)
</UL>

<P><STRONG><a name="[23d]"></a>embot::hw::can::toCAN(__FDCAN_HandleTypeDef*)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, embot_hw_can.o(.text._ZN5embot2hw3canL5toCANEP21__FDCAN_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::callbackOnTXcompletion(__FDCAN_HandleTypeDef*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::can::callbackOnRXcompletion(__FDCAN_HandleTypeDef*, unsigned int)
</UL>

<P><STRONG><a name="[27e]"></a>LL_GPIO_SetPinMode(GPIO_TypeDef*, unsigned int, unsigned int)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, embot_hw_gpio.o(.text._ZL18LL_GPIO_SetPinModeP12GPIO_TypeDefjj))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
</UL>

<P><STRONG><a name="[27f]"></a>LL_GPIO_SetPinOutputType(GPIO_TypeDef*, unsigned int, unsigned int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, embot_hw_gpio.o(.text._ZL24LL_GPIO_SetPinOutputTypeP12GPIO_TypeDefjj))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::_configure(embot::hw::gpio::PROP const&, embot::hw::gpio::Mode, embot::hw::gpio::Pull, embot::hw::gpio::Speed)
</UL>

<P><STRONG><a name="[150]"></a>_GLOBAL__sub_I_embot_hw_motor.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_hw_motor.o(.text._GLOBAL__sub_I_embot_hw_motor.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GLOBAL__sub_I_embot_hw_motor.cpp &rArr; __cxx_global_var_init &rArr; embot::hw::motor::PrivateData::PrivateData__sub_object() &rArr; std::__2::array&lang;embot::hw::motor::TBDef, 4u&rang;::array__sub_object() &rArr; embot::hw::motor::TBDef::TBDef__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_motor.o(.init_array)
</UL>
<P><STRONG><a name="[1db]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_hw_motor.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init &rArr; embot::hw::motor::PrivateData::PrivateData__sub_object() &rArr; std::__2::array&lang;embot::hw::motor::TBDef, 4u&rang;::array__sub_object() &rArr; embot::hw::motor::TBDef::TBDef__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::motor::PrivateData::PrivateData__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_embot_hw_motor.cpp
</UL>

<P><STRONG><a name="[c0]"></a>embot::hw::gpio::$_0::__invoke()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_08__invokeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = embot::hw::gpio::$_0::__invoke() &rArr; embot::hw::gpio::$_0::operator()() const
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_0::operator()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
</UL>
<P><STRONG><a name="[c1]"></a>embot::hw::gpio::$_1::__invoke()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_18__invokeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = embot::hw::gpio::$_1::__invoke() &rArr; embot::hw::gpio::$_1::operator()() const
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_1::operator()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
</UL>
<P><STRONG><a name="[c2]"></a>embot::hw::gpio::$_2::__invoke()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_28__invokeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = embot::hw::gpio::$_2::__invoke() &rArr; embot::hw::gpio::$_2::operator()() const
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_2::operator()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
</UL>
<P><STRONG><a name="[c3]"></a>embot::hw::gpio::$_3::__invoke()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_38__invokeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = embot::hw::gpio::$_3::__invoke() &rArr; embot::hw::gpio::$_3::operator()() const
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_3::operator()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
</UL>
<P><STRONG><a name="[c4]"></a>embot::hw::gpio::$_4::__invoke()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_48__invokeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = embot::hw::gpio::$_4::__invoke() &rArr; embot::hw::gpio::$_4::operator()() const
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_4::operator()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
</UL>
<P><STRONG><a name="[c5]"></a>embot::hw::gpio::$_5::__invoke()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_58__invokeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = embot::hw::gpio::$_5::__invoke() &rArr; embot::hw::gpio::$_5::operator()() const
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_5::operator()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
</UL>
<P><STRONG><a name="[c6]"></a>embot::hw::gpio::$_6::__invoke()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_hw_bsp_amcbldc.o(.text._ZN5embot2hw4gpio3$_68__invokeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = embot::hw::gpio::$_6::__invoke() &rArr; embot::hw::gpio::$_6::operator()() const
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_6::operator()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_hw_bsp_amcbldc.o(.rodata._ZN5embot2hw4gpioL6thebspE)
</UL>
<P><STRONG><a name="[283]"></a>embot::hw::gpio::$_0::operator()() const</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, embot_hw_bsp_amcbldc.o(.text._ZNK5embot2hw4gpio3$_0clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = embot::hw::gpio::$_0::operator()() const
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_0::__invoke()
</UL>

<P><STRONG><a name="[284]"></a>embot::hw::gpio::$_1::operator()() const</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, embot_hw_bsp_amcbldc.o(.text._ZNK5embot2hw4gpio3$_1clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = embot::hw::gpio::$_1::operator()() const
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_1::__invoke()
</UL>

<P><STRONG><a name="[285]"></a>embot::hw::gpio::$_2::operator()() const</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, embot_hw_bsp_amcbldc.o(.text._ZNK5embot2hw4gpio3$_2clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = embot::hw::gpio::$_2::operator()() const
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_2::__invoke()
</UL>

<P><STRONG><a name="[286]"></a>embot::hw::gpio::$_3::operator()() const</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, embot_hw_bsp_amcbldc.o(.text._ZNK5embot2hw4gpio3$_3clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = embot::hw::gpio::$_3::operator()() const
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_3::__invoke()
</UL>

<P><STRONG><a name="[287]"></a>embot::hw::gpio::$_4::operator()() const</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, embot_hw_bsp_amcbldc.o(.text._ZNK5embot2hw4gpio3$_4clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = embot::hw::gpio::$_4::operator()() const
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_4::__invoke()
</UL>

<P><STRONG><a name="[288]"></a>embot::hw::gpio::$_5::operator()() const</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, embot_hw_bsp_amcbldc.o(.text._ZNK5embot2hw4gpio3$_5clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = embot::hw::gpio::$_5::operator()() const
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_5::__invoke()
</UL>

<P><STRONG><a name="[289]"></a>embot::hw::gpio::$_6::operator()() const</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, embot_hw_bsp_amcbldc.o(.text._ZNK5embot2hw4gpio3$_6clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = embot::hw::gpio::$_6::operator()() const
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::gpio::$_6::__invoke()
</UL>

<P><STRONG><a name="[99]"></a>embot::os::_now()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_os.o(.text._ZN5embot2osL4_nowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = embot::os::_now() &rArr; embot::os::rtos::scheduler_timeget() &rArr; osal_system_abstime_get &rArr; oosiit_microtime_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::os::rtos::scheduler_timeget()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os.o(.text._ZN5embot2os4initERKNS0_6ConfigE)
</UL>
<P><STRONG><a name="[151]"></a>_GLOBAL__sub_I_embot_os_rtos.cpp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, embot_os_rtos.o(.text._GLOBAL__sub_I_embot_os_rtos.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _GLOBAL__sub_I_embot_os_rtos.cpp &rArr; __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_os_rtos.o(.init_array)
</UL>
<P><STRONG><a name="[1dc]"></a>__cxx_global_var_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, embot_os_rtos.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;void*, embot::os::Thread*&rang; &rang; &rang;::__tree__sub_object(std::__2::__map_value_compare&lang;void*, std::__2::__value_type&lang;void*, embot::os::Thread*&rang;, std::__2::less&lang;void*&rang;, true&rang; const&)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_embot_os_rtos.cpp
</UL>

<P><STRONG><a name="[1dd]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, embot_os_rtos.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cxx_global_var_init.1 &rArr; osal_init_pre_main_t::osal_init_pre_main_t__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_pre_main_t::osal_init_pre_main_t__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_embot_os_rtos.cpp
</UL>

<P><STRONG><a name="[152]"></a>_GLOBAL__sub_I_embot_app_skeleton_os_evthreadcan.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text._GLOBAL__sub_I_embot_app_skeleton_os_evthreadcan.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _GLOBAL__sub_I_embot_app_skeleton_os_evthreadcan.cpp &rArr; __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_skeleton_os_evthreadcan.o(.init_array)
</UL>
<P><STRONG><a name="[1da]"></a>__cxx_global_var_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, embot_app_skeleton_os_evthreadcan.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_embot_app_skeleton_os_evthreadcan.cpp
</UL>

<P><STRONG><a name="[153]"></a>_GLOBAL__sub_I_embot_app_skeleton_os_basic.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, embot_app_skeleton_os_basic.o(.text._GLOBAL__sub_I_embot_app_skeleton_os_basic.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GLOBAL__sub_I_embot_app_skeleton_os_basic.cpp &rArr; __cxx_global_var_init &rArr; embot::hw::flash::getpartition(embot::hw::FLASH) &rArr; embot::hw::flash::BSP::getPROP(embot::hw::FLASH) const &rArr; bool embot::hw::bsp::SUPP::supported&lang;embot::hw::FLASH&rang;(embot::hw::FLASH) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> embot_app_skeleton_os_basic.o(.init_array)
</UL>
<P><STRONG><a name="[1d9]"></a>__cxx_global_var_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, embot_app_skeleton_os_basic.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init &rArr; embot::hw::flash::getpartition(embot::hw::FLASH) &rArr; embot::hw::flash::BSP::getPROP(embot::hw::FLASH) const &rArr; bool embot::hw::bsp::SUPP::supported&lang;embot::hw::FLASH&rang;(embot::hw::FLASH) const
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;embot::hw::flash::getpartition(embot::hw::FLASH)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_embot_app_skeleton_os_basic.cpp
</UL>

<P><STRONG><a name="[2]"></a>s_stm32hal_bps_dummy_tick1msget</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32hal.o(.text.s_stm32hal_bps_dummy_tick1msget))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32hal.o(.text.stm32hal_init)
<LI> stm32hal.o(.data.s_stm32hal_bsp_config)
</UL>
<P><STRONG><a name="[1]"></a>s_stm32hal_bps_dummy_tick1msinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32hal.o(.text.s_stm32hal_bps_dummy_tick1msinit))
<BR>[Address Reference Count : 2]<UL><LI> stm32hal.o(.text.stm32hal_init)
<LI> stm32hal.o(.data.s_stm32hal_bsp_config)
</UL>
<P><STRONG><a name="[1ba]"></a>FLASH_MassErase</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32g4xx_hal_flash_ex_1.o(.text.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[48d]"></a>s_osal_error</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, osal-oosiit.o(i.s_osal_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = s_osal_error &rArr; oosiit_tsk_get_extdata &rArr;  oosiit_sys_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_self
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_get_extdata
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_new
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_system_start
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_new
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_messagequeue_new
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_base_initialise
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_task_new
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_launcher
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_sys_error
</UL>

<P><STRONG><a name="[be]"></a>s_osal_on_idle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, osal-oosiit.o(i.s_osal_on_idle))
<BR><BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oosiit_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal-oosiit.o(i.osal_system_start)
</UL>
<P><STRONG><a name="[49d]"></a>s_rt_iit_advtmr_start</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, rt_iit_advtimer.o(i.s_rt_iit_advtmr_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = s_rt_iit_advtmr_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_rt_iit_advtmr_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_advtmr_psh
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_advtmr_start
</UL>

<P><STRONG><a name="[49c]"></a>s_rt_iit_advtmr_stop</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, rt_iit_advtimer.o(i.s_rt_iit_advtmr_stop))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_advtmr_psh
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_iit_advtmr_stop
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_rt_iit_advtmr_start
</UL>

<P><STRONG><a name="[4cd]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[4bd]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[77]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[19f]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
