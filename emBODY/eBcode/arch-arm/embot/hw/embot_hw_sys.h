
/*
 * Copyright (C) 2017 iCub Facility - Istituto Italiano di Tecnologia
 * Author:  Marco Accame
 * email:   marco.accame@iit.it
 * website: www.robotcub.org
 * Permission is granted to copy, distribute, and/or modify this program
 * under the terms of the GNU General Public License, version 2 or any
 * later version published by the Free Software Foundation.
 *
 * A copy of the license can be found at
 * http://www.robotcub.org/icub/license/gpl.txt
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details
*/

// - include guard ----------------------------------------------------------------------------------------------------

#ifndef _EMBOT_HW_SYS_H_
#define _EMBOT_HW_SYS_H_

#include "embot_core.h"
#include "embot_hw_types.h"
#include "embot_hw_flash.h"
#include <string>


namespace embot::hw::sys {
       
    // retrieves the specified clock speed    
    std::uint32_t clock(embot::hw::CLOCK clk);
    
    // forces a reset
    void reset();
    
    // checks if at FLASH address there is a valid image to jump to
    bool canjump2address(embot::hw::flash::ADDR address);
    
    // it jumps to an image. if it returns ... means that canjump2address() id false
    void jump2address(embot::hw::flash::ADDR address); 
    void jump2address2(embot::hw::flash::ADDR address); 
    
    // relocates the vector table to an offset (not an embot::hw::flash::ADDR)
    void relocatevectortable(std::uint32_t offset);
    
    // relocates the vector table given the flash partition
    void relocatevectortable(embot::hw::FLASHpartitionID id);
   
    // they provide random numbers generated by hw    
    std::uint32_t random();    
    std::uint32_t minrandom();
    std::uint32_t maxrandom();
    
    // get a unique id
    uint64_t uniqueid();
    
    // prints on the trace port. 
    // [[deprecated( "use embot::core::print()" )]] 
    int puts(const char* str);
    // [[deprecated( "use embot::core::print()" )]] 
    int puts(const std::string &str);
    
    // forces the cpu to exec instructions to reach a given delay
    void delay(embot::core::relTime t);    
    
    // added just for backwards compatibility w/ hal ... use w/ wisdom
    void irq_disable();
    void irq_enable();
         
    
} // namespace embot::hw ::sys {



// in here are functions used to retrieve system flash information
namespace embot::hw::sys {
    
    // it gets the address of a given bank + pageindex. 
    // returns InvalidADDR if {id, index} are invalid, else a valid address
    embot::hw::flash::ADDR address(const embot::hw::flash::Bank::ID id, const embot::hw::flash::Page::Index index);    
    
    // it gets a Page which contains a given address. if address is invalid, page.isvalid() is false
    embot::hw::flash::Page page(const embot::hw::flash::ADDR address);    
    
    // they retrieve a Partition specified inside the BSP by its ID or by ADDR
    // if not found inside the BSP they return the handle to a Partition where .isvalid() is false
    const embot::hw::flash::Partition& partition(const embot::hw::flash::Partition::ID id);    
    const embot::hw::flash::Partition& partition(const embot::hw::flash::ADDR address);
    
    // they retrieve a Bank specified inside the BSP by its ID or by ADDR
    // if not found inside the BSP they return the handle to a Bank here .isvalid() is false
    const embot::hw::flash::Bank & bank(const embot::hw::flash::ADDR address);
    const embot::hw::flash::Bank & bank(const embot::hw::flash::Bank::ID id);
                  
} // namespace embot::hw::sys {



#endif  // include-guard


// - end-of-file (leave a blank line after)----------------------------------------------------------------------------


